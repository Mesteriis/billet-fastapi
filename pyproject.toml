[project]
name = "blank-fastapi-projects"
version = "0.1.0"
description = "Add your description here"
requires-python = ">=3.11"
authors = ["Alexander Mescheryakov <avm@sh-inc.ru>"]
readme = "README.md"
license = { text = "CC BY-NC-ND 4.0" }
dependencies = [
    "alembic>=1.13.0",
    "asyncpg>=0.30.0",
    "click>=8.1.7",
    "fastapi[standard]>=0.115.12",
    "faststream[rabbit]>=0.5.30",
    "greenlet>=3.2.3",
    "httpx>=0.28.1",
    "jinja2>=3.1.4",
    "opentelemetry-api>=1.34.0",
    "opentelemetry-exporter-otlp>=1.34.0",
    "opentelemetry-instrumentation-fastapi>=0.55b0",
    "opentelemetry-instrumentation-requests>=0.55b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.55b0",
    "opentelemetry-sdk>=1.34.0",
    "packaging>=25.0",
    "pydantic>=2.11.6",
    "pydantic-settings>=2.9.1",
    "aiogram>=3.15.0",
    "pytz>=2025.2",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.41",
    "sqlalchemy-utils>=0.41.2",
    "taskiq>=0.11.7",
    "uvicorn>=0.34.3",
    "websockets>=13.1",
    "pyjwt>=2.10.0",
    "passlib[bcrypt]>=1.7.4", # Хеширование паролей
    "aiortc>=1.6.0", # WebRTC поддержка
    "opencv-python>=4.8.0", # Для работы с видео в WebRTC
    "pytest-rabbitmq>=3.1.1",
    "taskiq-redis>=1.0.9",
    "httpx-sse>=0.4.0",
    "async-factory-boy>=1.0.1",
]

[dependency-groups]
dev = [
    "aiosqlite>=0.21.0",
    "factory-boy>=3.3.3",
    "faker>=37.4.0",
    "fakeredis>=2.29.0",
    "httpx>=0.28.1",
    "mypy>=1.13.0",
    "playwright>=1.52.0",
    "pre-commit>=4.2.0",
    "pylint>=3.3.7",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=6.1.1",
    "pytest-env>=1.1.5",
    "pytest-html>=4.1.1",
    "pytest-httpx>=0.35.0",
    "pytest-json-report>=1.5.0",
    "pytest-mock>=3.14.1",
    "pytest-mock-resources>=2.12.2",
    "pytest-rabbitmq>=3.1.1",
    "pytest-sugar>=1.0.0",
    "pytest-watch>=4.2.0",
    "pytest-xdist>=3.7.0",
    "pytest-alembic>=0.12.1",
    "click>=8.1.0",
    "rich>=13.0.0",
    "responses>=0.25.7",
    "respx>=0.22.0",
    "rich>=14.0.0",
    "ruff>=0.11.12",
    # Типы для mypy
    "types-redis>=4.6.0",
    "types-pytz>=2024.1.0",
    "types-passlib>=1.7.7",
    "types-setuptools>=70.3.0",
]

[tool.ruff]
line-length = 120
target-version = "py311"
src = ["src", "tests", "scripts"]
exclude = [
    ".git",
    ".tox",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "migrations",
    "htmlcov",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "RUF",  # ruff specific
    "PL",   # pylint
    "S",    # bandit
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "TCH",  # flake8-type-checking
]

ignore = [
    "S101",   # Use of assert
    "S311",   # Standard pseudo-random generators
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value comparison
    "T201",   # print() found
    "E501",   # line-too-long (handled by formatter)
    "RUF002", # Временно игнорировать кириллические символы в docstrings
    "RUF003", # Временно игнорировать кириллические символы в комментариях
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # Use of assert
    "PLR2004", # Magic value comparison  
    "S311",   # Standard pseudo-random generators
    "PT011",  # pytest-raises-too-broad
    "S106",   # Хардкод паролей в тестах разрешен
    "RUF001", # Эмодзи и символы в тестах разрешены
    "F821",   # Неопределенные имена (для тестовых хелперов)
    "F841",   # Неиспользуемые переменные в тестах
]
"scripts/**/*.py" = [
    "T201",   # print() found
    "S603",   # subprocess-without-shell-equals-true
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["src", "apps", "core"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.pytest.ini_options]
minversion = "7.4"
pythonpath = ["src"]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

# Опции запуска
addopts = [
    "--strict-markers",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--no-cov-on-fail",
    "-ra",
    "--tb=short",
    "--html=reports/report.html",
    "--self-contained-html",
    "--json-report",
    "--json-report-file=reports/report.json",
]

# Маркеры тестов
markers = [
    "auth: Authentication tests",
    "users: User management tests",
    "integration: Integration tests",
    "unit: Unit tests",
    "slow: Slow running tests",
    "asyncio: Async tests",
    "performance: Performance/load tests",
    "e2e: End-to-end browser tests",
    "mocked: Tests with mocked external APIs",
    "factory: Tests using factories",
    "factories: Factory tests",
    "alembic: Alembic migration tests",
    "enhanced: Enhanced test scenarios",
    "quiet_logs: Tests with quiet logging",
    "verbose_logs: Tests with verbose logging",
    "helpers: Helper function tests",
    "mocking: Mocking tests",
    "settings: Settings tests",
    "cleanup: Cleanup tests",
    "edge_cases: Edge case tests",
    "security: Security tests"
]

# Конфигурация pytest-alembic
pytest_alembic_tests_path = "tests/conftest.py"

# Фильтры предупреждений
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*:pytest.PytestUnraisableExceptionWarning",
]

# Логирование
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Переменные окружения для тестов
env = [
    "TESTING=true",
    "DATABASE_URL=sqlite+aiosqlite:///./test.db",
    "SECRET_KEY=test-secret-key-for-jwt-tokens",
    "ACCESS_TOKEN_EXPIRE_MINUTES=30",
    "REFRESH_TOKEN_EXPIRE_DAYS=7",
    "ENVIRONMENT=test",
    "TRACING_ENABLED=false",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "pass",
    "raise ImportError",
]

[tool.isort]
profile = "black"
line_length = 120
known_first_party = ["src"]

[tool.bandit]
exclude_dirs = ["tests", "migrations", ".venv", 'scripts']
skips = ["B101", "B404"]
severity = "LOW"
confidence = "LOW"
recursive = true

[tool.pylint.main]
# Использовать несколько процессов для ускорения Pylint
jobs = 0
# Загружаемые плагины
load-plugins = []
# Игнорируемые файлы и директории
ignore = ["CVS"]
ignore-patterns = ["test_.*\\.py", ".*_test\\.py"]

[tool.pylint.messages_control]
# Отключенные сообщения
disable = [
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0613",  # Unused argument
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "W0212",  # Access to protected member
    "R0801",  # Similar lines (дублирование кода)
]

[tool.pylint.similarities]
# Минимальное количество строк для считания дубликатом
min-similarity-lines = 7
# Игнорировать комментарии при проверке схожести
ignore-comments = true
# Игнорировать докстринги при проверке схожести
ignore-docstrings = true
# Не игнорировать импорты при проверке схожести
ignore-imports = false
# Не игнорировать сигнатуры при проверке схожести
ignore-signatures = false

[tool.pylint.format]
# Максимальная длина строки
max-line-length = 120
# Максимальное количество строк в модуле
max-module-lines = 1000
# Строка отступа
indent-string = "    "

[tool.pylint.design]
# Максимальное количество аргументов функции/метода
max-args = 5
# Максимальное количество атрибутов класса
max-attributes = 7
# Максимальное количество веток в функции/методе
max-branches = 12
# Максимальное количество локальных переменных
max-locals = 15
# Максимальное количество родительских классов
max-parents = 7
# Максимальное количество публичных методов класса
max-public-methods = 20
# Максимальное количество return в функции/методе
max-returns = 6
# Максимальное количество statements в функции/методе
max-statements = 50
# Минимальное количество публичных методов класса
min-public-methods = 2

[tool.pylint.basic]
# Стиль именования аргументов
argument-naming-style = "snake_case"
# Стиль именования атрибутов
attr-naming-style = "snake_case"
# Стиль именования классов
class-naming-style = "PascalCase"
# Стиль именования констант
const-naming-style = "UPPER_CASE"
# Стиль именования функций
function-naming-style = "snake_case"
# Стиль именования методов
method-naming-style = "snake_case"
# Стиль именования модулей
module-naming-style = "snake_case"
# Стиль именования переменных
variable-naming-style = "snake_case"
# Хорошие имена переменных
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "db"]
# Плохие имена переменных
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]

[tool.pylint.refactoring]
# Максимальное количество вложенных блоков
max-nested-blocks = 5

[tool.pylint.typecheck]
# Игнорировать отсутствующие члены в mixin классах
ignore-mixin-members = true
# Игнорировать отсутствующие члены когда владелец None
ignore-none = true
# Список классов для которых не проверять атрибуты
ignored-classes = ["optparse.Values", "thread._local", "_thread._local"]

[tool.pylint.variables]
# Разрешить неиспользуемые глобальные переменные
allow-global-unused-variables = true
# Регулярное выражение для dummy переменных
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
# Имена аргументов которые игнорируются
ignored-argument-names = "_.*|^ignored_|^unused_"

[tool.pylint.exceptions]
# Исключения которые вызывают предупреждение при перехвате
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.imports]
# Устаревшие модули которые не должны использоваться
deprecated-modules = ["optparse", "tkinter.tix"]

[tool.alembic_disabled]
# Путь к скриптам миграций
script_location = "migrations"
# Шаблон для имен файлов миграций
file_template = "%%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d_%%(rev)s_%%(slug)s"
# Путь для добавления в sys.path
prepend_sys_path = "src"
# Разделитель путей версий
version_path_separator = "os"
# Кодировка для файлов ревизий
output_encoding = "utf-8"
# Максимальная длина slug
truncate_slug_length = 40

# URL базы данных (будет переопределен в env.py из переменных окружения)
# sqlalchemy.url = "postgresql+asyncpg://postgres:postgres@localhost/app_db"

# Конфигурация mypy
[tool.mypy]
python_version = "3.11"
# Начинаем с мягких настроек для постепенного улучшения типизации
strict = false
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
show_error_codes = true
# Сосредотачиваемся на основных проблемах
show_column_numbers = true

# Пути для поиска модулей - используем стандартную настройку как pytest
mypy_path = "src"
namespace_packages = true
explicit_package_bases = true

# Плагины
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin"
]

# Исключения - исключаем папку с алембик миграциями и разрешаем конфликт пространства имен
exclude = [
    "migrations/versions/.*",
    "migrations/env.py",
    "src/core/migrations/__init__.py",
    "htmlcov/",
    "var/",
    "backups/",
    ".git/",
    "__pycache__/",
    "build/",
    "dist/",
]

# Настройки для отдельных модулей
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "conftest"
]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "migrations.versions.*",
    "migrations.env"
]
ignore_errors = true

# Внешние библиотеки без типов
[[tool.mypy.overrides]]
module = [
    "aiogram.*",
    "faststream.*",
    "taskiq.*",
    "aiortc.*",
    "opencv.*",
    "faker.*",
    "factory_boy.*",
    "pytest_mock_resources.*",
    "playwright.*",
    "respx.*",
    "responses.*",
]
ignore_missing_imports = true

# Специальная настройка для Pydantic
[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
