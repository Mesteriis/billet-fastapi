#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏—Å—Ç–µ–º–æ–π –º–∏–≥—Ä–∞—Ü–∏–π.

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
- –†–∞–±–æ—Ç—ã —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ Alembic
- CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å SQLAlchemy
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DatabaseManager
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Optional

from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ë–î –∏ –º–∏–≥—Ä–∞—Ü–∏–π
from core.database import get_async_session, get_engine
from core.migrations import DatabaseManager, MigrationManager, MigrationValidator
from core.migrations.backup import MigrationBackup
from core.migrations.monitor import MigrationMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def database_creation_example():
    """–ü—Ä–∏–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("üóÑÔ∏è –ü—Ä–∏–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î")

    db_manager = DatabaseManager()

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ë–î
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        exists = await db_manager.database_exists()
        print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if exists else '‚ùå'}")

        if not exists:
            print("üî® –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            created = await db_manager.create_database()
            if created:
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        connection_ok = await db_manager.test_connection()
        print(f"   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ' if connection_ok else '‚ùå'}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        info = await db_manager.get_database_info()

        print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î:")
        for key, value in info.items():
            print(f"   {key}: {value}")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ
        print("\nüîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î...")
        ensured = await db_manager.ensure_database_exists()
        print(f"   –ë–î –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é: {'‚úÖ' if ensured else '‚ùå'}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")


async def migration_management_example():
    """–ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏."""
    print("\nüîÑ –ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏")

    migration_manager = MigrationManager()

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π...")
        status = await migration_manager.get_migration_status()

        print("üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:")
        print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {status.get('current_revision', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è: {status.get('head_revision', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
        print(f"   –û–∂–∏–¥–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {len(status.get('pending_migrations', []))}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
        print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π...")
        validator = MigrationValidator()
        validation_result = await validator.validate_all_migrations()

        if validation_result["is_valid"]:
            print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã")
        else:
            print("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –º–∏–≥—Ä–∞—Ü–∏—è—Ö:")
            for error in validation_result.get("errors", []):
                print(f"   - {error}")

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
        print("\nüõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        # result = await migration_manager.safe_migrate()
        # print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ' if result else '‚ùå'}")
        print("   (–ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏: {e}")


async def migration_backup_example():
    """–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–æ–≤ –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏."""
    print("\nüíæ –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–æ–≤")

    backup_manager = MigrationBackup()

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        backup_path = await backup_manager.create_backup()

        if backup_path:
            print(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—ç–∫–∞–ø–µ
            backup_info = await backup_manager.get_backup_info(backup_path)
            print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–∞–ø–µ:")
            for key, value in backup_info.items():
                print(f"   {key}: {value}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø")

        # –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
        print("\nüìö –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤...")
        backups = await backup_manager.list_backups()

        if backups:
            print(f"   –ù–∞–π–¥–µ–Ω–æ –±—ç–∫–∞–ø–æ–≤: {len(backups)}")
            for backup in backups[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {backup}")
        else:
            print("   –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤...")
        cleaned = await backup_manager.cleanup_old_backups(keep_count=5)
        print(f"   –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: {cleaned}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–∞–ø–∞–º–∏: {e}")


async def migration_monitoring_example():
    """–ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∏–≥—Ä–∞—Ü–∏–π."""
    print("\nüìä –ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∏–≥—Ä–∞—Ü–∏–π")

    monitor = MigrationMonitor()

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        print("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π...")
        detailed_status = await monitor.get_detailed_status()

        print("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        for key, value in detailed_status.items():
            if isinstance(value, list):
                print(f"   {key}: {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                for item in value[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
                    print(f"     - {item}")
            else:
                print(f"   {key}: {value}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏...")
        integrity_check = await monitor.check_integrity()

        if integrity_check["is_valid"]:
            print("‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î –≤ –ø–æ—Ä—è–¥–∫–µ")
        else:
            print("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:")
            for issue in integrity_check.get("issues", []):
                print(f"   - {issue}")

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("\n‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        performance = await monitor.analyze_performance()

        print("üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        for metric, value in performance.items():
            print(f"   {metric}: {value}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")


async def crud_operations_example():
    """–ü—Ä–∏–º–µ—Ä CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å SQLAlchemy."""
    print("\nüìù –ü—Ä–∏–º–µ—Ä CRUD –æ–ø–µ—Ä–∞—Ü–∏–π")

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Depends(get_async_session)
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

        # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        queries = [
            "SELECT version() as db_version",
            "SELECT current_database() as current_db",
            "SELECT current_user as current_user",
            "SELECT now() as current_time",
        ]

        print("üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        # async with get_async_session() as session:
        #     for query in queries:
        #         result = await session.execute(text(query))
        #         row = result.fetchone()
        #         print(f"   {query}: {row[0] if row else '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}")

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        mock_results = {
            "SELECT version() as db_version": "PostgreSQL 15.0",
            "SELECT current_database() as current_db": "mango_msg",
            "SELECT current_user as current_user": "postgres",
            "SELECT now() as current_time": datetime.now().isoformat(),
        }

        for query, result in mock_results.items():
            print(f"   {query}: {result}")

        print("‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")


async def database_health_check_example():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüè• –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ë–î")

    try:
        health_checks = [
            {
                "name": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î",
                "status": "healthy",
                "response_time": "15ms",
                "details": "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
            },
            {"name": "–†–∞–∑–º–µ—Ä –ë–î", "status": "healthy", "size": "45.2 MB", "details": "–†–∞–∑–º–µ—Ä –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã"},
            {"name": "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "status": "healthy", "connections": "5/100", "details": "–ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"},
            {
                "name": "–ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–≥—Ä–∞—Ü–∏—è",
                "status": "healthy",
                "last_migration": "2024-12-19 10:30:00",
                "details": "–ú–∏–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã",
            },
            {"name": "–ò–Ω–¥–µ–∫—Å—ã", "status": "healthy", "unused_indexes": 0, "details": "–í—Å–µ –∏–Ω–¥–µ–∫—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è"},
        ]

        print("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è:")

        for check in health_checks:
            status_icon = "‚úÖ" if check["status"] == "healthy" else "‚ùå"
            print(f"\n   {status_icon} {check['name']}")
            print(f"      –°—Ç–∞—Ç—É—Å: {check['status']}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            for key, value in check.items():
                if key not in ["name", "status", "details"]:
                    print(f"      {key.title()}: {value}")

            print(f"      –î–µ—Ç–∞–ª–∏: {check['details']}")

        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        all_healthy = all(check["status"] == "healthy" for check in health_checks)
        overall_status = "‚úÖ –ó–¥–æ—Ä–æ–≤–∞—è" if all_healthy else "‚ùå –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        print(f"\nüè• –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –ë–î: {overall_status}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")


async def database_optimization_example():
    """–ü—Ä–∏–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("\n‚ö° –ü—Ä–∏–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î")

    try:
        optimization_tasks = [
            {
                "task": "VACUUM ANALYZE",
                "description": "–û—á–∏—Å—Ç–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                "estimated_time": "2-5 –º–∏–Ω—É—Ç",
                "impact": "–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤",
            },
            {
                "task": "REINDEX",
                "description": "–ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤",
                "estimated_time": "5-10 –º–∏–Ω—É—Ç",
                "impact": "–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
            },
            {
                "task": "–ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                "description": "–ü–æ–∏—Å–∫ –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                "estimated_time": "1-2 –º–∏–Ω—É—Ç—ã",
                "impact": "–í—ã—è–≤–ª–µ–Ω–∏–µ —É–∑–∫–∏—Ö –º–µ—Å—Ç",
            },
            {
                "task": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤",
                "description": "–ü–æ–∏—Å–∫ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤",
                "estimated_time": "30 —Å–µ–∫—É–Ω–¥",
                "impact": "–≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏",
            },
        ]

        print("üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")

        for i, task in enumerate(optimization_tasks, 1):
            print(f"\n   {i}. {task['task']}")
            print(f"      üìù {task['description']}")
            print(f"      ‚è±Ô∏è –í—Ä–µ–º—è: {task['estimated_time']}")
            print(f"      üìà –≠—Ñ—Ñ–µ–∫—Ç: {task['impact']}")

        # –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        print("\nüöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")

        for task in optimization_tasks:
            print(f"   ‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {task['task']}...")
            await asyncio.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {task['task']}")

        print("\n‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        results = {
            "queries_optimized": 15,
            "indexes_rebuilt": 8,
            "space_freed": "12.5 MB",
            "performance_improvement": "25%",
        }

        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        for metric, value in results.items():
            print(f"   {metric.replace('_', ' ').title()}: {value}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")


async def database_cli_examples():
    """–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CLI –∫–æ–º–∞–Ω–¥ –¥–ª—è –ë–î."""
    print("\nüíª –ü—Ä–∏–º–µ—Ä—ã CLI –∫–æ–º–∞–Ω–¥ –¥–ª—è –ë–î")

    cli_commands = [
        {
            "command": "make db-info",
            "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            "example_output": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: mango_msg, –†–∞–∑–º–µ—Ä: 45.2 MB, –¢–∞–±–ª–∏—Ü: 8",
        },
        {
            "command": "make db-create",
            "description": "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "example_output": "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
        },
        {
            "command": "make db-ensure",
            "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
            "example_output": "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
        },
        {
            "command": "make db-test",
            "description": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î",
            "example_output": "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ",
        },
        {
            "command": "make migrate-safe",
            "description": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π",
            "example_output": "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
        },
        {
            "command": "make migrate-status",
            "description": "–°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π",
            "example_output": "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: abc123, –û–∂–∏–¥–∞—é—â–∏—Ö: 0",
        },
        {
            "command": "make migrate-create MSG='Add user table'",
            "description": "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏",
            "example_output": "–°–æ–∑–¥–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è: 20241219_add_user_table.py",
        },
        {
            "command": "make migrate-monitor",
            "description": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π",
            "example_output": "üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–î",
        },
    ]

    print("üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ CLI –∫–æ–º–∞–Ω–¥—ã:")

    for cmd in cli_commands:
        print(f"\n   üíª {cmd['command']}")
        print(f"      üìù {cmd['description']}")
        print(f"      üì§ –ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞: {cmd['example_output']}")

    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:")
    recommended_order = ["make db-ensure", "make migrate-safe", "make db-info", "make migrate-status"]

    for i, cmd in enumerate(recommended_order, 1):
        print(f"   {i}. {cmd}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∑–∞–ø—É—Å–∫–æ–º –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤."""
    print("üéØ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏")
    print("=" * 60)

    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
        await database_creation_example()
        await migration_management_example()
        await migration_backup_example()
        await migration_monitoring_example()

        # CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
        await crud_operations_example()

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        await database_health_check_example()
        await database_optimization_example()

        # CLI –∫–æ–º–∞–Ω–¥—ã
        await database_cli_examples()

        print("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

        print("\nüí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î:")
        print("   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (POSTGRES_*)")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL: docker-compose up -d postgres")
        print("   3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: make db-ensure")
        print("   4. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: make migrate-safe")

        print("\nüîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("   make db-info          # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î")
        print("   make migrate-status   # –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π")
        print("   make migrate-monitor  # –î–µ—Ç–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

        print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
        print("   docs/DATABASE_AUTO_CREATE.md  # –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î")
        print("   docs/ALEMBIC_MIGRATION.md     # –ú–∏–≥—Ä–∞—Ü–∏–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        raise


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
    asyncio.run(main())
