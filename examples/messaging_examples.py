#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è messaging —Å–∏—Å—Ç–µ–º—ã (FastStream + RabbitMQ).

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π:
- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FastAPI
- –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
"""

import asyncio
import logging
from typing import Dict, List

from fastapi import APIRouter, Depends, FastAPI

# –ò–º–ø–æ—Ä—Ç—ã messaging —Å–∏—Å—Ç–µ–º—ã
from core.messaging import MessageClient, get_message_client
from core.messaging import (
    SystemEventMessage,
    UserNotificationMessage,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def basic_messaging_example():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    print("üöÄ –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä messaging")

    client = get_message_client()

    async with client.session():
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await client.send_user_notification(
            user_id=123, message="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É!", notification_type="info"
        )
        print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

        # –ê–¥–º–∏–Ω—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await client.send_admin_notification(message="–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", notification_type="info")
        print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
        await client.send_order_processing(order_id=456, status="processing", details={"total": 1999.99, "items": 3})
        print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ")

        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        await client.send_system_event(
            event_name="user_registered", event_data={"user_id": 123, "email": "user@example.com"}, severity="info"
        )
        print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ")


async def custom_message_example():
    """–ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    print("\nüéØ –ü—Ä–∏–º–µ—Ä –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

    client = get_message_client()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    custom_message = UserNotificationMessage(
        source="payment_service",
        payload=UserNotificationMessage.PayloadModel(
            user_id=789, message="–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", notification_type="success"
        ),
        correlation_id="payment_123",
    )

    async with client.session():
        await client.send_custom_message(
            message=custom_message, exchange_name="notifications", routing_key="user.payment"
        )
        print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


async def bulk_messaging_example():
    """–ü—Ä–∏–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    print("\nüì¶ –ü—Ä–∏–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")

    client = get_message_client()
    user_ids = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    async with client.session():
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        tasks = []
        for user_id in user_ids:
            task = client.send_user_notification(
                user_id=user_id,
                message=f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}!",
                notification_type="info",
            )
            tasks.append(task)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(*tasks)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(tasks)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")


async def error_handling_example():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    print("\nüõ°Ô∏è –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")

    client = get_message_client()

    async def safe_send_notification(user_id: int, message: str, max_retries: int = 3):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
        for attempt in range(max_retries):
            try:
                async with client.session():
                    await client.send_user_notification(user_id=user_id, message=message, notification_type="info")
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}")
                return True
            except Exception as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                if attempt == max_retries - 1:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                    raise
                await asyncio.sleep(2**attempt)  # Exponential backoff
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    await safe_send_notification(999, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å retry")


async def message_consumer_example():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    print("\nüì• –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")

    client = get_message_client()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    async def handle_user_notification(message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            notification = UserNotificationMessage(**message)
            print(f"üìß –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {notification.payload.user_id}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {notification.payload.message}")

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É:
            # - –û—Ç–ø—Ä–∞–≤–∫–∞ email
            # - Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            # - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            raise

    async def handle_system_event(message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
        try:
            event = SystemEventMessage(**message)
            print(f"üîî –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event.payload.event_name}")
            print(f"   –î–∞–Ω–Ω—ã–µ: {event.payload.event_data}")

            # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if event.payload.severity == "critical":
                print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–ë–´–¢–ò–ï! –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            raise

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    await client.connect()

    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        await client.consume_user_notifications(handle_user_notification)
        await client.consume_system_events(handle_system_event)

        print("üéß –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        print("   (–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã await client.broker.start())")

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        # await client.broker.start()

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    finally:
        await client.disconnect()


def create_fastapi_integration_example():
    """–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å FastAPI."""
    print("\nüåê –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å FastAPI")

    app = FastAPI(title="Messaging Example API")
    router = APIRouter(prefix="/api/v1", tags=["messaging"])

    @router.post("/orders/{order_id}/complete")
    async def complete_order(order_id: int, client: MessageClient = Depends(get_message_client)):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        # –ò–º–∏—Ç–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        order = {"id": order_id, "user_id": 123, "total": 2999.99, "status": "completed"}

        async with client.session():
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            await client.send_order_processing(order_id=order_id, status="completed", details={"total": order["total"]})

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await client.send_user_notification(
                user_id=order["user_id"],
                message=f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!",
                notification_type="success",
            )

            # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            await client.send_system_event(
                event_name="order_completed",
                event_data={"order_id": order_id, "total": order["total"]},
                severity="info",
            )

        return {"status": "completed", "order": order}

    @router.post("/notifications/broadcast")
    async def broadcast_notification(
        message: str, user_ids: List[int], client: MessageClient = Depends(get_message_client)
    ):
        """–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        async with client.session():
            tasks = [
                client.send_user_notification(user_id=user_id, message=message, notification_type="info")
                for user_id in user_ids
            ]

            await asyncio.gather(*tasks)

        return {"message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", "count": len(user_ids), "user_ids": user_ids}

    @router.get("/health")
    async def health_check():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è messaging —Å–∏—Å—Ç–µ–º—ã."""
        try:
            client = get_message_client()
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            return {"status": "healthy", "messaging": "available", "broker": "connected"}
        except Exception as e:
            return {"status": "unhealthy", "error": str(e)}

    app.include_router(router)

    print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å messaging endpoints:")
    print("   POST /api/v1/orders/{order_id}/complete")
    print("   POST /api/v1/notifications/broadcast")
    print("   GET  /api/v1/health")

    return app


async def monitoring_example():
    """–ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ messaging —Å–∏—Å—Ç–µ–º—ã."""
    print("\nüìä –ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

    client = get_message_client()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    stats = {"user_notifications": 0, "admin_notifications": 0, "order_messages": 0, "system_events": 0, "errors": 0}

    async def send_with_stats(message_type: str, send_func):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–±–æ—Ä–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        try:
            await send_func()
            stats[message_type] += 1
            print(f"‚úÖ {message_type}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            stats["errors"] += 1
            print(f"‚ùå {message_type}: –æ—à–∏–±–∫–∞ - {e}")

    async with client.session():
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        await send_with_stats(
            "user_notifications",
            lambda: client.send_user_notification(user_id=1, message="Test", notification_type="info"),
        )

        await send_with_stats(
            "admin_notifications",
            lambda: client.send_admin_notification(message="Admin test", notification_type="info"),
        )

        await send_with_stats(
            "order_messages", lambda: client.send_order_processing(order_id=1, status="test", details={})
        )

        await send_with_stats(
            "system_events", lambda: client.send_system_event(event_name="test", event_data={}, severity="info")
        )

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:")
    for key, value in stats.items():
        print(f"   {key}: {value}")


async def advanced_patterns_example():
    """–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤."""
    print("\nüéì –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")

    client = get_message_client()

    # –ü–∞—Ç—Ç–µ—Ä–Ω: Saga (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏)
    async def order_saga(order_id: int, user_id: int, amount: float):
        """–ü—Ä–∏–º–µ—Ä Saga –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞."""
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º Saga –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        async with client.session():
            # –®–∞–≥ 1: –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            await client.send_system_event(
                event_name="inventory_reserve_requested",
                event_data={"order_id": order_id, "amount": amount},
                severity="info",
            )

            # –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
            await client.send_system_event(
                event_name="payment_processing_requested",
                event_data={"order_id": order_id, "user_id": user_id, "amount": amount},
                severity="info",
            )

            # –®–∞–≥ 3: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await client.send_user_notification(
                user_id=user_id, message=f"–ó–∞–∫–∞–∑ {order_id} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è", notification_type="info"
            )

        print(f"‚úÖ Saga –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞")

    # –ü–∞—Ç—Ç–µ—Ä–Ω: Event Sourcing
    async def event_sourcing_example(entity_id: str, event_type: str, event_data: Dict):
        """–ü—Ä–∏–º–µ—Ä Event Sourcing –ø–∞—Ç—Ç–µ—Ä–Ω–∞."""
        print(f"üìù Event Sourcing: {event_type} –¥–ª—è {entity_id}")

        async with client.session():
            await client.send_system_event(
                event_name=f"entity_{event_type}",
                event_data={
                    "entity_id": entity_id,
                    "event_type": event_type,
                    "event_data": event_data,
                    "timestamp": asyncio.get_event_loop().time(),
                },
                severity="info",
            )

        print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_type} –∑–∞–ø–∏—Å–∞–Ω–æ")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    await order_saga(order_id=12345, user_id=678, amount=1999.99)
    await event_sourcing_example("user_123", "profile_updated", {"email": "new@example.com"})


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∑–∞–ø—É—Å–∫–æ–º –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤."""
    print("üéØ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Messaging —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)

    try:
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        await basic_messaging_example()
        await custom_message_example()
        await bulk_messaging_example()
        await error_handling_example()

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await monitoring_example()

        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        await advanced_patterns_example()

        # FastAPI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        app = create_fastapi_integration_example()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ RabbitMQ)
        # await message_consumer_example()

        print("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ RabbitMQ: docker run -d -p 5672:5672 -p 15672:15672 rabbitmq:3-management")
        print("   2. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ await message_consumer_example()")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")

        print("\nüåê –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FastAPI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
        print("   uvicorn examples.messaging_examples:app --reload")
        print("   –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000/docs")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        raise


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
    asyncio.run(main())
