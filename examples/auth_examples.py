#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å:
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- JWT —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ refresh —Ç–æ–∫–µ–Ω–∞–º–∏
- –°–∏—Å—Ç–µ–º–æ–π —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
- –ó–∞—â–∏—â–µ–Ω–Ω—ã–º–∏ endpoints
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏—è–º–∏
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from fastapi import APIRouter, Depends, FastAPI, HTTPException, status
from fastapi.security import HTTPBearer
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
from apps.auth.auth_service import AuthService
from apps.auth.dependencies import get_current_superuser, get_current_user
from apps.auth.jwt_service import JWTService
from apps.auth.password_service import PasswordService
from apps.auth.schemas import LoginResponse, TokenPair
from apps.users.models import User
from apps.users.schemas import UserCreate, UserLogin, UserResponse, UserUpdate
from apps.users.service import UserService
from core.database import get_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ DI)
# auth_service = AuthService()
# user_service = UserService()
# jwt_service = JWTService()
# password_service = PasswordService()


async def user_registration_example():
    """–ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print("üë§ –ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    user_data = UserCreate(
        email="john.doe@example.com",
        username="johndoe",
        password="SecurePassword123!",
        password_confirm="SecurePassword123!",
        full_name="John Doe",
    )

    try:
        # –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ë–î (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ Depends)
        # db = await get_async_session()

        print(f"üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data.email}")
        print(f"   Username: {user_data.username}")
        print(f"   Full name: {user_data.full_name}")

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        # user = await auth_service.register_user(db, user_data=user_data)
        # print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ID {user.id}")

        print("‚úÖ –ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")


async def user_login_example():
    """–ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."""
    print("\nüîê –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É")

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
    login_data = UserLogin(email="john.doe@example.com", password="SecurePassword123!")

    try:
        print(f"üîë –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {login_data.email}")

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        # db = await get_async_session()
        # response = await auth_service.login(db, email=login_data.email, password=login_data.password)

        # –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        mock_response = {
            "user": {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "email": "john.doe@example.com",
                "username": "johndoe",
                "full_name": "John Doe",
                "is_active": True,
                "role": "user",
            },
            "tokens": {
                "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                "refresh_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                "token_type": "bearer",
                "expires_in": 1800,
            },
        }

        print("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   Access token: {mock_response['tokens']['access_token'][:50]}...")
        print(f"   Expires in: {mock_response['tokens']['expires_in']} —Å–µ–∫—É–Ω–¥")

        return mock_response

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")


async def token_operations_example():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏."""
    print("\nüé´ –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        user_data = {
            "user_id": "123e4567-e89b-12d3-a456-426614174000",
            "email": "john.doe@example.com",
            "username": "johndoe",
            "role": "user",
        }

        print("üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...")

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        # access_token, refresh_token, jti = jwt_service.create_token_pair(
        #     user_id=user_data["user_id"],
        #     email=user_data["email"],
        #     username=user_data["username"]
        # )

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        access_token = (
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiMTIzIiwiZW1haWwiOiJqb2huQGV4YW1wbGUuY29tIn0..."
        )
        refresh_token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiMTIzIiwidHlwZSI6InJlZnJlc2gifQ..."

        print(f"‚úÖ Access token —Å–æ–∑–¥–∞–Ω: {access_token[:50]}...")
        print(f"‚úÖ Refresh token —Å–æ–∑–¥–∞–Ω: {refresh_token[:50]}...")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è access token...")
        # payload = jwt_service.verify_access_token(access_token)
        # print(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω: {payload}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...")
        # new_access_token, new_refresh_token = jwt_service.refresh_tokens(refresh_token)
        # print(f"‚úÖ –ù–æ–≤—ã–π access token: {new_access_token[:50]}...")

        print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {e}")


async def password_operations_example():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏."""
    print("\nüîí –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏")

    try:
        passwords = ["weak", "password123", "StrongPassword123!", "VerySecurePassword123!@#"]

        for password in passwords:
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è: '{password}'")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
            is_strong = password_service.validate_password_strength(password)
            print(f"   –°–∏–ª—å–Ω—ã–π: {'‚úÖ' if is_strong else '‚ùå'}")

            if is_strong:
                # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
                hashed = password_service.hash_password(password)
                print(f"   –•–µ—à: {hashed[:50]}...")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
                is_valid = password_service.verify_password(password, hashed)
                print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞: {'‚úÖ' if is_valid else '‚ùå'}")

        print("\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞—Ä–æ–ª—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏: {e}")


async def user_management_example():
    """–ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    print("\nüë• –ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_data = [
            {"email": "admin@example.com", "username": "admin", "full_name": "System Administrator", "role": "admin"},
            {
                "email": "moderator@example.com",
                "username": "moderator",
                "full_name": "Content Moderator",
                "role": "moderator",
            },
            {"email": "user1@example.com", "username": "user1", "full_name": "Regular User 1", "role": "user"},
        ]

        print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for user_data in users_data:
            print(f"   üìù {user_data['username']} ({user_data['role']})")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        update_data = UserUpdate(full_name="John Doe Updated", email="john.updated@example.com")
        print(f"   –ù–æ–≤–æ–µ –∏–º—è: {update_data.full_name}")
        print(f"   –ù–æ–≤—ã–π email: {update_data.email}")

        # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\nüö´ –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        print("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user1 –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

        # –°–º–µ–Ω–∞ —Ä–æ–ª–∏
        print("\nüîÑ –°–º–µ–Ω–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        print("   user1: user -> moderator")

        print("\n‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {e}")


async def session_management_example():
    """–ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏."""
    print("\nüîó –ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏")

    try:
        user_id = "123e4567-e89b-12d3-a456-426614174000"

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π
        sessions = [
            {
                "device_type": "web",
                "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                "ip_address": "192.168.1.100",
            },
            {
                "device_type": "mobile",
                "user_agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)",
                "ip_address": "192.168.1.101",
            },
            {"device_type": "api", "user_agent": "MyApp/1.0", "ip_address": "192.168.1.102"},
        ]

        print(f"üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")

        for i, session in enumerate(sessions, 1):
            print(f"\nüì± –°–µ—Å—Å–∏—è {i}:")
            print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {session['device_type']}")
            print(f"   User-Agent: {session['user_agent'][:50]}...")
            print(f"   IP: {session['ip_address']}")
            print(f"   –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞")

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        print(f"\nüîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: mobile")
        print("   –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
        print(f"\nüîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("   –í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

        print("\n‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏: {e}")


def create_protected_endpoints():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö API endpoints."""
    print("\nüõ°Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints")

    app = FastAPI(title="Auth Example API")
    router = APIRouter(prefix="/api/v1", tags=["auth"])

    # –ü—É–±–ª–∏—á–Ω—ã–µ endpoints
    @router.post("/auth/register", response_model=UserResponse)
    async def register(user_data: UserCreate, db: AsyncSession = Depends(get_async_session)):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user = await auth_service.register_user(db, user_data=user_data)
        return UserResponse.model_validate(user)

    @router.post("/auth/login", response_model=LoginResponse)
    async def login(login_data: LoginRequest, db: AsyncSession = Depends(get_async_session)):
        """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É."""
        response = await auth_service.login(db, email=login_data.email, password=login_data.password)
        return response

    @router.post("/auth/refresh", response_model=TokenPair)
    async def refresh_tokens(refresh_token: str, db: AsyncSession = Depends(get_async_session)):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤."""
        tokens = await auth_service.refresh_tokens(db, refresh_token=refresh_token)
        return tokens

    # –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ endpoints
    @router.get("/profile", response_model=UserResponse)
    async def get_profile(current_user: User = Depends(get_current_user)):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return UserResponse.model_validate(current_user)

    @router.put("/profile", response_model=UserResponse)
    async def update_profile(
        update_data: UserUpdate,
        current_user: User = Depends(get_current_user),
        db: AsyncSession = Depends(get_async_session),
    ):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        updated_user = await user_service.update_user(db, user_id=current_user.id, user_update=update_data)
        return UserResponse.model_validate(updated_user)

    @router.post("/auth/logout")
    async def logout(current_user: User = Depends(get_current_user), db: AsyncSession = Depends(get_async_session)):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."""
        await auth_service.logout_user(db, user_id=current_user.id)
        return {"message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"}

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ endpoints
    @router.get("/admin/users", response_model=List[UserResponse])
    async def get_all_users(
        skip: int = 0,
        limit: int = 100,
        admin_user: User = Depends(get_current_superuser),
        db: AsyncSession = Depends(get_async_session),
    ):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
        users = await user_service.get_users(db, skip=skip, limit=limit)
        return [UserResponse.model_validate(user) for user in users]

    @router.put("/admin/users/{user_id}/role")
    async def change_user_role(
        user_id: str,
        new_role: str,
        admin_user: User = Depends(get_current_superuser),
        db: AsyncSession = Depends(get_async_session),
    ):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
        updated_user = await user_service.change_user_role(
            db, user_id=user_id, new_role=new_role, current_user_id=admin_user.id
        )
        return {"message": f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}"}

    @router.delete("/admin/users/{user_id}")
    async def delete_user(
        user_id: str,
        hard_delete: bool = False,
        admin_user: User = Depends(get_current_superuser),
        db: AsyncSession = Depends(get_async_session),
    ):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
        if hard_delete:
            await user_service.delete_user_hard(db, user_id=user_id)
            message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞"
        else:
            await user_service.delete_user_soft(db, user_id=user_id)
            message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

        return {"message": message}

    app.include_router(router)

    print("‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ endpoints —Å–æ–∑–¥–∞–Ω—ã:")
    print("   POST /api/v1/auth/register")
    print("   POST /api/v1/auth/login")
    print("   POST /api/v1/auth/refresh")
    print("   POST /api/v1/auth/logout")
    print("   GET  /api/v1/profile")
    print("   PUT  /api/v1/profile")
    print("   GET  /api/v1/admin/users")
    print("   PUT  /api/v1/admin/users/{user_id}/role")
    print("   DELETE /api/v1/admin/users/{user_id}")

    return app


async def role_based_access_example():
    """–ü—Ä–∏–º–µ—Ä —Ä–æ–ª–µ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞."""
    print("\nüé≠ –ü—Ä–∏–º–µ—Ä —Ä–æ–ª–µ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    roles_permissions = {
        "user": ["read_own_profile", "update_own_profile", "create_posts", "read_posts"],
        "moderator": [
            "read_own_profile",
            "update_own_profile",
            "create_posts",
            "read_posts",
            "moderate_posts",
            "ban_users",
        ],
        "admin": [
            "read_own_profile",
            "update_own_profile",
            "create_posts",
            "read_posts",
            "moderate_posts",
            "ban_users",
            "manage_users",
            "system_settings",
        ],
    }

    def check_permission(user_role: str, required_permission: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–æ–ª–∏."""
        return required_permission in roles_permissions.get(user_role, [])

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    test_cases = [
        ("user", "read_own_profile"),
        ("user", "manage_users"),
        ("moderator", "moderate_posts"),
        ("moderator", "system_settings"),
        ("admin", "system_settings"),
        ("admin", "read_posts"),
    ]

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:")
    for role, permission in test_cases:
        has_permission = check_permission(role, permission)
        status = "‚úÖ" if has_permission else "‚ùå"
        print(f"   {role} -> {permission}: {status}")

    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def security_best_practices_example():
    """–ü—Ä–∏–º–µ—Ä –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    print("\nüîê –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    practices = [
        {
            "title": "–°–∏–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏",
            "description": "–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–≥–ª–∞–≤–Ω—ã–µ, —Å—Ç—Ä–æ—á–Ω—ã–µ, —Ü–∏—Ñ—Ä—ã, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã",
            "example": "MySecureP@ssw0rd123!",
        },
        {
            "title": "JWT —Å –∫–æ—Ä–æ—Ç–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏",
            "description": "Access —Ç–æ–∫–µ–Ω—ã –Ω–∞ 15-30 –º–∏–Ω—É—Ç, refresh –Ω–∞ 7-30 –¥–Ω–µ–π",
            "example": "access_token_expire_minutes=30",
        },
        {
            "title": "Refresh —Ç–æ–∫–µ–Ω —Ä–æ—Ç–∞—Ü–∏—è",
            "description": "–ù–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏",
            "example": "–°—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º",
        },
        {
            "title": "Rate limiting",
            "description": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ –∏ API –∑–∞–ø—Ä–æ—Å–æ–≤",
            "example": "5 –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ –≤ –º–∏–Ω—É—Ç—É",
        },
        {
            "title": "HTTPS —Ç–æ–ª—å–∫–æ",
            "description": "–í—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ HTTPS",
            "example": "secure=True –¥–ª—è cookies",
        },
        {
            "title": "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "description": "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ –∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "example": "Failed login from IP 192.168.1.100",
        },
    ]

    for i, practice in enumerate(practices, 1):
        print(f"\n{i}. {practice['title']}")
        print(f"   üìù {practice['description']}")
        print(f"   üí° –ü—Ä–∏–º–µ—Ä: {practice['example']}")

    print("\n‚úÖ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∑–∞–ø—É—Å–∫–æ–º –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤."""
    print("üéØ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("=" * 60)

    try:
        # –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        await user_registration_example()
        await user_login_example()
        await token_operations_example()
        await password_operations_example()

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        await user_management_example()
        await session_management_example()

        # –†–æ–ª–µ–≤–æ–π –¥–æ—Å—Ç—É–ø
        await role_based_access_example()

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        await security_best_practices_example()

        # FastAPI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        app = create_protected_endpoints()

        print("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

        print("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î:")
        print("   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
        print("   2. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: make migrate-up")
        print("   3. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –≤—ã–∑–æ–≤—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö")

        print("\nüåê –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:")
        print("   uvicorn examples.auth_examples:app --reload --port 8002")
        print("   –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8002/docs")

        print("\nüîë –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API:")
        print("   1. POST /api/v1/auth/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        print("   2. POST /api/v1/auth/login - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤")
        print("   3. GET /api/v1/profile - –ø—Ä–æ—Ñ–∏–ª—å (—Å Bearer —Ç–æ–∫–µ–Ω–æ–º)")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        raise


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
    asyncio.run(main())
