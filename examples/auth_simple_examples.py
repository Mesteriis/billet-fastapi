#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å:
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- JWT —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ refresh —Ç–æ–∫–µ–Ω–∞–º–∏
- –°–∏—Å—Ç–µ–º–æ–π —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
- –ó–∞—â–∏—â–µ–Ω–Ω—ã–º–∏ endpoints
- –†–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def user_registration_example():
    """–ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print("üë§ –ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    user_data = {
        "email": "john.doe@example.com",
        "username": "johndoe",
        "password": "SecurePassword123!",
        "password_confirm": "SecurePassword123!",
        "full_name": "John Doe",
    }

    try:
        print(f"üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data['email']}")
        print(f"   Username: {user_data['username']}")
        print(f"   Full name: {user_data['full_name']}")

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        # POST /auth/register
        # {
        #   "email": "john.doe@example.com",
        #   "username": "johndoe",
        #   "password": "SecurePassword123!",
        #   "password_confirm": "SecurePassword123!",
        #   "full_name": "John Doe"
        # }

        print("‚úÖ –ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω")
        print("   üì° Endpoint: POST /auth/register")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")


async def user_login_example():
    """–ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."""
    print("\nüîê –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É")

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
    login_data = {"email": "john.doe@example.com", "password": "SecurePassword123!"}

    try:
        print(f"üîë –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {login_data['email']}")

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        # POST /auth/login
        # {
        #   "email": "john.doe@example.com",
        #   "password": "SecurePassword123!"
        # }

        # –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        mock_response = {
            "user": {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "email": "john.doe@example.com",
                "username": "johndoe",
                "full_name": "John Doe",
                "is_active": True,
                "is_verified": True,
            },
            "tokens": {
                "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                "refresh_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                "token_type": "bearer",
                "expires_in": 1800,
            },
        }

        print("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   Access token: {mock_response['tokens']['access_token'][:50]}...")
        print(f"   Expires in: {mock_response['tokens']['expires_in']} —Å–µ–∫—É–Ω–¥")
        print("   üì° Endpoint: POST /auth/login")

        return mock_response

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")


async def token_operations_example():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏."""
    print("\nüé´ –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        user_data = {
            "user_id": "123e4567-e89b-12d3-a456-426614174000",
            "email": "john.doe@example.com",
            "username": "johndoe",
        }

        print("üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...")

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        access_token = (
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiMTIzIiwiZW1haWwiOiJqb2huQGV4YW1wbGUuY29tIn0..."
        )
        refresh_token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiMTIzIiwidHlwZSI6InJlZnJlc2gifQ..."

        print(f"‚úÖ Access token —Å–æ–∑–¥–∞–Ω: {access_token[:50]}...")
        print(f"‚úÖ Refresh token —Å–æ–∑–¥–∞–Ω: {refresh_token[:50]}...")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è access token...")
        print("   üì° Endpoint: GET /auth/validate")
        print("   üìã Headers: Authorization: Bearer <access_token>")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...")
        print("   üì° Endpoint: POST /auth/refresh")
        print('   üìã Body: {"refresh_token": "<refresh_token>"}')

        print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {e}")


async def password_operations_example():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏."""
    print("\nüîí –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏")

    try:
        passwords = ["weak", "password123", "StrongPassword123!", "VerySecurePassword123!@#"]

        for password in passwords:
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è: '{password}'")

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
            is_strong = (
                len(password) >= 8
                and any(c.isupper() for c in password)
                and any(c.islower() for c in password)
                and any(c.isdigit() for c in password)
                and any(c in "!@#$%^&*" for c in password)
            )

            print(f"   –°–∏–ª—å–Ω—ã–π: {'‚úÖ' if is_strong else '‚ùå'}")

            if is_strong:
                print(f"   –•–µ—à: bcrypt_hash_example...")
                print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞: ‚úÖ")

        print("\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞—Ä–æ–ª—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏: {e}")


async def api_key_authentication_example():
    """–ü—Ä–∏–º–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API –∫–ª—é—á–∏."""
    print("\nüîë –ü—Ä–∏–º–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API –∫–ª—é—á–∏")

    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        api_keys = ["api_key_12345", "mobile_app_key_67890", "service_key_abcdef"]

        print("üìã –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ API –∫–ª—é—á–∏:")
        for i, key in enumerate(api_keys, 1):
            print(f"   {i}. {key}")

        # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
        headers_examples = [
            {"X-API-Key": "api_key_12345"},
            {"Authorization": "ApiKey api_key_12345"},
            {"X-API-Key": "invalid_key"},  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á
        ]

        for headers in headers_examples:
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {headers}")

            # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            api_key = headers.get("X-API-Key") or headers.get("Authorization", "").replace("ApiKey ", "")
            is_valid = api_key in api_keys

            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í–∞–ª–∏–¥–Ω—ã–π' if is_valid else '‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π'}")

        print("\nüì° –ü—Ä–∏–º–µ—Ä—ã endpoints —Å API –∫–ª—é—á–∞–º–∏:")
        print("   GET /api/data?api_key=service_key_123")
        print("   POST /api/webhook?api_key=integration_789")
        print("   Headers: X-API-Key: api_key_12345")

        print("\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã API –∫–ª—é—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –∫–ª—é—á–µ–π: {e}")


async def websocket_authentication_example():
    """–ü—Ä–∏–º–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    print("\nüåê –ü—Ä–∏–º–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket")

    try:
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket
        auth_methods = [
            {"type": "jwt_token", "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."},
            {"type": "api_key", "key": "api_key_12345"},
            {"type": "query_params", "token": "ws_token_xyz"},
            {"type": "no_auth", "anonymous": True},
        ]

        for method in auth_methods:
            print(f"\nüîå –ú–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {method['type']}")

            if method["type"] == "jwt_token":
                print(f"   JWT —Ç–æ–∫–µ–Ω: {method['token'][:30]}...")
                print("   üì° URL: ws://localhost:8000/realtime/ws")
                print("   üìã Headers: Authorization: Bearer <token>")
                print("   ‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ JWT")

            elif method["type"] == "api_key":
                print(f"   API –∫–ª—é—á: {method['key']}")
                print("   üì° URL: ws://localhost:8000/realtime/ws")
                print("   üìã Headers: X-API-Key: <api_key>")
                print("   ‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ API –∫–ª—é—á")

            elif method["type"] == "query_params":
                print(f"   –¢–æ–∫–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {method['token']}")
                print("   üì° URL: ws://localhost:8000/realtime/ws?token=ws_token_xyz")
                print("   ‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

            elif method["type"] == "no_auth":
                print("   –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                print("   üì° URL: ws://localhost:8000/realtime/ws")
                print("   ‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")

        print("\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")


async def sse_authentication_example():
    """–ü—Ä–∏–º–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    print("\nüì° –ü—Ä–∏–º–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SSE")

    try:
        # –ü—Ä–∏–º–µ—Ä—ã SSE –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        sse_requests = [
            {
                "url": "/realtime/events",
                "headers": {"Authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."},
                "description": "SSE —Å JWT —Ç–æ–∫–µ–Ω–æ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ",
            },
            {"url": "/realtime/events", "headers": {"X-API-Key": "api_key_12345"}, "description": "SSE —Å API –∫–ª—é—á–æ–º"},
            {"url": "/realtime/events?token=sse_token_abc", "headers": {}, "description": "SSE —Å —Ç–æ–∫–µ–Ω–æ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö"},
            {"url": "/realtime/events", "headers": {}, "description": "SSE –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"},
        ]

        for request in sse_requests:
            print(f"\nüì® {request['description']}")
            print(f"   üì° URL: {request['url']}")
            print(f"   üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {request['headers']}")

            has_auth = bool(request["headers"]) or "token=" in request["url"]
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if has_auth else '‚ö†Ô∏è –ê–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ—Å—Ç—É–ø'}")

        print("\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã SSE –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ SSE –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")


async def role_permissions_example():
    """–ü—Ä–∏–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π."""
    print("\nüëë –ü—Ä–∏–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")

    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        roles_permissions = {
            "guest": {"permissions": ["read_public"], "description": "–ì–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø"},
            "user": {"permissions": ["read_public", "read_own", "write_own"], "description": "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"},
            "moderator": {
                "permissions": ["read_public", "read_own", "write_own", "moderate_content"],
                "description": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            },
            "admin": {
                "permissions": ["read_public", "read_own", "write_own", "moderate_content", "manage_users"],
                "description": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            },
            "superuser": {
                "permissions": ["*"],  # –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                "description": "–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            },
        }

        # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        test_cases = [
            {"user_role": "guest", "action": "read_public", "resource": "article"},
            {"user_role": "user", "action": "write_own", "resource": "profile"},
            {"user_role": "user", "action": "manage_users", "resource": "user_list"},
            {"user_role": "moderator", "action": "moderate_content", "resource": "comment"},
            {"user_role": "admin", "action": "manage_users", "resource": "user_account"},
            {"user_role": "superuser", "action": "delete_system", "resource": "database"},
        ]

        print("üìã –†–æ–ª–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:")
        for role, info in roles_permissions.items():
            print(f"   {role}: {info['description']}")
            print(f"      –†–∞–∑—Ä–µ—à–µ–Ω–∏—è: {', '.join(info['permissions'])}")

        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:")
        for case in test_cases:
            role = case["user_role"]
            action = case["action"]
            resource = case["resource"]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            user_permissions = roles_permissions.get(role, {}).get("permissions", [])
            has_permission = "*" in user_permissions or action in user_permissions

            status = "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ" if has_permission else "‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ"
            print(f"   {role} ‚Üí {action} –Ω–∞ {resource}: {status}")

        print("\nüì° –ü—Ä–∏–º–µ—Ä—ã endpoints —Å —Ä–æ–ª–µ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π:")
        print("   GET /auth/profile - —Ç—Ä–µ–±—É–µ—Ç —Ä–æ–ª—å 'user'")
        print("   GET /auth/verified-only - —Ç—Ä–µ–±—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
        print("   GET /admin/users - —Ç—Ä–µ–±—É–µ—Ç —Ä–æ–ª—å 'superuser'")
        print("   POST /admin/actions - —Ç—Ä–µ–±—É–µ—Ç —Ä–æ–ª—å 'superuser'")

        print("\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {e}")


async def optional_authentication_example():
    """–ü—Ä–∏–º–µ—Ä –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    print("\nüîì –ü—Ä–∏–º–µ—Ä –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")

    try:
        # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        requests = [
            {
                "endpoint": "/public/content",
                "headers": {"Authorization": "Bearer valid_token"},
                "description": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            },
            {"endpoint": "/public/content", "headers": {}, "description": "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"},
            {
                "endpoint": "/public/content",
                "headers": {"Authorization": "Bearer invalid_token"},
                "description": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω",
            },
        ]

        for request in requests:
            print(f"\nüåç {request['description']}")
            print(f"   üì° Endpoint: {request['endpoint']}")

            has_token = "Authorization" in request["headers"]
            is_valid_token = has_token and "valid_token" in request["headers"]["Authorization"]

            if is_valid_token:
                print("   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: john.doe@example.com")
                print("   üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                print("   üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
            elif has_token:
                print("   ‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                print("   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ê–Ω–æ–Ω–∏–º–Ω—ã–π")
                print("   üåê –û–±—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            else:
                print("   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ê–Ω–æ–Ω–∏–º–Ω—ã–π")
                print("   üåê –û–±—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç")

        print("\nüì° –ü—Ä–∏–º–µ—Ä—ã endpoints —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π:")
        print("   GET /examples/auth/public - —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö")
        print("   GET /examples/auth/mixed-content?include_private=true - —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —á–∞—Å—Ç–∏")

        print("\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏\n")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    await user_registration_example()
    await user_login_example()
    await token_operations_example()
    await password_operations_example()

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await api_key_authentication_example()
    await websocket_authentication_example()
    await sse_authentication_example()
    await optional_authentication_example()
    await role_permissions_example()

    print("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:")
    print("   üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/")
    print("   üß™ –¢–µ—Å—Ç—ã: tests/apps/auth/")
    print("   üîß –ü—Ä–∏–º–µ—Ä—ã endpoints: examples/auth_endpoints_examples.py")
    print("   üåê URL –ø—Ä–∏–º–µ—Ä—ã: docs/url_for_examples.md")


if __name__ == "__main__":
    asyncio.run(main())
