#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è realtime —Å–∏—Å—Ç–µ–º—ã (WebSocket + SSE + WebRTC).

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:
- WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
- Server-Sent Events –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥ –¥–ª—è P2P —Å–≤—è–∑–∏
- –ü–µ—Ä–µ–¥–∞—á–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –°–∏—Å—Ç–µ–º–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ –∫–æ–º–Ω–∞—Ç
"""

import asyncio
import json
import logging

from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.responses import StreamingResponse

# –ò–º–ø–æ—Ä—Ç—ã realtime —Å–∏—Å—Ç–µ–º—ã
from core.realtime import (
    BinaryMessage,
    WebRTCSignalType,
    WSClient,
    connection_manager,
    create_sse_client,
    create_ws_client,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def websocket_basic_example():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å WebSocket."""
    print("üîå –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä WebSocket")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    client = WSClient("ws://localhost:8000/realtime/ws")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    @client.on_message("text")
    async def handle_text_message(data):
        print(f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")

    @client.on_message("system")
    async def handle_system_message(data):
        print(f"‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")

    @client.on_message("heartbeat")
    async def handle_heartbeat(data):
        print(f"üíì Heartbeat: {data}")

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await client.connect()
        print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        await client.send_text("–ü—Ä–∏–≤–µ—Ç, WebSocket!")
        await client.send_json({"type": "greeting", "message": "Hello from client"})

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
        await client.send_command("join_channel", {"channel": "general"})

        # Ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await client.ping()

        # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã event loop)
        await asyncio.sleep(1)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ WebSocket: {e}")
    finally:
        await client.disconnect()
        print("üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω")


async def websocket_authenticated_example():
    """–ü—Ä–∏–º–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
    print("\nüîê –ü—Ä–∏–º–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ WebSocket")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    client = create_ws_client(
        url="ws://localhost:8000/realtime/ws",
        token="your-jwt-token-here",  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ auth
    )

    @client.on_message("connected")
    async def handle_connected(data):
        print(f"üîó –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {data}")

    @client.on_message("error")
    async def handle_error(data):
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {data}")

    try:
        await client.connect()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await client.send_json({"type": "private_message", "recipient_id": 123, "message": "–ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})

        await asyncio.sleep(1)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ WebSocket: {e}")
    finally:
        await client.disconnect()


async def sse_basic_example():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å SSE."""
    print("\nüì° –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä SSE")

    # –°–æ–∑–¥–∞–Ω–∏–µ SSE –∫–ª–∏–µ–Ω—Ç–∞
    client = create_sse_client("http://localhost:8000/realtime/events")

    @client.on_event("connected")
    async def handle_connected(event_data):
        print(f"üì° SSE –ø–æ–¥–∫–ª—é—á–µ–Ω: {event_data}")

    @client.on_event("message")
    async def handle_message(event_data):
        print(f"üì® SSE —Å–æ–æ–±—â–µ–Ω–∏–µ: {event_data}")

    @client.on_event("notification")
    async def handle_notification(event_data):
        print(f"üîî SSE —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {event_data}")

    @client.on_event("heartbeat")
    async def handle_heartbeat(event_data):
        print(f"üíì SSE heartbeat: {event_data}")

    try:
        await client.connect()
        print("‚úÖ SSE –ø–æ–¥–∫–ª—é—á–µ–Ω")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SSE
        await client.send_to_user(123, {"message": "Hello via SSE"})
        await client.send_to_channel("general", {"announcement": "Server update"})
        await client.broadcast({"global": "Global message"})

        # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        await asyncio.sleep(2)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ SSE: {e}")
    finally:
        await client.disconnect()
        print("üì° SSE –æ—Ç–∫–ª—é—á–µ–Ω")


async def chat_room_example():
    """–ü—Ä–∏–º–µ—Ä —á–∞—Ç-–∫–æ–º–Ω–∞—Ç—ã —Å WebSocket."""
    print("\nüí¨ –ü—Ä–∏–º–µ—Ä —á–∞—Ç-–∫–æ–º–Ω–∞—Ç—ã")

    # –°–æ–∑–¥–∞–µ–º –¥–≤—É—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–∞—Ç–∞
    client1 = WSClient("ws://localhost:8000/realtime/ws")
    client2 = WSClient("ws://localhost:8000/realtime/ws")

    @client1.on_message("text")
    async def client1_handle_message(data):
        print(f"üë§ –ö–ª–∏–µ–Ω—Ç 1 –ø–æ–ª—É—á–∏–ª: {data}")

    @client1.on_message("user_joined")
    async def client1_user_joined(data):
        print(f"üëã –ö–ª–∏–µ–Ω—Ç 1: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è - {data}")

    @client2.on_message("text")
    async def client2_handle_message(data):
        print(f"üë• –ö–ª–∏–µ–Ω—Ç 2 –ø–æ–ª—É—á–∏–ª: {data}")

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
        await client1.connect()
        await client2.connect()

        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É
        await client1.send_command("join_channel", {"channel": "chat_room_1"})
        await client2.send_command("join_channel", {"channel": "chat_room_1"})

        # –û–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await client1.send_json(
            {
                "type": "chat_message",
                "channel": "chat_room_1",
                "message": "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ!",
                "username": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å1",
            }
        )

        await asyncio.sleep(0.5)

        await client2.send_json(
            {
                "type": "chat_message",
                "channel": "chat_room_1",
                "message": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                "username": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å2",
            }
        )

        await asyncio.sleep(1)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á–∞—Ç-–∫–æ–º–Ω–∞—Ç—ã: {e}")
    finally:
        await client1.disconnect()
        await client2.disconnect()
        print("üí¨ –ß–∞—Ç-–∫–æ–º–Ω–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")


async def binary_data_example():
    """–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–¥–∞—á–∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüìÅ –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–¥–∞—á–∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

    client = WSClient("ws://localhost:8000/realtime/ws")

    @client.on_message("binary")
    async def handle_binary(data):
        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(data)} –±–∞–π—Ç")

    @client.on_message("file_received")
    async def handle_file_received(data):
        print(f"üìÑ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {data}")

    try:
        await client.connect()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏
        test_file_content = b"This is a test file content with some binary data \x00\x01\x02"

        # –°–æ–∑–¥–∞–Ω–∏–µ BinaryMessage
        binary_msg = BinaryMessage.from_bytes(
            data=test_file_content, content_type="application/octet-stream", filename="test_file.bin"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await client.send_binary(binary_msg)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {binary_msg.filename} ({len(test_file_content)} –±–∞–π—Ç)")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–º–∏—Ç–∞—Ü–∏—è)
        image_data = b"\x89PNG\r\n\x1a\n" + b"fake_png_data" * 100
        image_msg = BinaryMessage.from_bytes(data=image_data, content_type="image/png", filename="test_image.png")

        await client.send_binary(image_msg)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_msg.filename}")

        await asyncio.sleep(1)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        await client.disconnect()


async def notification_system_example():
    """–ü—Ä–∏–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ SSE."""
    print("\nüîî –ü—Ä–∏–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    # –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    user_client = create_sse_client("http://localhost:8000/realtime/events")

    @user_client.on_event("notification")
    async def handle_notification(event_data):
        notification = json.loads(event_data) if isinstance(event_data, str) else event_data
        print(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {notification.get('message', '–ë–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è')}")
        print(f"   –¢–∏–ø: {notification.get('type', 'info')}")

    @user_client.on_event("system_alert")
    async def handle_system_alert(event_data):
        alert = json.loads(event_data) if isinstance(event_data, str) else event_data
        print(f"üö® –°–ò–°–¢–ï–ú–ù–û–ï –û–ü–û–í–ï–©–ï–ù–ò–ï: {alert.get('message')}")

    try:
        await user_client.connect()

        # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications = [
            {"title": "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "message": "–£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "type": "info"},
            {"title": "–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", "message": "–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", "type": "success"},
            {"title": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "message": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è", "type": "warning"},
        ]

        for notification in notifications:
            await user_client.send_to_user(123, notification)
            await asyncio.sleep(0.5)

        # –°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
        await user_client.broadcast({"message": "–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç", "severity": "warning"})

        await asyncio.sleep(2)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    finally:
        await user_client.disconnect()


async def webrtc_signaling_example():
    """–ü—Ä–∏–º–µ—Ä WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞."""
    print("\nüé• –ü—Ä–∏–º–µ—Ä WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞")

    # –î–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    peer1 = WSClient("ws://localhost:8000/realtime/webrtc/signaling")
    peer2 = WSClient("ws://localhost:8000/realtime/webrtc/signaling")

    @peer1.on_message("webrtc_signal")
    async def peer1_handle_signal(data):
        print(f"üéØ Peer1 –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª: {data.get('signal_type')}")

    @peer2.on_message("webrtc_signal")
    async def peer2_handle_signal(data):
        print(f"üéØ Peer2 –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª: {data.get('signal_type')}")

    try:
        await peer1.connect()
        await peer2.connect()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        await peer1.send_json({"type": "create_room", "room_id": "video_call_123"})

        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
        await peer2.send_json({"type": "join_room", "room_id": "video_call_123"})

        # WebRTC Offer –æ—Ç peer1
        offer_sdp = "v=0\r\no=- 123456789 2 IN IP4 127.0.0.1\r\n..."  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π SDP
        await peer1.send_webrtc_signal(signal_type=WebRTCSignalType.OFFER, target_peer_id="peer2", sdp=offer_sdp)

        await asyncio.sleep(0.5)

        # WebRTC Answer –æ—Ç peer2
        answer_sdp = "v=0\r\no=- 987654321 2 IN IP4 127.0.0.1\r\n..."  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π SDP
        await peer2.send_webrtc_signal(signal_type=WebRTCSignalType.ANSWER, target_peer_id="peer1", sdp=answer_sdp)

        # ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
        ice_candidate = {
            "candidate": "candidate:1 1 UDP 2130706431 192.168.1.100 54400 typ host",
            "sdpMid": "0",
            "sdpMLineIndex": 0,
        }

        await peer1.send_webrtc_signal(
            signal_type=WebRTCSignalType.ICE_CANDIDATE, target_peer_id="peer2", ice_candidate=ice_candidate
        )

        await asyncio.sleep(1)
        print("üé• WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞: {e}")
    finally:
        await peer1.disconnect()
        await peer2.disconnect()


async def connection_monitoring_example():
    """–ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    print("\nüìä –ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")

    client = WSClient("ws://localhost:8000/realtime/ws")

    @client.on_message("connected")
    async def handle_connected(data):
        print(f"üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {data}")

    @client.on_message("disconnected")
    async def handle_disconnected(data):
        print(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ: {data}")

    @client.on_message("error")
    async def handle_error(data):
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {data}")

    @client.on_message("stats")
    async def handle_stats(data):
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {data}")

    try:
        await client.connect()

        # –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await client.send_command("get_connection_stats", {})

        # –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–∞—Ö
        await client.send_command("get_rooms", {})

        # –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await client.send_command("get_active_users", {})

        await asyncio.sleep(2)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    finally:
        await client.disconnect()


def create_fastapi_realtime_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å realtime endpoints."""
    print("\nüåê –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Realtime")

    app = FastAPI(title="Realtime Example API")

    @app.websocket("/ws/chat")
    async def websocket_chat(websocket: WebSocket):
        """WebSocket endpoint –¥–ª—è —á–∞—Ç–∞."""
        connection_id = f"chat_{id(websocket)}"
        user_id = 123  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ç–æ–∫–µ–Ω–∞

        await connection_manager.connect_websocket(websocket, connection_id, user_id)

        try:
            while True:
                data = await websocket.receive_text()
                message_data = json.loads(data)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
                if message_data.get("type") == "chat_message":
                    await connection_manager.send_to_channel(
                        message_data.get("channel", "general"),
                        {
                            "type": "chat_message",
                            "message": message_data.get("message"),
                            "username": message_data.get("username", "Anonymous"),
                            "timestamp": asyncio.get_event_loop().time(),
                        },
                    )

        except WebSocketDisconnect:
            await connection_manager.disconnect_websocket(connection_id)

    @app.get("/sse/notifications")
    async def sse_notifications():
        """SSE endpoint –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

        async def event_generator():
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notifications = [
                {"type": "welcome", "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"},
                {"type": "info", "message": "–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"},
                {"type": "warning", "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç"},
            ]

            for notification in notifications:
                yield f"data: {json.dumps(notification)}\n\n"
                await asyncio.sleep(1)

        return StreamingResponse(
            event_generator(),
            media_type="text/event-stream",
            headers={
                "Cache-Control": "no-cache",
                "Connection": "keep-alive",
            },
        )

    @app.get("/stats")
    async def get_connection_stats():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        stats = await connection_manager.get_connection_stats()
        return {
            "websocket_connections": stats.get("websocket_count", 0),
            "sse_connections": stats.get("sse_count", 0),
            "total_users": stats.get("unique_users", 0),
            "active_channels": stats.get("active_channels", []),
        }

    print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å realtime endpoints:")
    print("   WS  /ws/chat")
    print("   GET /sse/notifications")
    print("   GET /stats")

    return app


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∑–∞–ø—É—Å–∫–æ–º –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤."""
    print("üéØ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Realtime —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)

    try:
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É—é—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞)
        print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–π FastAPI —Å–µ—Ä–≤–µ—Ä:")
        print("   uvicorn src.main:app --reload")
        print("\nüîß –ó–∞—Ç–µ–º —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞")

        # await websocket_basic_example()
        # await websocket_authenticated_example()
        # await sse_basic_example()
        # await chat_room_example()
        # await binary_data_example()
        # await notification_system_example()
        # await webrtc_signaling_example()
        # await connection_monitoring_example()

        # –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = create_fastapi_realtime_app()

        print("\nüéâ –ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã!")
        print("\nüöÄ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: uvicorn src.main:app --reload")
        print("   2. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –≤ main()")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        print("\nüåê –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤:")
        print("   uvicorn examples.realtime_examples:app --reload --port 8001")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        raise


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
    asyncio.run(main())
