"""–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WebSocket –∏ SSE –∫–ª–∏–µ–Ω—Ç–æ–≤."""

import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ streaming –º–æ–¥—É–ª—è
from core.streaming import create_authenticated_client, create_sse_client, create_ws_client


async def websocket_basic_example():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WebSocket –∫–ª–∏–µ–Ω—Ç–∞."""
    print("=== WebSocket Basic Example ===")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = create_ws_client(host="localhost", port=8000)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    @client.on_message("system")
    async def handle_system_message(data):
        print(f"–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")

    @client.on_message("text")
    async def handle_text_message(data):
        print(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")

    @client.on_message("heartbeat")
    async def handle_heartbeat(data):
        print(f"Heartbeat: {data.get('content', {}).get('timestamp', 'unknown')}")

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        connected = await client.connect()
        if not connected:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
            return

        print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω! Connection ID: {client.connection_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
        pong = await client.ping()
        print(f"Ping —É—Å–ø–µ—à–µ–Ω: {pong}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_id = await client.send_message("–ü—Ä–∏–≤–µ—Ç, —Å–µ—Ä–≤–µ—Ä!")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message_id}")

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
        subscribed = await client.subscribe_to_channel("test_channel")
        print(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {subscribed}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        sent = await client.send_to_channel("test_channel", "–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")

        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        await asyncio.sleep(5)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await client.disconnect()
        print("WebSocket –æ—Ç–∫–ª—é—á–µ–Ω")


async def websocket_authenticated_example():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ WebSocket –∫–ª–∏–µ–Ω—Ç–∞."""
    print("\n=== WebSocket Authenticated Example ===")

    # –°–æ–∑–¥–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å API –∫–ª—é—á–æ–º
    client = create_authenticated_client(
        host="localhost",
        port=8000,
        api_key="test-api-key",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á
        user_id="user123",
    )

    @client.on_message("connected")
    async def handle_connected(data):
        print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data}")

    @client.on_message("error")
    async def handle_error(data):
        print(f"–û—à–∏–±–∫–∞: {data}")

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        connected = await client.connect()
        if connected:
            print("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            sent = await client.send_to_user("user456", "–ü—Ä–∏–≤–µ—Ç –æ—Ç user123!")
            print(f"–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")

            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await asyncio.sleep(3)
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    finally:
        await client.disconnect()


async def sse_basic_example():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SSE –∫–ª–∏–µ–Ω—Ç–∞."""
    print("\n=== SSE Basic Example ===")

    # –°–æ–∑–¥–∞–µ–º SSE –∫–ª–∏–µ–Ω—Ç
    client = create_sse_client(host="localhost", port=8000)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    @client.on_event("connected")
    async def handle_connected(event_data):
        print(f"SSE –ø–æ–¥–∫–ª—é—á–µ–Ω: {event_data}")

    @client.on_event("message")
    async def handle_message(event_data):
        print(f"SSE —Å–æ–æ–±—â–µ–Ω–∏–µ: {event_data}")

    @client.on_event("notification")
    async def handle_notification(event_data):
        print(f"SSE —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {event_data}")

    @client.on_event("heartbeat")
    async def handle_heartbeat(event_data):
        print(f"SSE heartbeat: {event_data.get('data', {}).get('timestamp', 'unknown')}")

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        connected = await client.connect()
        if connected:
            print("SSE –ø–æ–¥–∫–ª—é—á–µ–Ω!")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º
            sent = await client.send_notification(
                title="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", content="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SSE", notification_type="info"
            )
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")

            # –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏—è
            await asyncio.sleep(10)
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ SSE")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ SSE: {e}")
    finally:
        await client.disconnect()


async def chat_room_example():
    """–ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç-–∫–æ–º–Ω–∞—Ç—ã —Å WebSocket."""
    print("\n=== Chat Room Example ===")

    # –°–æ–∑–¥–∞–µ–º –¥–≤—É—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–∞—Ç–∞
    client1 = create_ws_client(host="localhost", port=8000)
    client2 = create_ws_client(host="localhost", port=8000)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    @client1.on_message("text")
    async def client1_handle_message(data):
        content = data.get("content", "")
        sender = data.get("sender_id", "unknown")
        if sender != client1.connection_id:
            print(f"[–ö–ª–∏–µ–Ω—Ç 1] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender}: {content}")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    @client2.on_message("text")
    async def client2_handle_message(data):
        content = data.get("content", "")
        sender = data.get("sender_id", "unknown")
        if sender != client2.connection_id:
            print(f"[–ö–ª–∏–µ–Ω—Ç 2] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender}: {content}")

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–∞ –∫–ª–∏–µ–Ω—Ç–∞
        connected1 = await client1.connect()
        connected2 = await client2.connect()

        if not (connected1 and connected2):
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
            return

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –∫–∞–Ω–∞–ª —á–∞—Ç–∞
        await client1.subscribe_to_channel("chat_room")
        await client2.subscribe_to_channel("chat_room")

        print("–ß–∞—Ç-–∫–æ–º–Ω–∞—Ç–∞ –≥–æ—Ç–æ–≤–∞!")

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        await asyncio.sleep(1)
        await client1.send_to_channel("chat_room", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")

        await asyncio.sleep(1)
        await client2.send_to_channel("chat_room", "–ü—Ä–∏–≤–µ—Ç! –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, –∞ —É —Ç–µ–±—è?")

        await asyncio.sleep(1)
        await client1.send_to_channel("chat_room", "–¢–æ–∂–µ —Ö–æ—Ä–æ—à–æ! –ö–ª–∞—Å—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è.")

        await asyncio.sleep(1)
        await client2.send_to_channel("chat_room", "–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω! üòä")

        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await asyncio.sleep(3)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
    finally:
        await client1.disconnect()
        await client2.disconnect()
        print("–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç")


async def notification_system_example():
    """–ü—Ä–∏–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å SSE."""
    print("\n=== Notification System Example ===")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    admin_client = create_sse_client(host="localhost", port=8000)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    user_client = create_sse_client(host="localhost", port=8000)

    @user_client.on_event("notification")
    async def handle_notification(event_data):
        notification = event_data.get("data", {})
        title = notification.get("title", "")
        content = notification.get("content", "")
        notif_type = notification.get("type", "info")
        print(f"[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï {notif_type.upper()}] {title}: {content}")

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        admin_connected = await admin_client.connect()
        user_connected = await user_client.connect()

        if not (admin_connected and user_connected):
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤")
            return

        print("–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≥–æ—Ç–æ–≤–∞!")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await asyncio.sleep(1)
        await admin_client.send_notification(
            title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            content="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            notification_type="success",
        )

        await asyncio.sleep(2)
        await admin_client.send_notification(
            title="–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", content="–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å 22:00 –¥–æ 23:00", notification_type="warning"
        )

        await asyncio.sleep(2)
        await admin_client.send_notification(
            title="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", content="–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", notification_type="info"
        )

        # –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await asyncio.sleep(5)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    finally:
        await admin_client.disconnect()
        await user_client.disconnect()
        print("–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


async def connection_monitoring_example():
    """–ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    print("\n=== Connection Monitoring Example ===")

    client = create_ws_client(host="localhost", port=8000)

    @client.on_message("connected")
    async def handle_connected(data):
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print(f"   Connection ID: {client.connection_id}")
        print(f"   –°—Ç–∞—Ç—É—Å: {client.get_status()}")

    @client.on_message("disconnected")
    async def handle_disconnected(data):
        print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")

    @client.on_message("error")
    async def handle_error(data):
        print(f"üö´ –û—à–∏–±–∫–∞: {data}")

    try:
        # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        client.auto_reconnect = True
        client.max_reconnect_attempts = 5

        connected = await client.connect()
        if connected:
            print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
            for i in range(10):
                await asyncio.sleep(3)
                status = client.get_status()
                print(f"–°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {status['status']}")
                print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π ping: {status['last_ping']}")
                print(f"–ü–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {status['reconnect_attempts']}")
                print("---")

    except KeyboardInterrupt:
        print("\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    finally:
        await client.disconnect()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ WebSocket –∏ SSE –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
    print("=" * 50)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
        await websocket_basic_example()
        await websocket_authenticated_example()
        await sse_basic_example()
        await chat_room_example()
        await notification_system_example()
        await connection_monitoring_example()

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö: {e}")

    print("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    asyncio.run(main())
