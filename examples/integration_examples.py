#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –ø—Ä–æ–µ–∫—Ç–∞.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ:
- Messaging + Realtime + Auth
- Database + Migrations + Monitoring
- Telegram + WebSocket + Notifications
- TaskIQ + OpenTelemetry + Logging
"""

import asyncio
import logging
from datetime import datetime

from fastapi import APIRouter, Depends, FastAPI
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
from apps.auth.dependencies import get_current_user
from apps.users.models import User
from core.database import get_async_session
from core.migrations import DatabaseManager
from core.tasks import example_task
from core.messaging import get_message_client
from core.realtime import WSClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def full_user_journey_example():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã."""
    print("üöÄ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã")

    # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\nüë§ 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    user_data = {
        "email": "john.doe@example.com",
        "username": "johndoe",
        "password": "SecurePass123!",
        "full_name": "John Doe",
    }

    print(f"   üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data['email']}")

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
    # auth_service = AuthService()
    # user = await auth_service.register_user(db, user_data=UserCreate(**user_data))
    # user_id = user.id

    user_id = "123e4567-e89b-12d3-a456-426614174000"  # –ò–º–∏—Ç–∞—Ü–∏—è
    print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user_id}")

    # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ welcome —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ messaging
    print("\nüì® 2. Welcome —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Messaging")
    message_client = get_message_client()

    async with message_client.session():
        await message_client.send_user_notification(
            user_id=int(user_id.split("-")[0], 16) % 1000000,  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            message=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data['full_name']}! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.",
            notification_type="success",
        )

    print("   ‚úÖ Welcome —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    # 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ realtime —Å–∏—Å—Ç–µ–º–µ
    print("\nüîÑ 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Realtime")
    ws_client = WSClient("ws://localhost:8000/realtime/ws")

    @ws_client.on_message("connected")
    async def handle_connected(data):
        print(f"   üîó WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: {data}")

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
    # await ws_client.connect()
    # await ws_client.send_json({
    #     "type": "user_online",
    #     "user_id": user_id
    # })

    print("   ‚úÖ Realtime –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    print("\n‚ö° 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏")

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
    # task_result = await example_task.kiq(
    #     message=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
    # )

    print(f"   ‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # 5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    print("\nü§ñ 5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram")

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
    # telegram_manager = TelegramBotManager()
    # if telegram_manager.is_enabled():
    #     await telegram_manager.send_notification(
    #         user_id=user_id,
    #         message="üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."
    #     )

    print("   ‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    print("\nüéâ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω!")


async def order_processing_workflow_example():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã."""
    print("\nüõí –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞")

    order_data = {
        "order_id": 12345,
        "user_id": 678,
        "items": [
            {"name": "–¢–æ–≤–∞—Ä 1", "price": 999.99, "quantity": 2},
            {"name": "–¢–æ–≤–∞—Ä 2", "price": 499.99, "quantity": 1},
        ],
        "total": 2499.97,
    }

    print(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ #{order_data['order_id']}")
    print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order_data['user_id']}")
    print(f"   –°—É–º–º–∞: {order_data['total']} —Ä—É–±.")

    # 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    print("\nüíæ 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
    # async with get_async_session() as db:
    #     order = Order(**order_data)
    #     db.add(order)
    #     await db.commit()

    print("   ‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")

    # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    print("\nüì® 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å Messaging")
    message_client = get_message_client()

    async with message_client.session():
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await message_client.send_order_processing(
            order_id=order_data["order_id"],
            status="processing",
            details={"total": order_data["total"], "items_count": len(order_data["items"])},
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message_client.send_user_notification(
            user_id=order_data["user_id"],
            message=f"–í–∞—à –∑–∞–∫–∞–∑ #{order_data['order_id']} –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
            notification_type="info",
        )

    print("   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥–∏")

    # 3. Realtime —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    print("\nüîÑ 3. Realtime —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
    # connection_manager = ConnectionManager()
    # await connection_manager.send_to_user(
    #     user_id=order_data["user_id"],
    #     message={
    #         "type": "order_update",
    #         "order_id": order_data["order_id"],
    #         "status": "processing",
    #         "message": "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É"
    #     }
    # )

    print("   ‚úÖ Realtime —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    print("\n‚ö° 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")

    tasks = ["inventory_check", "payment_processing", "shipping_calculation", "notification_sending"]

    for task_name in tasks:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        # await create_background_task(task_name, order_data)
        print(f"   üìã –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_name}")

    print("   ‚úÖ –í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω—ã")

    # 5. –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    print("\n‚úÖ 5. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞")

    async with message_client.session():
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await message_client.send_order_processing(
            order_id=order_data["order_id"],
            status="completed",
            details={"total": order_data["total"], "processing_time": "5 –º–∏–Ω—É—Ç"},
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message_client.send_user_notification(
            user_id=order_data["user_id"],
            message=f"–ó–∞–∫–∞–∑ #{order_data['order_id']} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!",
            notification_type="success",
        )

    print("   ‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")


async def real_time_chat_with_notifications_example():
    """–ü—Ä–∏–º–µ—Ä —á–∞—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."""
    print("\nüí¨ –ü—Ä–∏–º–µ—Ä realtime —á–∞—Ç–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")

    # –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞
    participants = [
        {"user_id": 123, "username": "alice", "online": True},
        {"user_id": 456, "username": "bob", "online": False},
        {"user_id": 789, "username": "charlie", "online": True},
    ]

    chat_room = "general_chat"

    print(f"üí¨ –ß–∞—Ç –∫–æ–º–Ω–∞—Ç–∞: {chat_room}")
    print("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:")
    for p in participants:
        status = "üü¢ –æ–Ω–ª–∞–π–Ω" if p["online"] else "üî¥ –æ—Ñ—Ñ–ª–∞–π–Ω"
        print(f"   {p['username']} ({p['user_id']}): {status}")

    # 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    print("\nüìù 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç")

    message_data = {
        "from_user_id": 123,
        "from_username": "alice",
        "message": "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?",
        "timestamp": datetime.now().isoformat(),
        "chat_room": chat_room,
    }

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    print("   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î...")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    print("   üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
    online_users = [p for p in participants if p["online"]]

    for user in online_users:
        if user["user_id"] != message_data["from_user_id"]:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            print(f"      üì§ WebSocket -> {user['username']}")

    # 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    print("\nüì® 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

    offline_users = [p for p in participants if not p["online"]]
    message_client = get_message_client()

    async with message_client.session():
        for user in offline_users:
            await message_client.send_user_notification(
                user_id=user["user_id"],
                message=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message_data['from_username']} –≤ —á–∞—Ç–µ {chat_room}",
                notification_type="info",
            )
            print(f"      üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ -> {user['username']}")

    # 3. Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
    print("\nü§ñ 3. Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram")

    for user in offline_users:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        # telegram_manager = TelegramBotManager()
        # await telegram_manager.send_chat_notification(
        #     user_id=user["user_id"],
        #     chat_room=chat_room,
        #     from_username=message_data["from_username"],
        #     message=message_data["message"]
        # )
        print(f"      ü§ñ Telegram -> {user['username']}")

    # 4. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüìä 4. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")

    analytics_data = {
        "event": "chat_message_sent",
        "chat_room": chat_room,
        "from_user_id": message_data["from_user_id"],
        "online_recipients": len(online_users) - 1,
        "offline_recipients": len(offline_users),
        "message_length": len(message_data["message"]),
        "timestamp": message_data["timestamp"],
    }

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
    # await analytics_service.track_event(analytics_data)
    print(f"   üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {analytics_data['event']}")
    print(f"   üìä –û–Ω–ª–∞–π–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {analytics_data['online_recipients']}")
    print(f"   üìä –û—Ñ—Ñ–ª–∞–π–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {analytics_data['offline_recipients']}")

    print("   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏")


async def system_monitoring_integration_example():
    """–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º."""
    print("\nüìä –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
    print("\nüóÑÔ∏è 1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    db_manager = DatabaseManager()

    try:
        db_health = {"connection": await db_manager.test_connection(), "info": await db_manager.get_database_info()}

        print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"      –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'OK' if db_health['connection'] else 'FAIL'}")
        for key, value in db_health["info"].items():
            print(f"      {key}: {value}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Messaging —Å–∏—Å—Ç–µ–º—ã
    print("\nüì® 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Messaging")

    try:
        message_client = get_message_client()

        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        async with message_client.session():
            await message_client.send_system_event(
                event_name="health_check", event_data={"timestamp": datetime.now().isoformat()}, severity="info"
            )

        print("   ‚úÖ Messaging —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Messaging: {e}")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Realtime —Å–∏—Å—Ç–µ–º—ã
    print("\nüîÑ 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Realtime")

    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        # connection_manager = ConnectionManager()
        # stats = await connection_manager.get_connection_stats()

        stats = {"websocket_connections": 15, "sse_connections": 8, "active_rooms": 3, "total_messages_today": 1247}

        print("   ‚úÖ Realtime —Å–∏—Å—Ç–µ–º–∞:")
        for key, value in stats.items():
            print(f"      {key}: {value}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Realtime: {e}")

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ TaskIQ
    print("\n‚ö° 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ TaskIQ")

    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        # taskiq_stats = await get_taskiq_stats()

        taskiq_stats = {"active_workers": 3, "pending_tasks": 12, "completed_today": 456, "failed_today": 2}

        print("   ‚úÖ TaskIQ:")
        for key, value in taskiq_stats.items():
            print(f"      {key}: {value}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ TaskIQ: {e}")

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–æ–≤
    print("\nü§ñ 5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –±–æ—Ç–æ–≤")

    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
        # telegram_manager = TelegramBotManager()
        # bot_stats = await telegram_manager.get_stats()

        bot_stats = {"active_bots": 2, "total_users": 1250, "messages_today": 89, "commands_today": 34}

        print("   ‚úÖ Telegram –±–æ—Ç—ã:")
        for key, value in bot_stats.items():
            print(f"      {key}: {value}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")

    # 6. –û–±—â–∏–π health check
    print("\nüè• 6. –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")

    overall_health = {
        "database": "healthy",
        "messaging": "healthy",
        "realtime": "healthy",
        "taskiq": "healthy",
        "telegram": "healthy",
        "overall": "healthy",
    }

    print("   üéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:")
    for component, status in overall_health.items():
        icon = "‚úÖ" if status == "healthy" else "‚ùå"
        print(f"      {icon} {component}: {status}")


def create_integrated_fastapi_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º."""
    print("\nüåê –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

    app = FastAPI(
        title="Integrated FastAPI Application",
        description="–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –ø—Ä–æ–µ–∫—Ç–∞",
        version="1.0.0",
    )

    # Router –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö endpoints
    integration_router = APIRouter(prefix="/api/v1/integration", tags=["integration"])

    @integration_router.post("/user-action")
    async def integrated_user_action(
        action_type: str,
        action_data: dict,
        current_user: User = Depends(get_current_user),
        db: AsyncSession = Depends(get_async_session),
    ):
        """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã."""

        # 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        # action_record = UserAction(
        #     user_id=current_user.id,
        #     action_type=action_type,
        #     action_data=action_data
        # )
        # db.add(action_record)
        # await db.commit()

        # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ messaging
        message_client = get_message_client()
        async with message_client.session():
            await message_client.send_system_event(
                event_name=f"user_action_{action_type}",
                event_data={"user_id": str(current_user.id), "action_data": action_data},
                severity="info",
            )

        # 3. Realtime —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        # connection_manager = ConnectionManager()
        # await connection_manager.send_to_user(
        #     user_id=current_user.id,
        #     message={
        #         "type": "action_completed",
        #         "action_type": action_type,
        #         "timestamp": datetime.now().isoformat()
        #     }
        # )

        # 4. –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
        # await example_task.kiq(
        #     message=f"Process action {action_type} for user {current_user.id}"
        # )

        return {
            "status": "success",
            "message": f"Action {action_type} processed through all systems",
            "user_id": str(current_user.id),
            "timestamp": datetime.now().isoformat(),
        }

    @integration_router.get("/health")
    async def integrated_health_check():
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º."""

        health_status = {
            "database": "healthy",
            "messaging": "healthy",
            "realtime": "healthy",
            "taskiq": "healthy",
            "telegram": "healthy",
            "overall": "healthy",
            "timestamp": datetime.now().isoformat(),
        }

        return health_status

    @integration_router.get("/stats")
    async def integrated_stats():
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º."""

        stats = {
            "database": {"connections": 5, "queries_per_second": 45, "size_mb": 128.5},
            "messaging": {"messages_sent_today": 1247, "queue_size": 12, "processing_rate": "98.5%"},
            "realtime": {"active_connections": 23, "messages_per_minute": 156, "rooms_active": 8},
            "taskiq": {"tasks_completed_today": 456, "tasks_pending": 12, "workers_active": 3},
            "telegram": {"bots_active": 2, "users_total": 1250, "messages_today": 89},
        }

        return stats

    app.include_router(integration_router)

    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:")
    print("   POST /api/v1/integration/user-action")
    print("   GET  /api/v1/integration/health")
    print("   GET  /api/v1/integration/stats")

    return app


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∑–∞–ø—É—Å–∫–æ–º –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."""
    print("üéØ –ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –ø—Ä–æ–µ–∫—Ç–∞")
    print("=" * 60)

    try:
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        await full_user_journey_example()
        await order_processing_workflow_example()
        await real_time_chat_with_notifications_example()

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await system_monitoring_integration_example()

        # FastAPI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        app = create_integrated_fastapi_app()

        print("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

        print("\nüí° –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
        print("   üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏")
        print("   üìä –ï–¥–∏–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        print("   üöÄ –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ —Å—á–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏")
        print("   üõ°Ô∏è –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—á–µ—Ä–µ–¥–∏")
        print("   üìà –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞")

        print("\nüîß –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        print("   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É: docker-compose up -d")
        print("   3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: make migrate-safe")
        print("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: uvicorn src.main:app --reload")

        print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
        print("   uvicorn examples.integration_examples:app --reload --port 8003")
        print("   –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8003/docs")

        print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
        print("   docs/ARCHITECTURE_IMPROVEMENTS.md  # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã")
        print("   docs/README.md                     # –û–±—â–µ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        raise


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
    asyncio.run(main())
