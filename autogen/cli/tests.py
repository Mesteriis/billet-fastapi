"""
CLI –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–∞–±—Ä–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–∏–∫—Å—Ç—É—Ä
- –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

from pathlib import Path
from typing import Optional

import typer
from rich.console import Console
from rich.panel import Panel
from rich.table import Table

from autogen.core.generators import AppGenerator, GenerationConfig

console = Console()

# Create tests CLI app
tests = typer.Typer(help="üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.")


@tests.command()
def factories(
    app_name: str = typer.Argument(help="–ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
    dry_run: bool = typer.Option(False, "--dry-run", help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ"),
    overwrite: bool = typer.Option(False, "--overwrite", help="–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã"),
):
    """
    üè≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫ –∏ —Ñ–∏–∫—Å—Ç—É—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤.

    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
    - –§–∞–±—Ä–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è pytest
    - –ë–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤

    –ü—Ä–∏–º–µ—Ä—ã:
        autogen tests factories users
        autogen tests factories products --dry-run
        autogen tests factories orders --overwrite
    """
    try:
        console.print(f"üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: [bold]{app_name}[/bold]")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_dir = Path(f"src/apps/{app_name}")
        if not app_dir.exists():
            console.print(f"‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ src/apps/", style="red")
            console.print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'autogen startapp' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", style="blue")
            raise typer.Abort()

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        config = create_config_from_existing_app(app_name)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        generator = AppGenerator()
        results = generator.generate_test_factories(config, dry_run=dry_run, overwrite=overwrite)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        display_generation_results(results, dry_run)

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}", style="red")
        raise typer.Abort()


@tests.command()
def coverage(
    app_name: str = typer.Argument(help="–ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
    test_type: str = typer.Option("unit", help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ (unit/integration/e2e)"),
    coverage_target: int = typer.Option(80, help="–¶–µ–ª–µ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–æ–≤ (%)"),
):
    """
    üìä –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–æ–≤ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è:
    - –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
    - –ù–µ–ø–æ–∫—Ä—ã—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

    –ü—Ä–∏–º–µ—Ä—ã:
        autogen tests coverage users
        autogen tests coverage products --test-type integration
        autogen tests coverage orders --coverage-target 90
    """
    try:
        console.print(f"üìä –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è: [bold]{app_name}[/bold]")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
        tests_dir = Path(f"tests/apps/{app_name}")
        if not tests_dir.exists():
            console.print(f"‚ö†Ô∏è –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è {app_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", style="yellow")
            console.print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'autogen tests factories' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", style="blue")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è
        coverage_results = analyze_app_coverage(app_name, test_type, coverage_target)
        display_coverage_results(coverage_results)

    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—Ä—ã—Ç–∏—è: {e}", style="red")
        raise typer.Abort()


def create_config_from_existing_app(app_name: str) -> GenerationConfig:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    app_dir = Path(f"src/apps/{app_name}")

    # –ò—â–µ–º –º–æ–¥–µ–ª—å
    models_dir = app_dir / "models"
    model_files = list(models_dir.glob("*_models.py")) if models_dir.exists() else []

    if model_files:
        model_file = model_files[0]
        model_name = model_file.stem.replace("_models", "").title()
        table_name = model_file.stem.replace("_models", "")
    else:
        model_name = app_name.title()
        table_name = app_name.lower()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–∞–π–ª–∞–º
    level = "BasicCRUD"
    if (app_dir / "middleware").exists():
        level = "Advanced"
    if (app_dir / "cache").exists() or (app_dir / "events").exists():
        level = "Enterprise"

    return GenerationConfig(
        app_name=app_name,
        model_name=model_name,
        table_name=table_name,
        level=level,
        features={"testing": True, "factories": True, "fixtures": True},
        testing_config={"coverage_target": 80, "use_factories": True},
    )


def analyze_app_coverage(app_name: str, test_type: str, coverage_target: int) -> dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    import json
    import subprocess
    import sys

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º pytest —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
        cmd = [
            sys.executable,
            "-m",
            "pytest",
            f"tests/apps/{app_name}",
            f"--cov=src/apps/{app_name}",
            "--cov-report=json",
            "--cov-report=term-missing",
            "--quiet",
        ]

        result = subprocess.run(cmd, capture_output=True, text=True)

        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        coverage_json = Path("coverage.json")
        if coverage_json.exists():
            with open(coverage_json) as f:
                coverage_data = json.load(f)
            coverage_percent = coverage_data.get("totals", {}).get("percent_covered", 0)
        else:
            coverage_percent = 0

        return {
            "app_name": app_name,
            "test_type": test_type,
            "coverage_percent": coverage_percent,
            "coverage_target": coverage_target,
            "success": result.returncode == 0,
            "output": result.stdout,
            "meets_target": coverage_percent >= coverage_target,
        }

    except Exception as e:
        return {
            "app_name": app_name,
            "test_type": test_type,
            "coverage_percent": 0,
            "coverage_target": coverage_target,
            "success": False,
            "error": str(e),
            "meets_target": False,
        }


def display_generation_results(results: dict, dry_run: bool):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    if dry_run:
        console.print("\nüîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")

        table = Table(title="–§–∞–π–ª—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        table.add_column("–§–∞–π–ª", style="cyan")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="blue")
        table.add_column("–°—É—â–µ—Å—Ç–≤—É–µ—Ç", style="yellow")

        for file_info in results.get("files_to_generate", []):
            exists_status = "‚úÖ –î–∞" if file_info.get("exists", False) else "‚ùå –ù–µ—Ç"
            table.add_row(file_info.get("file", ""), file_info.get("description", ""), exists_status)

        console.print(table)

    else:
        status = results.get("status", "unknown")
        app_name = results.get("app_name", "")

        if status == "success":
            console.print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è [bold]{app_name}[/bold] —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!", style="green")

            # –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–±—Ä–∏–∫–∏
            factories = results.get("factories_created", [])
            if factories:
                console.print(f"\nüè≠ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–±—Ä–∏–∫–∏ ({len(factories)}):")
                for factory in factories:
                    console.print(f"  ‚Ä¢ {Path(factory).name}", style="green")

            # –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã
            fixtures = results.get("fixtures_created", [])
            if fixtures:
                console.print(f"\nüîß –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã ({len(fixtures)}):")
                for fixture in fixtures:
                    console.print(f"  ‚Ä¢ {Path(fixture).name}", style="blue")

        elif status == "failed":
            console.print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è {app_name}", style="red")
            errors = results.get("errors", [])
            if errors:
                console.print("\n–û—à–∏–±–∫–∏:")
                for error in errors:
                    console.print(f"  ‚Ä¢ {error}", style="red")

        # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        skipped = results.get("files_skipped", [])
        if skipped:
            console.print(f"\n‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(skipped)}):")
            for file in skipped:
                console.print(f"  ‚Ä¢ {Path(file).name} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)", style="yellow")
            console.print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --overwrite –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏", style="blue")


def display_coverage_results(results: dict):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—Ä—ã—Ç–∏—è."""
    app_name = results.get("app_name", "")
    coverage_percent = results.get("coverage_percent", 0)
    coverage_target = results.get("coverage_target", 80)
    meets_target = results.get("meets_target", False)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —Å—Ç–∞—Ç—É—Å
    if meets_target:
        color = "green"
        status = "‚úÖ –û—Ç–ª–∏—á–Ω–æ"
    elif coverage_percent >= coverage_target * 0.8:
        color = "yellow"
        status = "‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
    else:
        color = "red"
        status = "‚ùå –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"

    panel = Panel(
        f"**–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:** {app_name}\n"
        f"**–¢–µ–∫—É—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:** {coverage_percent:.1f}%\n"
        f"**–¶–µ–ª–µ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:** {coverage_target}%\n"
        f"**–°—Ç–∞—Ç—É—Å:** {status}",
        title="üìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–æ–≤",
        border_style=color,
    )

    console.print(panel)

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if not meets_target:
        console.print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        console.print(f"  ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–∞ {coverage_target - coverage_percent:.1f}%")
        console.print("  ‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏")
        console.print("  ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è API")


if __name__ == "__main__":
    tests()
