"""
{{ model_name }} API routes for Advanced level.

This file was auto-generated by Autogen CLI.
Application: {{ app_name }}
Level: {{ level }}
Generated at: {{ timestamp }}
"""

from typing import Optional, Any
import logging

from fastapi import APIRouter, Depends, HTTPException, Query, Body, status
from sqlalchemy.ext.asyncio import AsyncSession

from core.database import get_async_session
from apps.{{ app_name }}.services.{{ app_name }}_service import {{ model_name }}Service
from apps.{{ app_name }}.schemas.{{ app_name }}_schemas import (
    {{ model_name }}Create,
    {{ model_name }}Update,
    {{ model_name }}Response,
    {{ model_name }}List,
    {{ model_name }}SearchRequest,
    {{ model_name }}Status
)
from apps.{{ app_name }}.exceptions import (
    {{ model_name }}ValidationException,
    {{ model_name }}ServiceException,
    {{ model_name }}AlreadyExistsError,
    {{ model_name }}NotFoundError
)

logger = logging.getLogger("api.{{ app_name }}")

# Create router for {{ model_name }} endpoints with advanced features
router = APIRouter(prefix="{{ api_config.prefix }}", tags={{ api_config.tags }})


async def get_{{ model_name.lower() }}_service(
    session: AsyncSession = Depends(get_async_session)
) -> {{ model_name }}Service:
    """Dependency to get {{ model_name }} service instance."""
    return {{ model_name }}Service(session)


@router.post(
    "/",
    response_model={{ model_name }}Response,
    status_code=status.HTTP_201_CREATED,
    summary="Create {{ model_name }} (Advanced)",
    description="Create a new {{ model_name.lower() }} with advanced features."
)
async def create_{{ model_name.lower() }}(
    create_data: {{ model_name }}Create,
    service: {{ model_name }}Service = Depends(get_{{ model_name.lower() }}_service)
) -> {{ model_name }}Response:
    """Create a new {{ model_name.lower() }} with advanced validation."""
    try:
        logger.info(f"API: Creating advanced {{ model_name.lower() }}: {create_data.name}")
        result = await service.create_{{ model_name.lower() }}(create_data)
        logger.info(f"API: Created {{ model_name.lower() }} with ID: {result.id}")
        return result
        
    except {{ model_name }}ValidationException as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail={"message": str(e), "errors": e.details.get("validation_errors", [])}
        )
    except {{ model_name }}AlreadyExistsError as e:
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail={"message": str(e)}
        )


@router.post(
    "/search",
    response_model={{ model_name }}List,
    summary="Advanced Search {{ model_name }}s",
    description="Perform advanced search with complex filtering."
)
async def search_{{ model_name.lower() }}s(
    search_request: {{ model_name }}SearchRequest,
    service: {{ model_name }}Service = Depends(get_{{ model_name.lower() }}_service)
) -> {{ model_name }}List:
    """Advanced search with multiple filters and options."""
    try:
        logger.debug("API: Advanced search {{ model_name.lower() }}s")
        result = await service.search_{{ model_name.lower() }}s(search_request)
        return result
        
    except {{ model_name }}ServiceException as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"message": "Advanced search failed", "error": str(e)}
        )


@router.get(
    "/statistics",
    response_model=dict[str, Any],
    summary="Get {{ model_name }} Statistics"
)
async def get_statistics(
    service: {{ model_name }}Service = Depends(get_{{ model_name.lower() }}_service)
) -> dict[str, Any]:
    """Get comprehensive statistics about {{ model_name.lower() }}s."""
    try:
        return await service.get_statistics()
    except {{ model_name }}ServiceException as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"message": "Failed to get statistics", "error": str(e)}
        )
