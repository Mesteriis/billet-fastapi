"""
{{ model_name }} test factories.

This file was auto-generated by Autogen CLI.
Application: {{ app_name }}
Level: {{ level }}
Generated at: {{ timestamp }}
"""

import factory
import uuid
from faker import Faker

from apps.{{ app_name }}.models.{{ app_name }}_models import {{ model_name }}

fake = Faker()


class {{ model_name }}Factory(factory.alchemy.SQLAlchemyModelFactory):
    """Factory for creating {{ model_name }} test instances."""
    
    class Meta:
        model = {{ model_name }}
        sqlalchemy_session_persistence = "commit"

    # Basic fields
    name = factory.LazyFunction(
        lambda: f"{fake.word().title()} {{{ model_name.title() }}}-{str(uuid.uuid4())[:8]}"
    )

    {% if features.enable_soft_delete %}
    is_deleted = False
    {% endif %}

    {% if features.enable_timestamps %}
    # Timestamps will be auto-populated by database
    {% endif %}

    @classmethod
    def create_batch_with_prefix(cls, size: int, name_prefix: str = "", **kwargs):
        """Create batch of {{ model_name.lower() }}s with name prefix."""
        items = []
        for i in range(size):
            name = f"{name_prefix} {fake.word().title()} {i+1}-{str(uuid.uuid4())[:6]}"
            item = cls.create(name=name, **kwargs)
            items.append(item)
        return items

    @classmethod
    def create_with_unique_name(cls, base_name: str = "Test {{ model_name }}", **kwargs):
        """Create {{ model_name.lower() }} with unique name."""
        unique_name = f"{base_name}-{str(uuid.uuid4())[:8]}"
        return cls.create(name=unique_name, **kwargs) 