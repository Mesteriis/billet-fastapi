"""
{{ model_name }} API tests.

This file was auto-generated by Autogen CLI.
Application: {{ app_name }}
Level: {{ level }}
Generated at: {{ timestamp }}
"""

import pytest
from fastapi import status

from apps.{{ app_name }}.schemas.{{ app_name }}_schemas import {{ model_name }}Create, {{ model_name }}Update


class Test{{ model_name }}API:
    """Test suite for {{ model_name }} API endpoints."""

    @pytest.mark.asyncio
    async def test_create_{{ model_name.lower() }}(self, api_client):
        """Test creating a new {{ model_name.lower() }}."""
        # Prepare test data
        create_data = {
            "name": "Test {{ model_name }}"
        }
        
        # Make request
        response = await api_client.post(
            api_client.url_for("create_{{ model_name.lower() }}"),
            json=create_data
        )
        
        # Assertions
        assert response.status_code == status.HTTP_201_CREATED
        data = response.json()
        assert data["name"] == create_data["name"]
        assert "id" in data
        {% if features.enable_timestamps %}
        assert "created_at" in data
        assert "updated_at" in data
        {% endif %}

    @pytest.mark.asyncio
    async def test_get_{{ model_name.lower() }}(self, api_client, {{ model_name.lower() }}_factory):
        """Test retrieving a {{ model_name.lower() }} by ID."""
        # Create test {{ model_name.lower() }}
        {{ model_name.lower() }} = await {{ model_name.lower() }}_factory.create(name="Get Test {{ model_name }}")
        
        # Make request
        response = await api_client.get(
            api_client.url_for("get_{{ model_name.lower() }}", {{ model_name.lower() }}_id={{ model_name.lower() }}.id)
        )
        
        # Assertions
        assert response.status_code == status.HTTP_200_OK
        data = response.json()
        assert data["id"] == {{ model_name.lower() }}.id
        assert data["name"] == {{ model_name.lower() }}.name

    @pytest.mark.asyncio
    async def test_get_{{ model_name.lower() }}_not_found(self, api_client):
        """Test retrieving a non-existent {{ model_name.lower() }}."""
        response = await api_client.get(
            api_client.url_for("get_{{ model_name.lower() }}", {{ model_name.lower() }}_id=99999)
        )
        
        assert response.status_code == status.HTTP_404_NOT_FOUND
        data = response.json()
        assert "not found" in data["detail"]["message"].lower()

    @pytest.mark.asyncio 
    async def test_update_{{ model_name.lower() }}(self, api_client, {{ model_name.lower() }}_factory):
        """Test updating an existing {{ model_name.lower() }}."""
        # Create test {{ model_name.lower() }}
        {{ model_name.lower() }} = await {{ model_name.lower() }}_factory.create(name="Update Test {{ model_name }}")
        
        # Prepare update data
        update_data = {
            "name": "Updated {{ model_name }}"
        }
        
        # Make request
        response = await api_client.put(
            api_client.url_for("update_{{ model_name.lower() }}", {{ model_name.lower() }}_id={{ model_name.lower() }}.id),
            json=update_data
        )
        
        # Assertions
        assert response.status_code == status.HTTP_200_OK
        data = response.json()
        assert data["id"] == {{ model_name.lower() }}.id
        assert data["name"] == update_data["name"]

    @pytest.mark.asyncio
    async def test_update_{{ model_name.lower() }}_not_found(self, api_client):
        """Test updating a non-existent {{ model_name.lower() }}."""
        update_data = {"name": "Non-existent"}
        
        response = await api_client.put(
            api_client.url_for("update_{{ model_name.lower() }}", {{ model_name.lower() }}_id=99999),
            json=update_data
        )
        
        assert response.status_code == status.HTTP_404_NOT_FOUND

    @pytest.mark.asyncio
    async def test_delete_{{ model_name.lower() }}(self, api_client, {{ model_name.lower() }}_factory):
        """Test deleting a {{ model_name.lower() }}."""
        # Create test {{ model_name.lower() }}
        {{ model_name.lower() }} = await {{ model_name.lower() }}_factory.create(name="Delete Test {{ model_name }}")
        
        # Make request
        response = await api_client.delete(
            api_client.url_for("delete_{{ model_name.lower() }}", {{ model_name.lower() }}_id={{ model_name.lower() }}.id)
        )
        
        # Assertions
        assert response.status_code == status.HTTP_204_NO_CONTENT

    @pytest.mark.asyncio
    async def test_delete_{{ model_name.lower() }}_not_found(self, api_client):
        """Test deleting a non-existent {{ model_name.lower() }}."""
        response = await api_client.delete(
            api_client.url_for("delete_{{ model_name.lower() }}", {{ model_name.lower() }}_id=99999)
        )
        
        assert response.status_code == status.HTTP_404_NOT_FOUND

    @pytest.mark.asyncio
    async def test_list_{{ model_name.lower() }}s(self, api_client, {{ model_name.lower() }}_factory):
        """Test listing {{ model_name.lower() }}s with pagination."""
        # Create test {{ model_name.lower() }}s
        {{ model_name.lower() }}s = await {{ model_name.lower() }}_factory.create_batch(5, name_prefix="List Test")
        
        # Make request
        response = await api_client.get(
            api_client.url_for("list_{{ model_name.lower() }}s"),
            params={"page": 1, "size": 10}
        )
        
        # Assertions
        assert response.status_code == status.HTTP_200_OK
        data = response.json()
        assert "items" in data
        assert "total" in data
        assert len(data["items"]) >= 5
        {% if features.enable_pagination %}
        assert "page" in data
        assert "size" in data
        assert "pages" in data
        {% endif %}

    @pytest.mark.asyncio
    async def test_list_{{ model_name.lower() }}s_with_filter(self, api_client, {{ model_name.lower() }}_factory):
        """Test listing {{ model_name.lower() }}s with name filter."""
        # Create test {{ model_name.lower() }}s
        await {{ model_name.lower() }}_factory.create(name="Filter Match {{ model_name }}")
        await {{ model_name.lower() }}_factory.create(name="No Match {{ model_name }}")
        
        # Make request with filter
        response = await api_client.get(
            api_client.url_for("list_{{ model_name.lower() }}s"),
            params={"name_filter": "Filter Match"}
        )
        
        # Assertions
        assert response.status_code == status.HTTP_200_OK
        data = response.json()
        assert len(data["items"]) >= 1
        assert any("Filter Match" in item["name"] for item in data["items"])

    @pytest.mark.asyncio
    async def test_get_{{ model_name.lower() }}_by_name(self, api_client, {{ model_name.lower() }}_factory):
        """Test retrieving a {{ model_name.lower() }} by name."""
        # Create test {{ model_name.lower() }}
        {{ model_name.lower() }} = await {{ model_name.lower() }}_factory.create(name="Name Search {{ model_name }}")
        
        # Make request
        response = await api_client.get(
            api_client.url_for("get_{{ model_name.lower() }}_by_name", name={{ model_name.lower() }}.name)
        )
        
        # Assertions
        assert response.status_code == status.HTTP_200_OK
        data = response.json()
        assert data["id"] == {{ model_name.lower() }}.id
        assert data["name"] == {{ model_name.lower() }}.name

    @pytest.mark.asyncio
    async def test_get_{{ model_name.lower() }}_by_name_not_found(self, api_client):
        """Test retrieving a {{ model_name.lower() }} by non-existent name."""
        response = await api_client.get(
            api_client.url_for("get_{{ model_name.lower() }}_by_name", name="Non-existent {{ model_name }}")
        )
        
        assert response.status_code == status.HTTP_404_NOT_FOUND

    @pytest.mark.asyncio
    async def test_create_{{ model_name.lower() }}_validation_error(self, api_client):
        """Test creating a {{ model_name.lower() }} with invalid data."""
        # Test empty name
        response = await api_client.post(
            api_client.url_for("create_{{ model_name.lower() }}"),
            json={"name": ""}
        )
        
        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY

    @pytest.mark.asyncio
    async def test_create_duplicate_{{ model_name.lower() }}(self, api_client, {{ model_name.lower() }}_factory):
        """Test creating a {{ model_name.lower() }} with duplicate name."""
        # Create first {{ model_name.lower() }}
        existing = await {{ model_name.lower() }}_factory.create(name="Duplicate Test {{ model_name }}")
        
        # Try to create another with same name
        response = await api_client.post(
            api_client.url_for("create_{{ model_name.lower() }}"),
            json={"name": existing.name}
        )
        
        # Should fail with validation error
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        data = response.json()
        assert "already exists" in data["detail"]["message"].lower() 