"""
{{ model_name }} Pydantic schemas.

This file was auto-generated by Autogen CLI.
Application: {{ app_name }}
Level: {{ level }}
Generated at: {{ timestamp }}
Template Version: v1.0.0 (Complete)
"""

from typing import Any
from uuid import UUID
from datetime import datetime

from pydantic import BaseModel, Field, ConfigDict
from core.base.models import BaseSchema


class {{ model_name }}Base(BaseModel):
    """
    Base {{ model_name }} schema with common fields.
    
    This schema contains the common fields that are used across
    different {{ model_name }} schemas (create, update, response).
    
    Add your custom fields here based on your model definition.
    """
    
    # Add your custom fields here based on your model
    # Example:
    # name: str = Field(..., min_length=1, max_length=255, description="{{ model_name }} name")
    # description: str | None = Field(None, max_length=1000, description="Optional description")
    
    pass


class {{ model_name }}Create({{ model_name }}Base):
    """
    Schema for creating a new {{ model_name }}.
    
    This schema defines the required and optional fields
    for creating a new {{ model_name }} instance.
    
    Example:
        >>> data = {{ model_name }}Create(name="New {{ model_name }}")
        >>> # Use with API endpoint: POST {{ api_config.prefix }}
    """
    pass


class {{ model_name }}Update(BaseModel):
    """
    Schema for updating an existing {{ model_name }}.
    
    All fields are optional to support partial updates.
    Only the provided fields will be updated.
    
    Example:
        >>> data = {{ model_name }}Update(name="Updated Name")
        >>> # Use with API endpoint: PUT {{ api_config.prefix }}/{id}
    """
    
    # Add your custom update fields here (all optional)
    # Example:
    # name: str | None = Field(None, min_length=1, max_length=255, description="Updated {{ model_name }} name")
    # description: str | None = Field(None, max_length=1000, description="Updated description")
    
    pass


class {{ model_name }}Response(BaseSchema):
    """
    Schema for {{ model_name }} responses.
    
    This schema is used when returning {{ model_name }} data
    from API endpoints. It includes all fields from the database.
    
    Inherits base fields from BaseSchema:
    - id: UUID
    - created_at: datetime
    - updated_at: datetime
    - deleted_at: datetime | None
    - is_deleted: bool
    
    Example:
        >>> response = {{ model_name }}Response.model_validate(db_{{ model_name.lower() }})
        >>> # Returned from API endpoints: GET {{ api_config.prefix }}
    """
    
    model_config = ConfigDict(from_attributes=True)
    
    # Add your custom response fields here
    # Example:
    # name: str = Field(..., description="{{ model_name }} name")
    # description: str | None = Field(None, description="Optional description")
    
    pass


class {{ model_name }}List(BaseModel):
    """
    Schema for paginated {{ model_name }} list responses.
    
    This schema wraps a list of {{ model_name }} objects with
    pagination metadata for API endpoints.
    
    Example:
        >>> response = {{ model_name }}List(
        ...     items=[{{ model_name.lower() }}1, {{ model_name.lower() }}2],
        ...     total=50,
        ...     page=1,
        ...     size=20
        ... )
    """
    
    items: list[{{ model_name }}Response] = Field(
        default_factory=list,
        description="List of {{ model_name.lower() }}s"
    )
    
    total: int = Field(
        default=0,
        ge=0,
        description="Total number of {{ model_name.lower() }}s",
        examples=[0, 50, 1000]
    )
    
    {% if features.enable_pagination %}
    page: int = Field(
        default=1,
        ge=1,
        description="Current page number",
        examples=[1, 2, 10]
    )
    
    size: int = Field(
        default=20,
        ge=1,
        le=100,
        description="Number of items per page",
        examples=[10, 20, 50]
    )
    
    pages: int = Field(
        default=1,
        ge=0,
        description="Total number of pages",
        examples=[1, 5, 20]
    )
    {% endif %}


class {{ model_name }}Filter(BaseModel):
    """
    Schema for filtering {{ model_name }} queries.
    
    All fields are optional and support various operators through field suffixes.
    
    Available operators:
    - eq (default): field=value
    - ne: field__ne=value  
    - lt, lte, gt, gte: field__gt=value
    - like, ilike: field__ilike=value
    - in, not_in: field__in=[value1, value2]
    - isnull, isnotnull: field__isnull=True
    
    Example:
        >>> filters = {{ model_name }}Filter(
        ...     id=uuid.uuid4(),
        ...     created_at__gte=datetime.now() - timedelta(days=30)
        ... )
    """
    
    # Base filters available for all models
    id: UUID | None = None
    created_at__gte: datetime | None = None
    created_at__lte: datetime | None = None
    updated_at__gte: datetime | None = None
    updated_at__lte: datetime | None = None
    deleted_at__isnull: bool | None = None
    
    # Add custom filters based on your model fields here
    # Example:
    # name__icontains: str | None = None
    # description__icontains: str | None = None
    # status__in: list[str] | None = None
    
    model_config = ConfigDict(extra='allow')  # Allow additional filter fields


# Convenient type aliases for better code readability
{{ model_name }}CreateData = {{ model_name }}Create
{{ model_name }}UpdateData = {{ model_name }}Update
{{ model_name }}ResponseData = {{ model_name }}Response
{{ model_name }}FilterData = {{ model_name }}Filter 