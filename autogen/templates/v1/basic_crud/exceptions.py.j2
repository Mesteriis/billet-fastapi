"""
{{ model_name }} exception classes.

This file was auto-generated by Autogen CLI.
Application: {{ app_name }}
Level: {{ level }}
Generated at: {{ timestamp }}
Template Version: v1.0.0 (Complete)
"""

from typing import Any

from core.exceptions.base import (
    ApplicationException,
    ValidationException,
    NotFoundError,
    AlreadyExistsError,
    DependencyError,
)


class {{ model_name }}Exception(ApplicationException):
    """Base exception for {{ model_name }} operations."""
    
    def __init__(
        self,
        message: str,
        operation: str | None = None,
        entity_id: int | None = None,
        context: dict[str, Any] | None = None,
        *args,
        **kwargs
    ):
        """
        Initialize {{ model_name }} exception.
        
        Args:
            message: Error message
            operation: Operation that failed
            entity_id: ID of the entity involved
            context: Additional error context
        """
        super().__init__(message, *args, **kwargs)
        self.operation = operation
        self.entity_id = entity_id
        self.context = context or {}


class {{ model_name }}ServiceException({{ model_name }}Exception):
    """Exception for {{ model_name }} service layer errors."""
    
    def __init__(
        self,
        message: str,
        *,
        operation: str = "unknown",
        entity_id: int | None = None,
        original_error: Exception | None = None,
        **kwargs
    ):
        """
        Initialize service exception.
        
        Args:
            message: Error message
            operation: Service operation that failed
            entity_id: ID of the entity involved
            original_error: Original exception that caused this error
        """
        super().__init__(message, operation=operation, entity_id=entity_id, **kwargs)
        self.original_error = original_error
        
        # Include original error in context
        if original_error:
            self.context["original_error"] = str(original_error)
            self.context["original_error_type"] = type(original_error).__name__


class {{ model_name }}ValidationException(ValidationException, {{ model_name }}Exception):
    """Exception for {{ model_name }} validation errors."""
    
    def __init__(
        self,
        message: str,
        *,
        validation_errors: list[dict[str, str]] | None = None,
        field: str | None = None,
        value: Any = None,
        **kwargs
    ):
        """
        Initialize validation exception.
        
        Args:
            message: Error message
            validation_errors: List of validation errors
            field: Field that failed validation
            value: Value that failed validation
        """
        super().__init__(message, **kwargs)
        self.validation_errors = validation_errors or []
        self.field = field
        self.value = value
        
        # Add validation details to context
        if self.validation_errors:
            self.context["validation_errors"] = self.validation_errors
        if field:
            self.context["failed_field"] = field
        if value is not None:
            self.context["failed_value"] = str(value)


class {{ model_name }}RepositoryException({{ model_name }}Exception):
    """Exception for {{ model_name }} repository layer errors."""
    
    def __init__(
        self,
        message: str,
        *,
        operation: str | None = None,
        original_error: str | None = None,
        query_info: dict[str, Any] | None = None,
        **kwargs
    ):
        """
        Initialize repository exception.
        
        Args:
            message: Error message
            operation: Repository operation that failed
            original_error: Original error message
            query_info: Information about the query that failed
        """
        super().__init__(message, operation=operation, **kwargs)
        self.original_error = original_error
        self.query_info = query_info or {}
        
        # Add query info to context
        if self.query_info:
            self.context.update(self.query_info)
        if original_error:
            self.context["original_error"] = original_error


class {{ model_name }}AlreadyExistsError(AlreadyExistsError, {{ model_name }}Exception):
    """Exception for when {{ model_name }} already exists."""
    
    def __init__(
        self,
        message: str,
        *,
        existing_name: str | None = None,
        existing_id: int | None = None,
        **kwargs
    ):
        """
        Initialize already exists exception.
        
        Args:
            message: Error message
            existing_name: Name of the existing entity
            existing_id: ID of the existing entity
        """
        super().__init__(message, **kwargs)
        self.existing_name = existing_name
        self.existing_id = existing_id
        
        # Add existing entity info to context
        if existing_name:
            self.context["existing_name"] = existing_name
        if existing_id:
            self.context["existing_id"] = existing_id


class {{ model_name }}NotFoundError(NotFoundError, {{ model_name }}Exception):
    """Exception for when {{ model_name }} is not found."""
    
    def __init__(
        self,
        message: str,
        *,
        entity_id: int | None = None,
        search_criteria: dict[str, Any] | None = None,
        **kwargs
    ):
        """
        Initialize not found exception.
        
        Args:
            message: Error message
            entity_id: ID that was not found
            search_criteria: Search criteria used
        """
        super().__init__(message, entity_id=entity_id, **kwargs)
        self.search_criteria = search_criteria or {}
        
        # Add search criteria to context
        if self.search_criteria:
            self.context["search_criteria"] = self.search_criteria


class {{ model_name }}DependencyError(DependencyError, {{ model_name }}Exception):
    """Exception for {{ model_name }} dependency conflicts."""
    
    def __init__(
        self,
        message: str,
        *,
        entity_id: int | None = None,
        constraint: str | None = None,
        dependent_entities: list[dict[str, Any]] | None = None,
        **kwargs
    ):
        """
        Initialize dependency exception.
        
        Args:
            message: Error message
            entity_id: ID of the entity with dependencies
            constraint: Database constraint that was violated
            dependent_entities: List of dependent entities
        """
        super().__init__(message, entity_id=entity_id, **kwargs)
        self.constraint = constraint
        self.dependent_entities = dependent_entities or []
        
        # Add dependency info to context
        if constraint:
            self.context["constraint"] = constraint
        if self.dependent_entities:
            self.context["dependent_entities"] = self.dependent_entities


# Export all exceptions for easy importing
__all__ = [
    "{{ model_name }}Exception",
    "{{ model_name }}NotFoundError", 
    "{{ model_name }}ValidationException",
    "{{ model_name }}ServiceException",
    "{{ model_name }}AlreadyExistsError",
    "{{ model_name }}DependencyError"
] 