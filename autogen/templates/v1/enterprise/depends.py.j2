"""
{{ model_name }} dependencies.

This file was auto-generated by Autogen CLI.
Application: {{ app_name }}
Level: {{ level }}
Generated at: {{ timestamp }}
"""

from typing import AsyncGenerator

from fastapi import Depends
from sqlalchemy.ext.asyncio import AsyncSession

from core.database import get_async_session
from apps.{{ app_name }}.repo.{{ app_name }}_repo import {{ model_name }}Repository
from apps.{{ app_name }}.services.{{ app_name }}_service import {{ model_name }}Service


async def get_{{ model_name.lower() }}_repository(
    session: AsyncSession = Depends(get_async_session)
) -> AsyncGenerator[{{ model_name }}Repository, None]:
    """
    Dependency to get {{ model_name }} repository instance.
    
    This dependency provides a {{ model_name }}Repository instance
    using the database session from FastAPI's dependency injection.
    
    Args:
        session: Database session from dependency injection
        
    Yields:
        {{ model_name }}Repository instance
        
    Example:
        >>> @router.get("/{{ model_name.lower() }}s")
        ... async def list_{{ model_name.lower() }}s(
        ...     repo: {{ model_name }}Repository = Depends(get_{{ model_name.lower() }}_repository)
        ... ):
        ...     return await repo.list_active()
    """
    repository = {{ model_name }}Repository(session)
    try:
        yield repository
    finally:
        # Repository cleanup if needed
        pass


async def get_{{ model_name.lower() }}_service(
    session: AsyncSession = Depends(get_async_session)
) -> AsyncGenerator[{{ model_name }}Service, None]:
    """
    Dependency to get {{ model_name }} service instance.
    
    This dependency provides a {{ model_name }}Service instance
    using the database session from FastAPI's dependency injection.
    The service includes business logic and validation.
    
    Args:
        session: Database session from dependency injection
        
    Yields:
        {{ model_name }}Service instance
        
    Example:
        >>> @router.post("/{{ model_name.lower() }}s")
        ... async def create_{{ model_name.lower() }}(
        ...     data: {{ model_name }}Create,
        ...     service: {{ model_name }}Service = Depends(get_{{ model_name.lower() }}_service)
        ... ):
        ...     return await service.create_{{ model_name.lower() }}(data)
    """
    service = {{ model_name }}Service(session)
    try:
        yield service
    finally:
        # Service cleanup if needed
        pass


# Convenience aliases for shorter imports
{{ model_name }}RepositoryDep = Depends(get_{{ model_name.lower() }}_repository)
{{ model_name }}ServiceDep = Depends(get_{{ model_name.lower() }}_service)


# Export dependencies for easy importing
__all__ = [
    "get_{{ model_name.lower() }}_repository",
    "get_{{ model_name.lower() }}_service",
    "{{ model_name }}RepositoryDep",
    "{{ model_name }}ServiceDep"
] 