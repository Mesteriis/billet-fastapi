"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
–í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ë–î, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
"""

import asyncio
import logging
import re
from typing import Optional, Tuple
from urllib.parse import urlparse

import asyncpg  # type: ignore[import-untyped]
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError
from sqlalchemy.ext.asyncio import create_async_engine

from core.config import get_settings

from .exceptions import MigrationError

logger = logging.getLogger(__name__)


class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(self):
        self.settings = get_settings()
        
    def parse_database_url(self, db_url: str) -> Tuple[str, str, str]:
        """
        –ü–∞—Ä—Å–∏—Ç URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
        
        Returns:
            Tuple[base_url, db_name, db_type]
        """
        parsed = urlparse(db_url)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ë–î
        if parsed.scheme.startswith('postgresql'):
            db_type = 'postgresql'
            # –£–±–∏—Ä–∞–µ–º +asyncpg –∏–∑ —Å—Ö–µ–º—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ postgres
            base_scheme = 'postgresql'
        elif parsed.scheme.startswith('sqlite'):
            db_type = 'sqlite'
            base_scheme = parsed.scheme
        else:
            raise MigrationError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ë–î: {parsed.scheme}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ë–î
        db_name = parsed.path.lstrip('/')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL (–±–µ–∑ –∏–º–µ–Ω–∏ –ë–î –¥–ª—è PostgreSQL)
        if db_type == 'postgresql':
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ postgres –ë–î –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
            base_url = f"{base_scheme}://{parsed.netloc}/postgres"
        else:
            # –î–ª—è SQLite –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
            base_url = db_url
            
        return base_url, db_name, db_type
    
    async def database_exists(self, db_url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        base_url, db_name, db_type = self.parse_database_url(db_url)
        
        try:
            if db_type == 'postgresql':
                return await self._postgresql_database_exists(base_url, db_name)
            elif db_type == 'sqlite':
                return await self._sqlite_database_exists(db_name)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ë–î: {e}")
            return False
            
        return False
    
    async def _postgresql_database_exists(self, base_url: str, db_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ postgres –ë–î
            conn = await asyncpg.connect(base_url)
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
                result = await conn.fetchval(
                    "SELECT 1 FROM pg_database WHERE datname = $1",
                    db_name
                )
                return result is not None
            finally:
                await conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PostgreSQL –ë–î: {e}")
            return False
    
    async def _sqlite_database_exists(self, db_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        from pathlib import Path

        # –î–ª—è SQLite –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if db_path == ":memory:":
            return True  # In-memory –ë–î –≤—Å–µ–≥–¥–∞ "—Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            
        return Path(db_path).exists()
    
    async def create_database(self, db_url: str) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ë–î –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        if await self.database_exists(db_url):
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
            
        base_url, db_name, db_type = self.parse_database_url(db_url)
        
        try:
            if db_type == 'postgresql':
                return await self._create_postgresql_database(base_url, db_name)
            elif db_type == 'sqlite':
                return await self._create_sqlite_database(db_name)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")
            raise MigrationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            
        return False
    
    async def _create_postgresql_database(self, base_url: str, db_name: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        try:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_name}")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ postgres –ë–î
            conn = await asyncpg.connect(base_url)
            try:
                # –°–æ–∑–¥–∞–µ–º –ë–î (–Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å execute, –∞ –Ω–µ fetchval)
                await conn.execute(f'CREATE DATABASE "{db_name}"')
                logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
                return True
            finally:
                await conn.close()
                
        except asyncpg.DuplicateDatabaseError:
            logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PostgreSQL –ë–î: {e}")
            raise
    
    async def _create_sqlite_database(self, db_path: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        try:
            if db_path == ":memory:":
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è in-memory SQLite –ë–î")
                return True
                
            from pathlib import Path
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            db_file = Path(db_path)
            db_file.parent.mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –ë–î (SQLite —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏)
            import sqlite3
            conn = sqlite3.connect(db_path)
            conn.close()
            
            logger.info(f"‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_path} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SQLite –ë–î: {e}")
            raise
    
    async def drop_database(self, db_url: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        –û–°–¢–û–†–û–ñ–ù–û: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!
        """
        base_url, db_name, db_type = self.parse_database_url(db_url)
        
        try:
            if db_type == 'postgresql':
                return await self._drop_postgresql_database(base_url, db_name)
            elif db_type == 'sqlite':
                return await self._drop_sqlite_database(db_name)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ë–î: {e}")
            raise MigrationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            
        return False
    
    async def _drop_postgresql_database(self, base_url: str, db_name: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        try:
            logger.warning(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_name}")
            
            conn = await asyncpg.connect(base_url)
            try:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ë–î
                await conn.execute(f"""
                    SELECT pg_terminate_backend(pid)
                    FROM pg_stat_activity
                    WHERE datname = '{db_name}' AND pid <> pg_backend_pid()
                """)
                
                # –£–¥–∞–ª—è–µ–º –ë–î
                await conn.execute(f'DROP DATABASE IF EXISTS "{db_name}"')
                logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                return True
            finally:
                await conn.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è PostgreSQL –ë–î: {e}")
            raise
    
    async def _drop_sqlite_database(self, db_path: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        try:
            if db_path == ":memory:":
                logger.info("In-memory SQLite –ë–î –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è")
                return True
                
            from pathlib import Path
            
            logger.warning(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
            
            db_file = Path(db_path)
            if db_file.exists():
                db_file.unlink()
                logger.info(f"‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            else:
                logger.info(f"SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è SQLite –ë–î: {e}")
            raise
    
    async def test_connection(self, db_url: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            engine = create_async_engine(db_url)
            
            async with engine.connect() as conn:
                # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                await conn.execute(text("SELECT 1"))
                
            await engine.dispose()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    async def get_database_info(self, db_url: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        base_url, db_name, db_type = self.parse_database_url(db_url)
        
        info = {
            "database_name": db_name,
            "database_type": db_type,
            "exists": await self.database_exists(db_url),
            "connection_test": False,
            "size": None,
            "tables_count": None
        }
        
        if info["exists"]:
            info["connection_test"] = await self.test_connection(db_url)
            
            if info["connection_test"]:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if db_type == 'postgresql':
                        info.update(await self._get_postgresql_info(db_url, db_name))
                    elif db_type == 'sqlite':
                        info.update(await self._get_sqlite_info(db_url))
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î: {e}")
        
        return info
    
    async def _get_postgresql_info(self, db_url: str, db_name: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            engine = create_async_engine(db_url)
            
            async with engine.connect() as conn:
                # –†–∞–∑–º–µ—Ä –ë–î
                size_result = await conn.execute(text(
                    "SELECT pg_size_pretty(pg_database_size(current_database()))"
                ))
                size = size_result.scalar()
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
                tables_result = await conn.execute(text("""
                    SELECT COUNT(*)
                    FROM information_schema.tables
                    WHERE table_schema = 'public'
                """))
                tables_count = tables_result.scalar()
                
            await engine.dispose()
            
            return {
                "size": size,
                "tables_count": tables_count
            }
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ PostgreSQL: {e}")
            return {}
    
    async def _get_sqlite_info(self, db_url: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            from pathlib import Path

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            db_path = db_url.replace("sqlite+aiosqlite:///", "")
            
            if db_path == ":memory:":
                return {"size": "In-memory", "tables_count": 0}
            
            # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            db_file = Path(db_path)
            if db_file.exists():
                size_bytes = db_file.stat().st_size
                size = f"{size_bytes / 1024 / 1024:.2f} MB"
            else:
                size = "0 MB"
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
            engine = create_async_engine(db_url)
            async with engine.connect() as conn:
                tables_result = await conn.execute(text(
                    "SELECT COUNT(*) FROM sqlite_master WHERE type='table'"
                ))
                tables_count = tables_result.scalar()
                
            await engine.dispose()
            
            return {
                "size": size,
                "tables_count": tables_count
            }
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ SQLite: {e}")
            return {}
    
    async def ensure_database_exists(self, db_url: Optional[str] = None) -> bool:
        """
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        –°–æ–∑–¥–∞–µ—Ç –ë–î –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        """
        if db_url is None:
            db_url = self.settings.SQLALCHEMY_DATABASE_URI
            
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        if await self.database_exists(db_url):
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if await self.test_connection(db_url):
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î")
                return False
        else:
            logger.info("üìù –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...")
            
            if await self.create_database(db_url):
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –ë–î
                if await self.test_connection(db_url):
                    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return True
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ë–î")
                    return False
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                return False