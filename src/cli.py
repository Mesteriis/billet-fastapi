"""CLI commands for TaskIQ worker management."""

from __future__ import annotations

import asyncio
import logging

import click
from taskiq.api import run_receiver_task

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
import core.tasks  # noqa
from core.config import get_settings
from core.taskiq_client import broker

logger = logging.getLogger(__name__)
settings = get_settings()


def setup_logging() -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è CLI.

    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ CLI –∫–æ–º–∞–Ω–¥.
    """
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.StreamHandler(),
        ],
    )


@click.group()
def cli() -> None:
    """TaskIQ Management CLI.

    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è TaskIQ –≤–æ—Ä–∫–µ—Ä–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    setup_logging()


@cli.command()
@click.option(
    "--workers",
    "-w",
    default=1,
    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤",
    type=int,
    show_default=True,
)
@click.option(
    "--reload",
    "-r",
    is_flag=True,
    help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞",
    default=False,
)
@click.option(
    "--log-level",
    "-l",
    default="INFO",
    help="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
    type=click.Choice(["DEBUG", "INFO", "WARNING", "ERROR"], case_sensitive=False),
    show_default=True,
)
def worker(
    workers: int,
    reload: bool,
    log_level: str,
) -> None:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å TaskIQ –≤–æ—Ä–∫–µ—Ä—ã.

    Args:
        workers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á.
        reload: –§–ª–∞–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞.
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤.
    """
    settings = get_settings()

    click.echo(f"üöÄ –ó–∞–ø—É—Å–∫ {workers} TaskIQ –≤–æ—Ä–∫–µ—Ä–æ–≤...")
    click.echo(f"üìä Broker URL: {settings.TASKIQ_BROKER_URL}")
    click.echo(f"üíæ Result Backend: {settings.TASKIQ_RESULT_BACKEND_URL}")
    click.echo(f"üîÑ Reload: {reload}")
    click.echo(f"üìù Log Level: {log_level}")

    try:
        asyncio.run(run_receiver_task(broker))
    except KeyboardInterrupt:
        click.echo("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤...")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤: {e}", err=True)
        raise


@cli.command()
def scheduler() -> None:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å).

    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    """
    click.echo("üïê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")


@cli.command()
@click.argument("task_name", required=False)
def test(task_name: str | None) -> None:
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TaskIQ.

    Args:
        task_name: –ò–º—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    """
    settings = get_settings()

    click.echo("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TaskIQ...")
    click.echo(f"üìä Broker URL: {settings.TASKIQ_BROKER_URL}")
    click.echo(f"üíæ Result Backend: {settings.TASKIQ_RESULT_BACKEND_URL}")

    async def test_connection() -> None:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—Ä–æ–∫–µ—Ä—É."""
        try:
            await broker.startup()
            click.echo("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—Ä–æ–∫–µ—Ä—É —É—Å–ø–µ—à–Ω–æ")

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
            from core.tasks import add_numbers, test_task  # noqa: F401

            if task_name:
                click.echo(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task_name}")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
            else:
                click.echo("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
                click.echo("  - test_task")
                click.echo("  - add_numbers")

            await broker.shutdown()
            click.echo("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", err=True)
            raise

    try:
        asyncio.run(test_connection())
    except Exception:
        click.echo("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω", err=True)
        raise


@cli.command()
def info() -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TaskIQ.

    –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TaskIQ –±—Ä–æ–∫–µ—Ä–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞.
    """
    settings = get_settings()

    click.echo("‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TaskIQ:")
    click.echo(f"üìä Broker URL: {settings.TASKIQ_BROKER_URL}")
    click.echo(f"üíæ Result Backend: {settings.TASKIQ_RESULT_BACKEND_URL}")
    click.echo(f"üîÑ Max Retries: {settings.TASKIQ_MAX_RETRIES}")
    click.echo(f"‚è±Ô∏è  Retry Delay: {settings.TASKIQ_RETRY_DELAY}s")
    click.echo(f"‚è∞ Task Timeout: {settings.TASKIQ_TASK_TIMEOUT}s")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—Ä–æ–∫–µ—Ä–∞
    click.echo("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...")

    async def check_broker() -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—Ä–æ–∫–µ—Ä–∞."""
        try:
            await broker.startup()
            click.echo("‚úÖ –ë—Ä–æ–∫–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            await broker.shutdown()
        except Exception as e:
            click.echo(f"‚ùå –ë—Ä–æ–∫–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}", err=True)

    try:
        asyncio.run(check_broker())
    except Exception:
        pass


if __name__ == "__main__":
    cli()
