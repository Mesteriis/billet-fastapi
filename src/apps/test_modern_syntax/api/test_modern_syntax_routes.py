"""
TestModernSyntax API routes for Advanced level.

This file was auto-generated by Autogen CLI.
Application: test_modern_syntax
Level: Enterprise
Generated at: 2025-06-22T17:39:23.618527
"""

from typing import Optional, Any
import logging

from fastapi import APIRouter, Depends, HTTPException, Query, Body, status
from sqlalchemy.ext.asyncio import AsyncSession

from core.database import get_async_session
from apps.test_modern_syntax.services.test_modern_syntax_service import TestModernSyntaxService
from apps.test_modern_syntax.schemas.test_modern_syntax_schemas import (
    TestModernSyntaxCreate,
    TestModernSyntaxUpdate,
    TestModernSyntaxResponse,
    TestModernSyntaxList,
    TestModernSyntaxSearchRequest,
    TestModernSyntaxStatus
)
from apps.test_modern_syntax.exceptions import (
    TestModernSyntaxValidationException,
    TestModernSyntaxServiceException,
    TestModernSyntaxAlreadyExistsError,
    TestModernSyntaxNotFoundError
)

logger = logging.getLogger("api.test_modern_syntax")

# Create router for TestModernSyntax endpoints with advanced features
router = APIRouter(prefix="/test-modern-syntax", tags=['TestModernSyntax'])


async def get_testmodernsyntax_service(
    session: AsyncSession = Depends(get_async_session)
) -> TestModernSyntaxService:
    """Dependency to get TestModernSyntax service instance."""
    return TestModernSyntaxService(session)


@router.post(
    "/",
    response_model=TestModernSyntaxResponse,
    status_code=status.HTTP_201_CREATED,
    summary="Create TestModernSyntax (Advanced)",
    description="Create a new testmodernsyntax with advanced features."
)
async def create_testmodernsyntax(
    create_data: TestModernSyntaxCreate,
    service: TestModernSyntaxService = Depends(get_testmodernsyntax_service)
) -> TestModernSyntaxResponse:
    """Create a new testmodernsyntax with advanced validation."""
    try:
        logger.info(f"API: Creating advanced testmodernsyntax: {create_data.name}")
        result = await service.create_testmodernsyntax(create_data)
        logger.info(f"API: Created testmodernsyntax with ID: {result.id}")
        return result
        
    except TestModernSyntaxValidationException as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail={"message": str(e), "errors": e.details.get("validation_errors", [])}
        )
    except TestModernSyntaxAlreadyExistsError as e:
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail={"message": str(e)}
        )


@router.post(
    "/search",
    response_model=TestModernSyntaxList,
    summary="Advanced Search TestModernSyntaxs",
    description="Perform advanced search with complex filtering."
)
async def search_testmodernsyntaxs(
    search_request: TestModernSyntaxSearchRequest,
    service: TestModernSyntaxService = Depends(get_testmodernsyntax_service)
) -> TestModernSyntaxList:
    """Advanced search with multiple filters and options."""
    try:
        logger.debug("API: Advanced search testmodernsyntaxs")
        result = await service.search_testmodernsyntaxs(search_request)
        return result
        
    except TestModernSyntaxServiceException as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"message": "Advanced search failed", "error": str(e)}
        )


@router.get(
    "/statistics",
    response_model=dict[str, Any],
    summary="Get TestModernSyntax Statistics"
)
async def get_statistics(
    service: TestModernSyntaxService = Depends(get_testmodernsyntax_service)
) -> dict[str, Any]:
    """Get comprehensive statistics about testmodernsyntaxs."""
    try:
        return await service.get_statistics()
    except TestModernSyntaxServiceException as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"message": "Failed to get statistics", "error": str(e)}
        )