"""
TestModernSyntax dependencies.

This file was auto-generated by Autogen CLI.
Application: test_modern_syntax
Level: Enterprise
Generated at: 2025-06-22T17:39:23.618527
"""

from typing import AsyncGenerator

from fastapi import Depends
from sqlalchemy.ext.asyncio import AsyncSession

from core.database import get_async_session
from apps.test_modern_syntax.repo.test_modern_syntax_repo import TestModernSyntaxRepository
from apps.test_modern_syntax.services.test_modern_syntax_service import TestModernSyntaxService


async def get_testmodernsyntax_repository(
    session: AsyncSession = Depends(get_async_session)
) -> AsyncGenerator[TestModernSyntaxRepository, None]:
    """
    Dependency to get TestModernSyntax repository instance.
    
    This dependency provides a TestModernSyntaxRepository instance
    using the database session from FastAPI's dependency injection.
    
    Args:
        session: Database session from dependency injection
        
    Yields:
        TestModernSyntaxRepository instance
        
    Example:
        >>> @router.get("/testmodernsyntaxs")
        ... async def list_testmodernsyntaxs(
        ...     repo: TestModernSyntaxRepository = Depends(get_testmodernsyntax_repository)
        ... ):
        ...     return await repo.list_active()
    """
    repository = TestModernSyntaxRepository(session)
    try:
        yield repository
    finally:
        # Repository cleanup if needed
        pass


async def get_testmodernsyntax_service(
    session: AsyncSession = Depends(get_async_session)
) -> AsyncGenerator[TestModernSyntaxService, None]:
    """
    Dependency to get TestModernSyntax service instance.
    
    This dependency provides a TestModernSyntaxService instance
    using the database session from FastAPI's dependency injection.
    The service includes business logic and validation.
    
    Args:
        session: Database session from dependency injection
        
    Yields:
        TestModernSyntaxService instance
        
    Example:
        >>> @router.post("/testmodernsyntaxs")
        ... async def create_testmodernsyntax(
        ...     data: TestModernSyntaxCreate,
        ...     service: TestModernSyntaxService = Depends(get_testmodernsyntax_service)
        ... ):
        ...     return await service.create_testmodernsyntax(data)
    """
    service = TestModernSyntaxService(session)
    try:
        yield service
    finally:
        # Service cleanup if needed
        pass


# Convenience aliases for shorter imports
TestModernSyntaxRepositoryDep = Depends(get_testmodernsyntax_repository)
TestModernSyntaxServiceDep = Depends(get_testmodernsyntax_service)


# Export dependencies for easy importing
__all__ = [
    "get_testmodernsyntax_repository",
    "get_testmodernsyntax_service",
    "TestModernSyntaxRepositoryDep",
    "TestModernSyntaxServiceDep"
] 