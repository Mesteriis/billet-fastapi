"""
TestModernSyntax API tests for Advanced level.

This file was auto-generated by Autogen CLI.
Application: test_modern_syntax
Level: Enterprise  
Generated at: 2025-06-22T17:39:23.618527
"""

import pytest
from httpx import AsyncClient
from sqlalchemy.ext.asyncio import AsyncSession

from tests.factories.test_modern_syntax_factories import TestModernSyntaxFactory
from apps.test_modern_syntax.schemas.test_modern_syntax_schemas import TestModernSyntaxStatus


class TestTestModernSyntaxAdvancedAPI:
    """Advanced test suite for TestModernSyntax API endpoints."""

    @pytest.fixture
    async def sample_testmodernsyntax(self, testmodernsyntax_factory: TestModernSyntaxFactory):
        """Create a sample testmodernsyntax for testing."""
        return await testmodernsyntax_factory.create(
            name="Test Advanced TestModernSyntax",
            description="Test description for advanced features",
            tags=["test", "advanced", "api"],
            priority=5,
            status="active"
        )

    async def test_create_testmodernsyntax_advanced(self, api_client: AsyncClient):
        """Test creating testmodernsyntax with advanced features."""
        create_data = {
            "name": "Advanced Test TestModernSyntax",
            "description": "Comprehensive test description with advanced features",
            "tags": ["advanced", "testing", "business"],
            "priority": 8,
            "status": "active"
        }
        
        response = await api_client.post(
            api_client.url_for("create_testmodernsyntax"),
            json=create_data
        )
        
        assert response.status_code == 201
        data = response.json()
        
        # Validate response structure
        assert data["name"] == create_data["name"]
        assert data["description"] == create_data["description"]
        assert set(data["tags"]) == set(create_data["tags"])
        assert data["priority"] == create_data["priority"]
        assert data["status"] == create_data["status"]
        
        # Validate computed fields
        assert data["tags_count"] == 3
        assert data["is_high_priority"] is True  # priority 8 >= 7
        assert "id" in data
        
        assert "created_at" in data
        assert "updated_at" in data
        

    async def test_create_testmodernsyntax_validation_error(self, api_client: AsyncClient):
        """Test creation with validation errors."""
        # Test high priority with inactive status (should fail business rule)
        create_data = {
            "name": "Test Validation",
            "priority": 9,
            "status": "inactive"  # High priority must be active
        }
        
        response = await api_client.post(
            api_client.url_for("create_testmodernsyntax"),
            json=create_data
        )
        
        assert response.status_code == 400
        error_data = response.json()
        assert "validation_errors" in error_data["detail"]

    async def test_advanced_search_comprehensive(self, api_client: AsyncClient, testmodernsyntax_factory: TestModernSyntaxFactory):
        """Test comprehensive advanced search functionality."""
        # Create test data with various attributes
        await testmodernsyntax_factory.create_batch(
            5,
            name="Business Project",
            description="Critical business functionality", 
            tags=["business", "critical"],
            priority=8,
            status="active"
        )
        
        await testmodernsyntax_factory.create_batch(
            3,
            name="Dev Task",
            description="Development related task",
            tags=["development", "tech"],
            priority=3,
            status="draft"
        )
        
        # Test full-text search
        search_request = {
            "query": "business critical",
            "status": ["active"],
            "priority_gte": 5,
            "tags": ["business"],
            "sort_by": "priority",
            "sort_order": "desc",
            "page": 1,
            "size": 10,
            "include_facets": True
        }
        
        response = await api_client.post(
            api_client.url_for("search_testmodernsyntaxs"),
            json=search_request
        )
        
        assert response.status_code == 200
        data = response.json()
        
        # Validate search results
        assert data["total"] >= 5  # Should find business projects
        assert len(data["items"]) <= 10  # Respect page size
        assert "search_time_ms" in data
        assert data["search_time_ms"] > 0
        
        # Validate facets
        assert "facets" in data
        assert "status" in data["facets"]
        assert "priority" in data["facets"]
        
        # Validate items have computed fields
        for item in data["items"]:
            assert "tags_count" in item
            assert "is_high_priority" in item
            assert "search_relevance" in item

    async def test_search_with_complex_filters(self, api_client: AsyncClient, testmodernsyntax_factory: TestModernSyntaxFactory):
        """Test search with complex filtering combinations."""
        # Create diverse test data
        await testmodernsyntax_factory.create(
            name="High Priority Active",
            priority=9,
            status="active",
            tags=["urgent", "important"]
        )
        
        await testmodernsyntax_factory.create(
            name="Medium Priority Draft", 
            priority=5,
            status="draft",
            tags=["normal", "pending"]
        )
        
        # Test priority range filter
        search_request = {
            "priority_gte": 7,
            "priority_lte": 10,
            "status": ["active"],
            "page": 1,
            "size": 20
        }
        
        response = await api_client.post(
            api_client.url_for("search_testmodernsyntaxs"),
            json=search_request
        )
        
        assert response.status_code == 200
        data = response.json()
        
        # Validate all results match filters
        for item in data["items"]:
            assert item["priority"] >= 7
            assert item["priority"] <= 10
            assert item["status"] == "active"

    async def test_get_statistics(self, api_client: AsyncClient, testmodernsyntax_factory: TestModernSyntaxFactory):
        """Test getting comprehensive statistics."""
        # Create test data for statistics
        await testmodernsyntax_factory.create_batch(
            10,
            status="active",
            priority=8
        )
        
        await testmodernsyntax_factory.create_batch(
            5,
            status="draft",
            priority=3
        )
        
        response = await api_client.get(
            api_client.url_for("get_statistics")
        )
        
        assert response.status_code == 200
        stats = response.json()
        
        # Validate statistics structure
        assert "total_count" in stats
        assert "active_count" in stats
        assert "priority_stats" in stats
        assert "status_counts" in stats
        assert "high_priority_count" in stats
        
        # Validate statistics values
        assert stats["total_count"] >= 15
        assert stats["active_count"] >= 10
        assert "active" in stats["status_counts"]
        assert "draft" in stats["status_counts"]

    async def test_list_with_advanced_filters(self, api_client: AsyncClient, testmodernsyntax_factory: TestModernSyntaxFactory):
        """Test listing with advanced query parameters."""
        # Create test data
        await testmodernsyntax_factory.create_batch(
            25,
            priority=7,
            status="active"
        )
        
        # Test pagination and filtering
        response = await api_client.get(
            api_client.url_for("list_testmodernsyntaxs"),
            params={
                "page": 1,
                "size": 10,
                "status": "active",
                "priority_gte": 5,
                "sort_by": "priority",
                "sort_order": "desc",
                "include_facets": True
            }
        )
        
        assert response.status_code == 200
        data = response.json()
        
        # Validate pagination
        assert len(data["items"]) <= 10
        assert data["page"] == 1
        assert data["size"] == 10
        assert data["total"] >= 25
        
        # Validate facets are included
        assert "facets" in data
        
        # Validate sorting (should be descending by priority)
        priorities = [item["priority"] for item in data["items"]]
        assert priorities == sorted(priorities, reverse=True)

    async def test_middleware_headers(self, api_client: AsyncClient, sample_testmodernsyntax):
        """Test that middleware adds proper headers."""
        response = await api_client.get(
            api_client.url_for("list_testmodernsyntaxs")
        )
        
        assert response.status_code == 200
        
        # Validate middleware headers
        assert "X-Request-ID" in response.headers
        assert "X-Response-Time" in response.headers
        
        # Validate response time format
        response_time = response.headers["X-Response-Time"]
        assert response_time.endswith("ms")
        assert float(response_time[:-2]) >= 0

    async def test_performance_monitoring(self, api_client: AsyncClient, testmodernsyntax_factory: TestModernSyntaxFactory):
        """Test performance monitoring in search operations."""
        # Create larger dataset for performance testing
        await testmodernsyntax_factory.create_batch(
            100,
            tags=["performance", "test", "bulk"]
        )
        
        search_request = {
            "query": "performance test",
            "include_facets": True,
            "size": 50
        }
        
        response = await api_client.post(
            api_client.url_for("search_testmodernsyntaxs"),
            json=search_request
        )
        
        assert response.status_code == 200
        data = response.json()
        
        # Validate performance metrics are included
        assert "search_time_ms" in data
        assert isinstance(data["search_time_ms"], (int, float))
        assert data["search_time_ms"] >= 0
        
        # Performance should be reasonable (less than 5 seconds)
        assert data["search_time_ms"] < 5000

    async def test_error_handling_with_context(self, api_client: AsyncClient):
        """Test that errors include proper context and correlation."""
        # Test non-existent ID
        response = await api_client.get(
            api_client.url_for("get_testmodernsyntax", testmodernsyntax_id=99999)
        )
        
        assert response.status_code == 404
        error_data = response.json()
        
        # Validate error structure
        assert "detail" in error_data
        assert "message" in error_data["detail"]
        
        # Validate request ID is in headers for error correlation
        assert "X-Request-ID" in response.headers

    async def test_tag_operations(self, api_client: AsyncClient, sample_testmodernsyntax):
        """Test advanced tag operations."""
        testmodernsyntax_id = sample_testmodernsyntax.id
        
        # Test adding tags
        new_tags = ["urgent", "customer-request", "high-impact"]
        
        response = await api_client.patch(
            api_client.url_for("add_tags", testmodernsyntax_id=testmodernsyntax_id),
            json=new_tags
        )
        
        assert response.status_code == 200
        data = response.json()
        
        # Validate tags were merged
        assert set(new_tags).issubset(set(data["tags"]))
        assert data["tags_count"] >= len(new_tags)

    async def test_priority_update_validation(self, api_client: AsyncClient, sample_testmodernsyntax):
        """Test priority update with business rule validation."""
        testmodernsyntax_id = sample_testmodernsyntax.id
        
        # Test valid priority update
        response = await api_client.patch(
            api_client.url_for("update_priority", testmodernsyntax_id=testmodernsyntax_id),
            json=9
        )
        
        assert response.status_code == 200
        data = response.json()
        assert data["priority"] == 9
        assert data["is_high_priority"] is True
        
        # Test invalid priority (out of range)
        response = await api_client.patch(
            api_client.url_for("update_priority", testmodernsyntax_id=testmodernsyntax_id),
            json=15
        )
        
        assert response.status_code == 400 