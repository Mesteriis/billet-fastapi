"""
Test factories for User.

Auto-generated by Autogen CLI.
"""

import factory
from async_factory_boy.factory.sqlalchemy import AsyncSQLAlchemyFactory
from tests.factories.base_factories import BaseTestFactory, TestDataGenerator

from src.apps.users.models.users_models import User


class UserFactory(BaseTestFactory):
    """Factory for User model."""
    
    class Meta:
        model = User
        sqlalchemy_session_persistence = "commit"

    # Auto-generated fields based on model analysis
    # These should be customized based on your specific model fields
    
    # Example fields - customize based on your model
    # name = factory.Faker("name")
    # email = factory.LazyFunction(TestDataGenerator.unique_email)
    # username = factory.LazyFunction(TestDataGenerator.unique_username)
    # phone = factory.LazyFunction(TestDataGenerator.random_phone)
    # description = factory.LazyFunction(lambda: TestDataGenerator.random_text(100))
    
    @factory.post_generation
    def set_defaults(obj, create, extracted, **kwargs):
        """Set default values after creation."""
        if not create:
            return
            
        # Add any post-generation logic here
        pass


class UserCreateFactory(UserFactory):
    """Factory for creating User with minimal required fields."""
    
    class Meta:
        model = User
        
    # Override fields for creation scenario
    pass


class UserUpdateFactory(factory.DictFactory):
    """Factory for User update data."""
    
    # Fields for update operations
    # name = factory.Faker("name")
    pass


# Convenience functions
async def create_users(**kwargs):
    """Create a User instance with factory."""
    return await UserFactory.create(**kwargs)


async def build_users(**kwargs):
    """Build a User instance without saving."""
    return await UserFactory.build(**kwargs)


async def create_users_batch(size: int = 5, **kwargs):
    """Create multiple User instances."""
    return await UserFactory.create_batch(size, **kwargs)
