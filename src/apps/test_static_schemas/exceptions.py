"""
TestStaticSchema exceptions.

This file was auto-generated by Autogen CLI.
Application: test_static_schemas
Level: Enterprise
Generated at: 2025-06-22T18:01:28.021260
"""

from typing import Any, Optional

from core.exceptions.base import AppException


class TestStaticSchemaException(AppException):
    """
    Base exception for all TestStaticSchema related errors.
    
    This is the base class for all exceptions that can occur
    in the TestStaticSchema domain. It provides consistent
    error handling across the application.
    
    Attributes:
        operation: Name of the operation that failed
        entity_id: ID of the entity involved (if applicable)
        context: Additional context information
        
    Example:
        >>> raise TestStaticSchemaException(
        ...     "Failed to process teststaticschema",
        ...     operation="process_teststaticschema",
        ...     entity_id=123
        ... )
    """
    
    def __init__(
        self,
        message: str,
        operation: Optional[str] = None,
        entity_id: Optional[int] = None,
        context: Optional[dict[str, Any]] = None,
        **kwargs: Any
    ):
        """
        Initialize TestStaticSchema exception.
        
        Args:
            message: Error message
            operation: Name of the failed operation
            entity_id: ID of the affected entity
            context: Additional context information
            **kwargs: Additional exception details
        """
        super().__init__(message, **kwargs)
        self.details = self.details or {}
        
        if operation:
            self.details["operation"] = operation
        if entity_id:
            self.details["entity_id"] = entity_id
        if context:
            self.details.update(context)


class TestStaticSchemaNotFoundError(TestStaticSchemaException):
    """
    Exception raised when a TestStaticSchema is not found.
    
    This exception is raised when attempting to retrieve,
    update, or delete a TestStaticSchema that doesn't exist
    in the system.
    
    Example:
        >>> raise TestStaticSchemaNotFoundError(
        ...     "TestStaticSchema with ID 123 not found", 
        ...     entity_id=123
        ... )
    """
    
    def __init__(
        self,
        message: str = "TestStaticSchema not found",
        entity_id: Optional[int] = None,
        **kwargs: Any
    ):
        super().__init__(
            message=message,
            entity_id=entity_id,
            **kwargs
        )


class TestStaticSchemaValidationException(TestStaticSchemaException):
    """
    Exception raised when TestStaticSchema data validation fails.
    
    This exception is raised when the provided data doesn't
    meet the validation requirements for creating or updating
    a TestStaticSchema.
    
    Attributes:
        validation_errors: List of specific validation errors
        
    Example:
        >>> raise TestStaticSchemaValidationException(
        ...     "Invalid teststaticschema data",
        ...     validation_errors=[
        ...         {"field": "name", "message": "Name is required"},
        ...         {"field": "name", "message": "Name must be unique"}
        ...     ]
        ... )
    """
    
    def __init__(
        self,
        message: str = "TestStaticSchema validation failed",
        validation_errors: Optional[list[dict[str, str]]] = None,
        **kwargs: Any
    ):
        super().__init__(message=message, **kwargs)
        if validation_errors:
            self.details["validation_errors"] = validation_errors


class TestStaticSchemaServiceException(TestStaticSchemaException):
    """
    Exception raised when a TestStaticSchema service operation fails.
    
    This exception is raised when an error occurs in the
    service layer during TestStaticSchema operations, such as
    database errors, business logic failures, or external
    service failures.
    
    Example:
        >>> raise TestStaticSchemaServiceException(
        ...     "Failed to create teststaticschema", 
        ...     operation="create_teststaticschema",
        ...     original_error=str(e)
        ... )
    """
    
    def __init__(
        self,
        message: str = "TestStaticSchema service operation failed",
        operation: Optional[str] = None,
        original_error: Optional[str] = None,
        **kwargs: Any
    ):
        super().__init__(message=message, operation=operation, **kwargs)
        if original_error:
            self.details["original_error"] = original_error


class TestStaticSchemaAlreadyExistsError(TestStaticSchemaException):
    """
    Exception raised when attempting to create a TestStaticSchema that already exists.
    
    This exception is raised when trying to create a TestStaticSchema
    with a name or other unique identifier that already exists
    in the system.
    
    Example:
        >>> raise TestStaticSchemaAlreadyExistsError(
        ...     "TestStaticSchema with name 'Sample' already exists",
        ...     existing_name="Sample"
        ... )
    """
    
    def __init__(
        self,
        message: str = "TestStaticSchema already exists",
        existing_name: Optional[str] = None,
        existing_id: Optional[int] = None,
        **kwargs: Any
    ):
        super().__init__(message=message, **kwargs)
        if existing_name:
            self.details["existing_name"] = existing_name
        if existing_id:
            self.details["existing_id"] = existing_id


class TestStaticSchemaDeleteError(TestStaticSchemaException):
    """
    Exception raised when TestStaticSchema deletion fails.
    
    This exception is raised when an error occurs while
    trying to delete a TestStaticSchema, such as foreign
    key constraints or business rule violations.
    
    Example:
        >>> raise TestStaticSchemaDeleteError(
        ...     "Cannot delete teststaticschema with active references",
        ...     entity_id=123,
        ...     constraint="foreign_key_constraint"
        ... )
    """
    
    def __init__(
        self,
        message: str = "Failed to delete TestStaticSchema",
        entity_id: Optional[int] = None,
        constraint: Optional[str] = None,
        **kwargs: Any
    ):
        super().__init__(message=message, entity_id=entity_id, **kwargs)
        if constraint:
            self.details["constraint"] = constraint


# Export all exceptions for easy importing
__all__ = [
    "TestStaticSchemaException",
    "TestStaticSchemaNotFoundError", 
    "TestStaticSchemaValidationException",
    "TestStaticSchemaServiceException",
    "TestStaticSchemaAlreadyExistsError",
    "TestStaticSchemaDeleteError"
] 