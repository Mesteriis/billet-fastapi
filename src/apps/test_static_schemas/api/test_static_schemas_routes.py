"""
TestStaticSchema API routes for Advanced level.

This file was auto-generated by Autogen CLI.
Application: test_static_schemas
Level: Enterprise
Generated at: 2025-06-22T18:01:28.021260
"""

from typing import Optional, Any
import logging

from fastapi import APIRouter, Depends, HTTPException, Query, Body, status
from sqlalchemy.ext.asyncio import AsyncSession

from core.database import get_async_session
from apps.test_static_schemas.services.test_static_schemas_service import TestStaticSchemaService
from apps.test_static_schemas.schemas.test_static_schemas_schemas import (
    TestStaticSchemaCreate,
    TestStaticSchemaUpdate,
    TestStaticSchemaResponse,
    TestStaticSchemaList,
    TestStaticSchemaSearchRequest,
    TestStaticSchemaStatus
)
from apps.test_static_schemas.exceptions import (
    TestStaticSchemaValidationException,
    TestStaticSchemaServiceException,
    TestStaticSchemaAlreadyExistsError,
    TestStaticSchemaNotFoundError
)

logger = logging.getLogger("api.test_static_schemas")

# Create router for TestStaticSchema endpoints with advanced features
router = APIRouter(prefix="/test-static-schemas", tags=['TestStaticSchema'])


async def get_teststaticschema_service(
    session: AsyncSession = Depends(get_async_session)
) -> TestStaticSchemaService:
    """Dependency to get TestStaticSchema service instance."""
    return TestStaticSchemaService(session)


@router.post(
    "/",
    response_model=TestStaticSchemaResponse,
    status_code=status.HTTP_201_CREATED,
    summary="Create TestStaticSchema (Advanced)",
    description="Create a new teststaticschema with advanced features."
)
async def create_teststaticschema(
    create_data: TestStaticSchemaCreate,
    service: TestStaticSchemaService = Depends(get_teststaticschema_service)
) -> TestStaticSchemaResponse:
    """Create a new teststaticschema with advanced validation."""
    try:
        logger.info(f"API: Creating advanced teststaticschema: {create_data.name}")
        result = await service.create_teststaticschema(create_data)
        logger.info(f"API: Created teststaticschema with ID: {result.id}")
        return result
        
    except TestStaticSchemaValidationException as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail={"message": str(e), "errors": e.details.get("validation_errors", [])}
        )
    except TestStaticSchemaAlreadyExistsError as e:
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail={"message": str(e)}
        )


@router.post(
    "/search",
    response_model=TestStaticSchemaList,
    summary="Advanced Search TestStaticSchemas",
    description="Perform advanced search with complex filtering."
)
async def search_teststaticschemas(
    search_request: TestStaticSchemaSearchRequest,
    service: TestStaticSchemaService = Depends(get_teststaticschema_service)
) -> TestStaticSchemaList:
    """Advanced search with multiple filters and options."""
    try:
        logger.debug("API: Advanced search teststaticschemas")
        result = await service.search_teststaticschemas(search_request)
        return result
        
    except TestStaticSchemaServiceException as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"message": "Advanced search failed", "error": str(e)}
        )


@router.get(
    "/statistics",
    response_model=dict[str, Any],
    summary="Get TestStaticSchema Statistics"
)
async def get_statistics(
    service: TestStaticSchemaService = Depends(get_teststaticschema_service)
) -> dict[str, Any]:
    """Get comprehensive statistics about teststaticschemas."""
    try:
        return await service.get_statistics()
    except TestStaticSchemaServiceException as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"message": "Failed to get statistics", "error": str(e)}
        )