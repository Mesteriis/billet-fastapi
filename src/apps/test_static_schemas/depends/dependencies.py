"""
TestStaticSchema dependencies.

This file was auto-generated by Autogen CLI.
Application: test_static_schemas
Level: Enterprise
Generated at: 2025-06-22T18:01:28.021260
"""

from typing import AsyncGenerator

from fastapi import Depends
from sqlalchemy.ext.asyncio import AsyncSession

from core.database import get_async_session
from apps.test_static_schemas.repo.test_static_schemas_repo import TestStaticSchemaRepository
from apps.test_static_schemas.services.test_static_schemas_service import TestStaticSchemaService


async def get_teststaticschema_repository(
    session: AsyncSession = Depends(get_async_session)
) -> AsyncGenerator[TestStaticSchemaRepository, None]:
    """
    Dependency to get TestStaticSchema repository instance.
    
    This dependency provides a TestStaticSchemaRepository instance
    using the database session from FastAPI's dependency injection.
    
    Args:
        session: Database session from dependency injection
        
    Yields:
        TestStaticSchemaRepository instance
        
    Example:
        >>> @router.get("/teststaticschemas")
        ... async def list_teststaticschemas(
        ...     repo: TestStaticSchemaRepository = Depends(get_teststaticschema_repository)
        ... ):
        ...     return await repo.list_active()
    """
    repository = TestStaticSchemaRepository(session)
    try:
        yield repository
    finally:
        # Repository cleanup if needed
        pass


async def get_teststaticschema_service(
    session: AsyncSession = Depends(get_async_session)
) -> AsyncGenerator[TestStaticSchemaService, None]:
    """
    Dependency to get TestStaticSchema service instance.
    
    This dependency provides a TestStaticSchemaService instance
    using the database session from FastAPI's dependency injection.
    The service includes business logic and validation.
    
    Args:
        session: Database session from dependency injection
        
    Yields:
        TestStaticSchemaService instance
        
    Example:
        >>> @router.post("/teststaticschemas")
        ... async def create_teststaticschema(
        ...     data: TestStaticSchemaCreate,
        ...     service: TestStaticSchemaService = Depends(get_teststaticschema_service)
        ... ):
        ...     return await service.create_teststaticschema(data)
    """
    service = TestStaticSchemaService(session)
    try:
        yield service
    finally:
        # Service cleanup if needed
        pass


# Convenience aliases for shorter imports
TestStaticSchemaRepositoryDep = Depends(get_teststaticschema_repository)
TestStaticSchemaServiceDep = Depends(get_teststaticschema_service)


# Export dependencies for easy importing
__all__ = [
    "get_teststaticschema_repository",
    "get_teststaticschema_service",
    "TestStaticSchemaRepositoryDep",
    "TestStaticSchemaServiceDep"
] 