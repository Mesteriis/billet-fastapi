"""
TestProduct Pydantic schemas.

This file was auto-generated by Autogen CLI.
Application: test_products
Level: BasicCRUD
Generated at: 2025-06-22T15:53:05.029679
"""

from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, ConfigDict


class TestProductBase(BaseModel):
    """
    Base TestProduct schema with common fields.
    
    This schema contains the common fields that are used across
    different TestProduct schemas (create, update, response).
    """
    
    name: str = Field(
        ...,
        min_length=1,
        max_length=255,
        description="TestProduct name",
        examples=["Sample TestProduct", "Test TestProduct"]
    )


class TestProductCreate(TestProductBase):
    """
    Schema for creating a new TestProduct.
    
    This schema defines the required and optional fields
    for creating a new TestProduct instance.
    
    Example:
        >>> data = TestProductCreate(name="New TestProduct")
        >>> # Use with API endpoint: POST /test-products
    """
    pass


class TestProductUpdate(BaseModel):
    """
    Schema for updating an existing TestProduct.
    
    All fields are optional to support partial updates.
    Only the provided fields will be updated.
    
    Example:
        >>> data = TestProductUpdate(name="Updated Name")
        >>> # Use with API endpoint: PUT /test-products/{id}
    """
    
    name: Optional[str] = Field(
        None,
        min_length=1,
        max_length=255,
        description="Updated TestProduct name"
    )


class TestProductResponse(TestProductBase):
    """
    Schema for TestProduct responses.
    
    This schema is used when returning TestProduct data
    from API endpoints. It includes all fields from the database.
    
    Example:
        >>> response = TestProductResponse.model_validate(db_testproduct)
        >>> # Returned from API endpoints: GET /test-products
    """
    
    model_config = ConfigDict(from_attributes=True)
    
    id: int = Field(
        ...,
        description="TestProduct unique identifier",
        examples=[1, 42, 123]
    )
    
    
    is_deleted: bool = Field(
        ...,
        description="Soft delete flag",
        examples=[False, True]
    )
    
    
    
    created_at: datetime = Field(
        ...,
        description="Creation timestamp",
        examples=["2024-01-01T12:00:00Z"]
    )
    
    updated_at: datetime = Field(
        ...,
        description="Last update timestamp",
        examples=["2024-01-01T12:30:00Z"]
    )
    


class TestProductList(BaseModel):
    """
    Schema for paginated TestProduct list responses.
    
    This schema wraps a list of TestProduct objects with
    pagination metadata for API endpoints.
    
    Example:
        >>> response = TestProductList(
        ...     items=[testproduct1, testproduct2],
        ...     total=50,
        ...     page=1,
        ...     size=20
        ... )
    """
    
    items: list[TestProductResponse] = Field(
        ...,
        description="List of testproducts"
    )
    
    total: int = Field(
        ...,
        ge=0,
        description="Total number of testproducts",
        examples=[0, 50, 1000]
    )
    
    
    page: int = Field(
        ...,
        ge=1,
        description="Current page number",
        examples=[1, 2, 10]
    )
    
    size: int = Field(
        ...,
        ge=1,
        le=100,
        description="Number of items per page",
        examples=[10, 20, 50]
    )
    
    pages: int = Field(
        ...,
        ge=0,
        description="Total number of pages",
        examples=[1, 5, 20]
    )
    


# Convenient type aliases for better code readability
TestProductCreateData = TestProductCreate
TestProductUpdateData = TestProductUpdate
TestProductResponseData = TestProductResponse 