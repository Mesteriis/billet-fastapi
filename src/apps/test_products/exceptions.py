"""
TestProduct exceptions.

This file was auto-generated by Autogen CLI.
Application: test_products
Level: BasicCRUD
Generated at: 2025-06-22T15:53:05.029679
"""

from typing import Any, Optional

from core.exceptions.base import AppException


class TestProductException(AppException):
    """
    Base exception for all TestProduct related errors.
    
    This is the base class for all exceptions that can occur
    in the TestProduct domain. It provides consistent
    error handling across the application.
    
    Attributes:
        operation: Name of the operation that failed
        entity_id: ID of the entity involved (if applicable)
        context: Additional context information
        
    Example:
        >>> raise TestProductException(
        ...     "Failed to process testproduct",
        ...     operation="process_testproduct",
        ...     entity_id=123
        ... )
    """
    
    def __init__(
        self,
        message: str,
        operation: Optional[str] = None,
        entity_id: Optional[int] = None,
        context: Optional[dict[str, Any]] = None,
        **kwargs: Any
    ):
        """
        Initialize TestProduct exception.
        
        Args:
            message: Error message
            operation: Name of the failed operation
            entity_id: ID of the affected entity
            context: Additional context information
            **kwargs: Additional exception details
        """
        super().__init__(message, **kwargs)
        self.details = self.details or {}
        
        if operation:
            self.details["operation"] = operation
        if entity_id:
            self.details["entity_id"] = entity_id
        if context:
            self.details.update(context)


class TestProductNotFoundError(TestProductException):
    """
    Exception raised when a TestProduct is not found.
    
    This exception is raised when attempting to retrieve,
    update, or delete a TestProduct that doesn't exist
    in the system.
    
    Example:
        >>> raise TestProductNotFoundError(
        ...     "TestProduct with ID 123 not found", 
        ...     entity_id=123
        ... )
    """
    
    def __init__(
        self,
        message: str = "TestProduct not found",
        entity_id: Optional[int] = None,
        **kwargs: Any
    ):
        super().__init__(
            message=message,
            entity_id=entity_id,
            **kwargs
        )


class TestProductValidationException(TestProductException):
    """
    Exception raised when TestProduct data validation fails.
    
    This exception is raised when the provided data doesn't
    meet the validation requirements for creating or updating
    a TestProduct.
    
    Attributes:
        validation_errors: List of specific validation errors
        
    Example:
        >>> raise TestProductValidationException(
        ...     "Invalid testproduct data",
        ...     validation_errors=[
        ...         {"field": "name", "message": "Name is required"},
        ...         {"field": "name", "message": "Name must be unique"}
        ...     ]
        ... )
    """
    
    def __init__(
        self,
        message: str = "TestProduct validation failed",
        validation_errors: Optional[list[dict[str, str]]] = None,
        **kwargs: Any
    ):
        super().__init__(message=message, **kwargs)
        if validation_errors:
            self.details["validation_errors"] = validation_errors


class TestProductServiceException(TestProductException):
    """
    Exception raised when a TestProduct service operation fails.
    
    This exception is raised when an error occurs in the
    service layer during TestProduct operations, such as
    database errors, business logic failures, or external
    service failures.
    
    Example:
        >>> raise TestProductServiceException(
        ...     "Failed to create testproduct", 
        ...     operation="create_testproduct",
        ...     original_error=str(e)
        ... )
    """
    
    def __init__(
        self,
        message: str = "TestProduct service operation failed",
        operation: Optional[str] = None,
        original_error: Optional[str] = None,
        **kwargs: Any
    ):
        super().__init__(message=message, operation=operation, **kwargs)
        if original_error:
            self.details["original_error"] = original_error


class TestProductAlreadyExistsError(TestProductException):
    """
    Exception raised when attempting to create a TestProduct that already exists.
    
    This exception is raised when trying to create a TestProduct
    with a name or other unique identifier that already exists
    in the system.
    
    Example:
        >>> raise TestProductAlreadyExistsError(
        ...     "TestProduct with name 'Sample' already exists",
        ...     existing_name="Sample"
        ... )
    """
    
    def __init__(
        self,
        message: str = "TestProduct already exists",
        existing_name: Optional[str] = None,
        existing_id: Optional[int] = None,
        **kwargs: Any
    ):
        super().__init__(message=message, **kwargs)
        if existing_name:
            self.details["existing_name"] = existing_name
        if existing_id:
            self.details["existing_id"] = existing_id


class TestProductDeleteError(TestProductException):
    """
    Exception raised when TestProduct deletion fails.
    
    This exception is raised when an error occurs while
    trying to delete a TestProduct, such as foreign
    key constraints or business rule violations.
    
    Example:
        >>> raise TestProductDeleteError(
        ...     "Cannot delete testproduct with active references",
        ...     entity_id=123,
        ...     constraint="foreign_key_constraint"
        ... )
    """
    
    def __init__(
        self,
        message: str = "Failed to delete TestProduct",
        entity_id: Optional[int] = None,
        constraint: Optional[str] = None,
        **kwargs: Any
    ):
        super().__init__(message=message, entity_id=entity_id, **kwargs)
        if constraint:
            self.details["constraint"] = constraint


# Export all exceptions for easy importing
__all__ = [
    "TestProductException",
    "TestProductNotFoundError", 
    "TestProductValidationException",
    "TestProductServiceException",
    "TestProductAlreadyExistsError",
    "TestProductDeleteError"
] 