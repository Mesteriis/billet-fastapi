"""
TestProduct API tests.

This file was auto-generated by Autogen CLI.
Application: test_products
Level: BasicCRUD
Generated at: 2025-06-22T15:53:05.029679
"""

import pytest
from fastapi import status

from apps.test_products.schemas.test_products_schemas import TestProductCreate, TestProductUpdate


class TestTestProductAPI:
    """Test suite for TestProduct API endpoints."""

    @pytest.mark.asyncio
    async def test_create_testproduct(self, api_client):
        """Test creating a new testproduct."""
        # Prepare test data
        create_data = {
            "name": "Test TestProduct"
        }
        
        # Make request
        response = await api_client.post(
            api_client.url_for("create_testproduct"),
            json=create_data
        )
        
        # Assertions
        assert response.status_code == status.HTTP_201_CREATED
        data = response.json()
        assert data["name"] == create_data["name"]
        assert "id" in data
        
        assert "created_at" in data
        assert "updated_at" in data
        

    @pytest.mark.asyncio
    async def test_get_testproduct(self, api_client, testproduct_factory):
        """Test retrieving a testproduct by ID."""
        # Create test testproduct
        testproduct = await testproduct_factory.create(name="Get Test TestProduct")
        
        # Make request
        response = await api_client.get(
            api_client.url_for("get_testproduct", testproduct_id=testproduct.id)
        )
        
        # Assertions
        assert response.status_code == status.HTTP_200_OK
        data = response.json()
        assert data["id"] == testproduct.id
        assert data["name"] == testproduct.name

    @pytest.mark.asyncio
    async def test_get_testproduct_not_found(self, api_client):
        """Test retrieving a non-existent testproduct."""
        response = await api_client.get(
            api_client.url_for("get_testproduct", testproduct_id=99999)
        )
        
        assert response.status_code == status.HTTP_404_NOT_FOUND
        data = response.json()
        assert "not found" in data["detail"]["message"].lower()

    @pytest.mark.asyncio 
    async def test_update_testproduct(self, api_client, testproduct_factory):
        """Test updating an existing testproduct."""
        # Create test testproduct
        testproduct = await testproduct_factory.create(name="Update Test TestProduct")
        
        # Prepare update data
        update_data = {
            "name": "Updated TestProduct"
        }
        
        # Make request
        response = await api_client.put(
            api_client.url_for("update_testproduct", testproduct_id=testproduct.id),
            json=update_data
        )
        
        # Assertions
        assert response.status_code == status.HTTP_200_OK
        data = response.json()
        assert data["id"] == testproduct.id
        assert data["name"] == update_data["name"]

    @pytest.mark.asyncio
    async def test_update_testproduct_not_found(self, api_client):
        """Test updating a non-existent testproduct."""
        update_data = {"name": "Non-existent"}
        
        response = await api_client.put(
            api_client.url_for("update_testproduct", testproduct_id=99999),
            json=update_data
        )
        
        assert response.status_code == status.HTTP_404_NOT_FOUND

    @pytest.mark.asyncio
    async def test_delete_testproduct(self, api_client, testproduct_factory):
        """Test deleting a testproduct."""
        # Create test testproduct
        testproduct = await testproduct_factory.create(name="Delete Test TestProduct")
        
        # Make request
        response = await api_client.delete(
            api_client.url_for("delete_testproduct", testproduct_id=testproduct.id)
        )
        
        # Assertions
        assert response.status_code == status.HTTP_204_NO_CONTENT

    @pytest.mark.asyncio
    async def test_delete_testproduct_not_found(self, api_client):
        """Test deleting a non-existent testproduct."""
        response = await api_client.delete(
            api_client.url_for("delete_testproduct", testproduct_id=99999)
        )
        
        assert response.status_code == status.HTTP_404_NOT_FOUND

    @pytest.mark.asyncio
    async def test_list_testproducts(self, api_client, testproduct_factory):
        """Test listing testproducts with pagination."""
        # Create test testproducts
        testproducts = await testproduct_factory.create_batch(5, name_prefix="List Test")
        
        # Make request
        response = await api_client.get(
            api_client.url_for("list_testproducts"),
            params={"page": 1, "size": 10}
        )
        
        # Assertions
        assert response.status_code == status.HTTP_200_OK
        data = response.json()
        assert "items" in data
        assert "total" in data
        assert len(data["items"]) >= 5
        
        assert "page" in data
        assert "size" in data
        assert "pages" in data
        

    @pytest.mark.asyncio
    async def test_list_testproducts_with_filter(self, api_client, testproduct_factory):
        """Test listing testproducts with name filter."""
        # Create test testproducts
        await testproduct_factory.create(name="Filter Match TestProduct")
        await testproduct_factory.create(name="No Match TestProduct")
        
        # Make request with filter
        response = await api_client.get(
            api_client.url_for("list_testproducts"),
            params={"name_filter": "Filter Match"}
        )
        
        # Assertions
        assert response.status_code == status.HTTP_200_OK
        data = response.json()
        assert len(data["items"]) >= 1
        assert any("Filter Match" in item["name"] for item in data["items"])

    @pytest.mark.asyncio
    async def test_get_testproduct_by_name(self, api_client, testproduct_factory):
        """Test retrieving a testproduct by name."""
        # Create test testproduct
        testproduct = await testproduct_factory.create(name="Name Search TestProduct")
        
        # Make request
        response = await api_client.get(
            api_client.url_for("get_testproduct_by_name", name=testproduct.name)
        )
        
        # Assertions
        assert response.status_code == status.HTTP_200_OK
        data = response.json()
        assert data["id"] == testproduct.id
        assert data["name"] == testproduct.name

    @pytest.mark.asyncio
    async def test_get_testproduct_by_name_not_found(self, api_client):
        """Test retrieving a testproduct by non-existent name."""
        response = await api_client.get(
            api_client.url_for("get_testproduct_by_name", name="Non-existent TestProduct")
        )
        
        assert response.status_code == status.HTTP_404_NOT_FOUND

    @pytest.mark.asyncio
    async def test_create_testproduct_validation_error(self, api_client):
        """Test creating a testproduct with invalid data."""
        # Test empty name
        response = await api_client.post(
            api_client.url_for("create_testproduct"),
            json={"name": ""}
        )
        
        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY

    @pytest.mark.asyncio
    async def test_create_duplicate_testproduct(self, api_client, testproduct_factory):
        """Test creating a testproduct with duplicate name."""
        # Create first testproduct
        existing = await testproduct_factory.create(name="Duplicate Test TestProduct")
        
        # Try to create another with same name
        response = await api_client.post(
            api_client.url_for("create_testproduct"),
            json={"name": existing.name}
        )
        
        # Should fail with validation error
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        data = response.json()
        assert "already exists" in data["detail"]["message"].lower() 