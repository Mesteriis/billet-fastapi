"""
TestProduct dependencies.

This file was auto-generated by Autogen CLI.
Application: test_products
Level: BasicCRUD
Generated at: 2025-06-22T15:53:05.029679
"""

from typing import AsyncGenerator

from fastapi import Depends
from sqlalchemy.ext.asyncio import AsyncSession

from core.database import get_async_session
from apps.test_products.repo.test_products_repo import TestProductRepository
from apps.test_products.services.test_products_service import TestProductService


async def get_testproduct_repository(
    session: AsyncSession = Depends(get_async_session)
) -> AsyncGenerator[TestProductRepository, None]:
    """
    Dependency to get TestProduct repository instance.
    
    This dependency provides a TestProductRepository instance
    using the database session from FastAPI's dependency injection.
    
    Args:
        session: Database session from dependency injection
        
    Yields:
        TestProductRepository instance
        
    Example:
        >>> @router.get("/testproducts")
        ... async def list_testproducts(
        ...     repo: TestProductRepository = Depends(get_testproduct_repository)
        ... ):
        ...     return await repo.list_active()
    """
    repository = TestProductRepository(session)
    try:
        yield repository
    finally:
        # Repository cleanup if needed
        pass


async def get_testproduct_service(
    session: AsyncSession = Depends(get_async_session)
) -> AsyncGenerator[TestProductService, None]:
    """
    Dependency to get TestProduct service instance.
    
    This dependency provides a TestProductService instance
    using the database session from FastAPI's dependency injection.
    The service includes business logic and validation.
    
    Args:
        session: Database session from dependency injection
        
    Yields:
        TestProductService instance
        
    Example:
        >>> @router.post("/testproducts")
        ... async def create_testproduct(
        ...     data: TestProductCreate,
        ...     service: TestProductService = Depends(get_testproduct_service)
        ... ):
        ...     return await service.create_testproduct(data)
    """
    service = TestProductService(session)
    try:
        yield service
    finally:
        # Service cleanup if needed
        pass


# Convenience aliases for shorter imports
TestProductRepositoryDep = Depends(get_testproduct_repository)
TestProductServiceDep = Depends(get_testproduct_service)


# Export dependencies for easy importing
__all__ = [
    "get_testproduct_repository",
    "get_testproduct_service",
    "TestProductRepositoryDep",
    "TestProductServiceDep"
] 