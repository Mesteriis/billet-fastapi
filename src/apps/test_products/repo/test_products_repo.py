"""
TestProduct repository implementation.

This file was auto-generated by Autogen CLI.
Application: test_products
Level: BasicCRUD
Generated at: 2025-06-22T15:53:05.029679
"""

from typing import Optional

from sqlalchemy.ext.asyncio import AsyncSession

from core.base.repo import SimpleRepository
from apps.test_products.models.test_products_models import TestProduct
from apps.test_products.schemas.test_products_schemas import (
    TestProductCreate,
    TestProductUpdate,
    TestProductResponse,
    TestProductList
)


class TestProductRepository(SimpleRepository[TestProduct, TestProductCreate, TestProductUpdate]):
    """
    Repository for TestProduct entities with basic CRUD operations.
    
    This repository provides basic CRUD functionality using SimpleRepository
    which includes:
    - Basic CRUD operations (create, get, update, remove, restore, list, count)
    - Simple filters (eq, ne, lt, lte, gt, gte, isnull, isnotnull)
    - Soft delete support
    - Pagination support
    
    Example:
        >>> async with async_session() as session:
        ...     repo = TestProductRepository(session)
        ...     
        ...     # Create new testproduct
        ...     create_data = TestProductCreate(name="Test TestProduct")
        ...     testproduct = await repo.create(create_data)
        ...     
        ...     # Get by ID
        ...     found = await repo.get(testproduct.id)
        ...     
        ...     # List with filters
        ...     results = await repo.list(filters={"name__ilike": "%test%"})
        ...     
        ...     # Update
        ...     update_data = TestProductUpdate(name="Updated Name")
        ...     updated = await repo.update(testproduct.id, update_data)
        ...     
        ...     # Delete
        ...     await repo.remove(testproduct.id)
    """

    def __init__(self, session: AsyncSession):
        """
        Initialize TestProduct repository.
        
        Args:
            session: Database session for operations
        """
        super().__init__(model=TestProduct, session=session)

    async def get_by_name(self, name: str) -> Optional[TestProduct]:
        """
        Get testproduct by name.
        
        Args:
            name: The name to search for
            
        Returns:
            TestProduct instance if found, None otherwise
            
        Example:
            >>> testproduct = await repo.get_by_name("Sample TestProduct")
        """
        return await self.get_by(name=name)

    async def list_active(
        self,
        page: int = 1,
        size: int = 10,
        filters: Optional[dict] = None
    ) -> TestProductList:
        """
        Get list of active (non-deleted) testproducts with pagination.
        
        Args:
            page: Page number (1-based)
            size: Number of items per page
            filters: Additional filters to apply
            
        Returns:
            TestProductList with paginated results
            
        Example:
            >>> result = await repo.list_active(page=1, size=20)
            >>> print(f"Found {result.total} testproducts")
            >>> for testproduct in result.items:
            ...     print(testproduct.name)
        """
        # Prepare filters
        active_filters = filters or {}
        
        active_filters["is_deleted"] = False
        
        
        # Get paginated results
        items, total = await self.list(
            page=page,
            size=size,
            filters=active_filters
        )
        
        # Calculate pagination metadata
        pages = (total + size - 1) // size  # Ceiling division
        
        return TestProductList(
            items=[TestProductResponse.model_validate(item) for item in items],
            total=total,
            
            page=page,
            size=size,
            pages=pages
            
        )

    async def count_active(self) -> int:
        """
        Count active (non-deleted) testproducts.
        
        Returns:
            Number of active testproducts
            
        Example:
            >>> count = await repo.count_active()
            >>> print(f"Active testproducts: {count}")
        """
        
        return await self.count(filters={"is_deleted": False})
        

    async def exists_by_name(self, name: str) -> bool:
        """
        Check if testproduct with given name exists.
        
        Args:
            name: The name to check
            
        Returns:
            True if testproduct exists, False otherwise
            
        Example:
            >>> exists = await repo.exists_by_name("Sample TestProduct")
            >>> if exists:
            ...     print("TestProduct already exists")
        """
        return await self.exists(filters={"name": name, "is_deleted": False})

    
    async def soft_delete(self, entity_id: int) -> Optional[TestProduct]:
        """
        Soft delete testproduct by ID.
        
        Args:
            entity_id: ID of the testproduct to soft delete
            
        Returns:
            Soft deleted TestProduct instance if found
            
        Example:
            >>> deleted = await repo.soft_delete(123)
            >>> if deleted:
            ...     print(f"Soft deleted: {deleted.name}")
        """
        update_data = TestProductUpdate(is_deleted=True)
        return await self.update(entity_id, update_data)

    async def restore_from_soft_delete(self, entity_id: int) -> Optional[TestProduct]:
        """
        Restore testproduct from soft delete.
        
        Args:
            entity_id: ID of the testproduct to restore
            
        Returns:
            Restored TestProduct instance if found
            
        Example:
            >>> restored = await repo.restore_from_soft_delete(123)
            >>> if restored:
            ...     print(f"Restored: {restored.name}")
        """
        update_data = TestProductUpdate(is_deleted=False)
        return await self.update(entity_id, update_data)
     