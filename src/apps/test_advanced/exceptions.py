"""
TestAdvanced exceptions.

This file was auto-generated by Autogen CLI.
Application: test_advanced
Level: Advanced
Generated at: 2025-06-22T16:30:22.531632
"""

from typing import Any, Optional

from core.exceptions.base import AppException


class TestAdvancedException(AppException):
    """
    Base exception for all TestAdvanced related errors.
    
    This is the base class for all exceptions that can occur
    in the TestAdvanced domain. It provides consistent
    error handling across the application.
    
    Attributes:
        operation: Name of the operation that failed
        entity_id: ID of the entity involved (if applicable)
        context: Additional context information
        
    Example:
        >>> raise TestAdvancedException(
        ...     "Failed to process testadvanced",
        ...     operation="process_testadvanced",
        ...     entity_id=123
        ... )
    """
    
    def __init__(
        self,
        message: str,
        operation: Optional[str] = None,
        entity_id: Optional[int] = None,
        context: Optional[dict[str, Any]] = None,
        **kwargs: Any
    ):
        """
        Initialize TestAdvanced exception.
        
        Args:
            message: Error message
            operation: Name of the failed operation
            entity_id: ID of the affected entity
            context: Additional context information
            **kwargs: Additional exception details
        """
        super().__init__(message, **kwargs)
        self.details = self.details or {}
        
        if operation:
            self.details["operation"] = operation
        if entity_id:
            self.details["entity_id"] = entity_id
        if context:
            self.details.update(context)


class TestAdvancedNotFoundError(TestAdvancedException):
    """
    Exception raised when a TestAdvanced is not found.
    
    This exception is raised when attempting to retrieve,
    update, or delete a TestAdvanced that doesn't exist
    in the system.
    
    Example:
        >>> raise TestAdvancedNotFoundError(
        ...     "TestAdvanced with ID 123 not found", 
        ...     entity_id=123
        ... )
    """
    
    def __init__(
        self,
        message: str = "TestAdvanced not found",
        entity_id: Optional[int] = None,
        **kwargs: Any
    ):
        super().__init__(
            message=message,
            entity_id=entity_id,
            **kwargs
        )


class TestAdvancedValidationException(TestAdvancedException):
    """
    Exception raised when TestAdvanced data validation fails.
    
    This exception is raised when the provided data doesn't
    meet the validation requirements for creating or updating
    a TestAdvanced.
    
    Attributes:
        validation_errors: List of specific validation errors
        
    Example:
        >>> raise TestAdvancedValidationException(
        ...     "Invalid testadvanced data",
        ...     validation_errors=[
        ...         {"field": "name", "message": "Name is required"},
        ...         {"field": "name", "message": "Name must be unique"}
        ...     ]
        ... )
    """
    
    def __init__(
        self,
        message: str = "TestAdvanced validation failed",
        validation_errors: Optional[list[dict[str, str]]] = None,
        **kwargs: Any
    ):
        super().__init__(message=message, **kwargs)
        if validation_errors:
            self.details["validation_errors"] = validation_errors


class TestAdvancedServiceException(TestAdvancedException):
    """
    Exception raised when a TestAdvanced service operation fails.
    
    This exception is raised when an error occurs in the
    service layer during TestAdvanced operations, such as
    database errors, business logic failures, or external
    service failures.
    
    Example:
        >>> raise TestAdvancedServiceException(
        ...     "Failed to create testadvanced", 
        ...     operation="create_testadvanced",
        ...     original_error=str(e)
        ... )
    """
    
    def __init__(
        self,
        message: str = "TestAdvanced service operation failed",
        operation: Optional[str] = None,
        original_error: Optional[str] = None,
        **kwargs: Any
    ):
        super().__init__(message=message, operation=operation, **kwargs)
        if original_error:
            self.details["original_error"] = original_error


class TestAdvancedAlreadyExistsError(TestAdvancedException):
    """
    Exception raised when attempting to create a TestAdvanced that already exists.
    
    This exception is raised when trying to create a TestAdvanced
    with a name or other unique identifier that already exists
    in the system.
    
    Example:
        >>> raise TestAdvancedAlreadyExistsError(
        ...     "TestAdvanced with name 'Sample' already exists",
        ...     existing_name="Sample"
        ... )
    """
    
    def __init__(
        self,
        message: str = "TestAdvanced already exists",
        existing_name: Optional[str] = None,
        existing_id: Optional[int] = None,
        **kwargs: Any
    ):
        super().__init__(message=message, **kwargs)
        if existing_name:
            self.details["existing_name"] = existing_name
        if existing_id:
            self.details["existing_id"] = existing_id


class TestAdvancedDeleteError(TestAdvancedException):
    """
    Exception raised when TestAdvanced deletion fails.
    
    This exception is raised when an error occurs while
    trying to delete a TestAdvanced, such as foreign
    key constraints or business rule violations.
    
    Example:
        >>> raise TestAdvancedDeleteError(
        ...     "Cannot delete testadvanced with active references",
        ...     entity_id=123,
        ...     constraint="foreign_key_constraint"
        ... )
    """
    
    def __init__(
        self,
        message: str = "Failed to delete TestAdvanced",
        entity_id: Optional[int] = None,
        constraint: Optional[str] = None,
        **kwargs: Any
    ):
        super().__init__(message=message, entity_id=entity_id, **kwargs)
        if constraint:
            self.details["constraint"] = constraint


# Export all exceptions for easy importing
__all__ = [
    "TestAdvancedException",
    "TestAdvancedNotFoundError", 
    "TestAdvancedValidationException",
    "TestAdvancedServiceException",
    "TestAdvancedAlreadyExistsError",
    "TestAdvancedDeleteError"
] 