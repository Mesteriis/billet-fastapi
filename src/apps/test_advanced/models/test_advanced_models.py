"""
TestAdvanced model definition.

This file was auto-generated by Autogen CLI.
Application: test_advanced
Level: Advanced
Generated at: 2025-06-22T16:30:22.531632
"""

from sqlalchemy import String, Boolean, DateTime, Text, Index
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy.sql import func

from core.base.models import BaseModel


class TestAdvanced(BaseModel):
    """
    TestAdvanced model for test_advanced application (Advanced level).

    This model provides advanced functionality with the following features:
    - Soft delete support
    - Automatic timestamps (created_at, updated_at)
    - Pagination support
    - Full-text search capabilities
    - Advanced filtering and querying
    - Optimized database indexes
    - Extended metadata support

    Example:
        Create a new testadvanced with advanced features:
        >>> testadvanced = TestAdvanced(
        ...     name="Advanced TestAdvanced",
        ...     description="Detailed description",
        ...     tags=["tag1", "tag2"]
        ... )
        >>> session.add(testadvanced)
        >>> await session.commit()

    Attributes:
        name: The name of the testadvanced
        description: Detailed description for full-text search
        tags: JSON array of tags for categorization
        is_deleted: Soft delete flag
        created_at: Creation timestamp
        updated_at: Last update timestamp
    """

    # Main fields
    name: Mapped[str] = mapped_column(
        String(255), 
        nullable=False, 
        comment="TestAdvanced name",
        index=True
    )

    # Advanced fields
    description: Mapped[str | None] = mapped_column(
        Text,
        nullable=True,
        comment="Detailed description for search"
    )

    tags: Mapped[str | None] = mapped_column(
        Text,  # JSON array as text
        nullable=True,
        comment="Tags for categorization (JSON array)"
    )

    # Metadata fields
    priority: Mapped[int] = mapped_column(
        default=0,
        comment="Priority level (0-10)",
        index=True
    )

    status: Mapped[str] = mapped_column(
        String(50),
        default="active",
        comment="Status (active, inactive, archived)",
        index=True
    )

    
    # Soft delete support
    is_deleted: Mapped[bool] = mapped_column(
        Boolean,
        default=False,
        nullable=False,
        comment="Soft delete flag",
        index=True
    )
    

    
    # Timestamps
    created_at: Mapped[DateTime] = mapped_column(
        DateTime(timezone=True),
        server_default=func.now(),
        comment="Creation timestamp",
        index=True  # Indexed for time-based queries
    )
    
    updated_at: Mapped[DateTime] = mapped_column(
        DateTime(timezone=True),
        server_default=func.now(),
        onupdate=func.now(),
        comment="Last update timestamp",
        index=True
    )
    

    # Advanced indexes for optimized queries
    __table_args__ = (
        # Composite index for common filter combinations
        Index('ix_test_advanced_status_priority', 'status', 'priority'),
        Index('ix_test_advanced_name_status', 'name', 'status'),
        
        Index('ix_test_advanced_active_status', 'is_deleted', 'status'),
        
        
        Index('ix_test_advanced_created_status', 'created_at', 'status'),
        
        # Full-text search index (PostgreSQL specific)
        # Index('ix_test_advanced_search', 'name', 'description', postgresql_using='gin'),
    )

    def __repr__(self) -> str:
        """String representation of TestAdvanced."""
        return f"<TestAdvanced(id={self.id}, name='{self.name}', status='{self.status}')>"

    def __str__(self) -> str:
        """Human-readable string representation."""
        return self.name

    
    def soft_delete(self) -> None:
        """Mark this testadvanced as deleted."""
        self.is_deleted = True
        self.status = "deleted"

    def restore(self) -> None:
        """Restore this testadvanced from soft delete."""
        self.is_deleted = False
        self.status = "active"

    @property
    def is_active(self) -> bool:
        """Check if testadvanced is active (not deleted)."""
        return not self.is_deleted and self.status == "active"
    

    def set_priority(self, priority: int) -> None:
        """Set priority with validation."""
        if 0 <= priority <= 10:
            self.priority = priority
        else:
            raise ValueError("Priority must be between 0 and 10")

    def add_tag(self, tag: str) -> None:
        """Add a tag to the tags list."""
        if self.tags:
            import json
            tags_list = json.loads(self.tags)
            if tag not in tags_list:
                tags_list.append(tag)
                self.tags = json.dumps(tags_list)
        else:
            import json
            self.tags = json.dumps([tag])

    def remove_tag(self, tag: str) -> None:
        """Remove a tag from the tags list."""
        if self.tags:
            import json
            tags_list = json.loads(self.tags)
            if tag in tags_list:
                tags_list.remove(tag)
                self.tags = json.dumps(tags_list) if tags_list else None

    @property
    def tags_list(self) -> list[str]:
        """Get tags as a list."""
        if self.tags:
            import json
            return json.loads(self.tags)
        return []

    def matches_search(self, query: str) -> bool:
        """Check if entity matches search query."""
        query_lower = query.lower()
        return (
            query_lower in self.name.lower() or
            (self.description and query_lower in self.description.lower()) or
            any(query_lower in tag.lower() for tag in self.tags_list)
        ) 