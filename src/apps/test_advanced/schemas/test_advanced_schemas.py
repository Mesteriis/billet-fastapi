"""
TestAdvanced Pydantic schemas for Advanced level.

This file was auto-generated by Autogen CLI.
Application: test_advanced
Level: Advanced
Generated at: 2025-06-22T16:30:22.531632
"""

from datetime import datetime
from typing import Optional, Literal
from enum import Enum

from pydantic import BaseModel, Field, ConfigDict, validator


class TestAdvancedStatus(str, Enum):
    """TestAdvanced status enumeration."""
    ACTIVE = "active"
    INACTIVE = "inactive"
    ARCHIVED = "archived"
    DRAFT = "draft"


class TestAdvancedBase(BaseModel):
    """
    Base TestAdvanced schema with common fields for Advanced level.
    
    This schema contains the common fields that are used across
    different TestAdvanced schemas with advanced features.
    """
    
    name: str = Field(
        ...,
        min_length=1,
        max_length=255,
        description="TestAdvanced name",
        examples=["Advanced TestAdvanced", "Premium TestAdvanced"]
    )

    description: Optional[str] = Field(
        None,
        max_length=2000,
        description="Detailed description for full-text search",
        examples=["This is a comprehensive description of the testadvanced"]
    )

    tags: Optional[list[str]] = Field(
        None,
        description="List of tags for categorization",
        examples=[["category", "important"], ["tag1", "tag2", "tag3"]]
    )

    priority: int = Field(
        default=0,
        ge=0,
        le=10,
        description="Priority level (0-10, where 10 is highest)",
        examples=[0, 5, 10]
    )

    status: TestAdvancedStatus = Field(
        default=TestAdvancedStatus.ACTIVE,
        description="Current status of the testadvanced",
        examples=["active", "inactive", "archived"]
    )

    @validator('tags')
    def validate_tags(cls, v):
        """Validate tags list."""
        if v is not None:
            # Remove duplicates and empty strings
            v = list(set(tag.strip() for tag in v if tag.strip()))
            # Limit number of tags
            if len(v) > 10:
                raise ValueError("Maximum 10 tags allowed")
            # Validate tag length
            for tag in v:
                if len(tag) > 50:
                    raise ValueError("Each tag must be 50 characters or less")
        return v

    @validator('description')
    def validate_description(cls, v):
        """Validate description field."""
        if v is not None:
            v = v.strip()
            if not v:
                return None
        return v


class TestAdvancedCreate(TestAdvancedBase):
    """
    Schema for creating a new TestAdvanced with Advanced features.
    
    This schema defines the required and optional fields
    for creating a new TestAdvanced instance with extended validation.
    
    Example:
        >>> data = TestAdvancedCreate(
        ...     name="New Advanced TestAdvanced",
        ...     description="Detailed description",
        ...     tags=["important", "business"],
        ...     priority=8,
        ...     status="active"
        ... )
        >>> # Use with API endpoint: POST /test-advanced
    """
    pass


class TestAdvancedUpdate(BaseModel):
    """
    Schema for updating an existing TestAdvanced (Advanced level).
    
    All fields are optional to support partial updates.
    Only the provided fields will be updated.
    
    Example:
        >>> data = TestAdvancedUpdate(
        ...     name="Updated Name",
        ...     priority=9,
        ...     tags=["updated", "important"]
        ... )
        >>> # Use with API endpoint: PUT /test-advanced/{id}
    """
    
    name: Optional[str] = Field(
        None,
        min_length=1,
        max_length=255,
        description="Updated TestAdvanced name"
    )

    description: Optional[str] = Field(
        None,
        max_length=2000,
        description="Updated description"
    )

    tags: Optional[list[str]] = Field(
        None,
        description="Updated tags list"
    )

    priority: Optional[int] = Field(
        None,
        ge=0,
        le=10,
        description="Updated priority level"
    )

    status: Optional[TestAdvancedStatus] = Field(
        None,
        description="Updated status"
    )

    @validator('tags')
    def validate_tags(cls, v):
        """Validate tags list."""
        if v is not None:
            v = list(set(tag.strip() for tag in v if tag.strip()))
            if len(v) > 10:
                raise ValueError("Maximum 10 tags allowed")
            for tag in v:
                if len(tag) > 50:
                    raise ValueError("Each tag must be 50 characters or less")
        return v


class TestAdvancedResponse(TestAdvancedBase):
    """
    Schema for TestAdvanced responses (Advanced level).
    
    This schema is used when returning TestAdvanced data
    from API endpoints. It includes all fields from the database
    plus computed fields and metadata.
    
    Example:
        >>> response = TestAdvancedResponse.model_validate(db_testadvanced)
        >>> # Returned from API endpoints: GET /test-advanced
    """
    
    model_config = ConfigDict(from_attributes=True)
    
    id: int = Field(
        ...,
        description="TestAdvanced unique identifier",
        examples=[1, 42, 123]
    )
    
    
    is_deleted: bool = Field(
        ...,
        description="Soft delete flag",
        examples=[False, True]
    )
    
    
    
    created_at: datetime = Field(
        ...,
        description="Creation timestamp",
        examples=["2024-01-01T12:00:00Z"]
    )
    
    updated_at: datetime = Field(
        ...,
        description="Last update timestamp",
        examples=["2024-01-01T12:30:00Z"]
    )
    

    # Computed fields
    tags_count: Optional[int] = Field(
        None,
        description="Number of tags assigned",
        examples=[0, 3, 5]
    )

    is_high_priority: bool = Field(
        default=False,
        description="Whether this testadvanced has high priority (>= 7)",
        examples=[False, True]
    )

    search_relevance: Optional[float] = Field(
        None,
        description="Search relevance score (0.0 - 1.0)",
        examples=[0.85, 0.92, 1.0]
    )


class TestAdvancedList(BaseModel):
    """
    Schema for paginated TestAdvanced list responses (Advanced level).
    
    This schema wraps a list of TestAdvanced objects with
    pagination metadata and advanced filtering information.
    
    Example:
        >>> response = TestAdvancedList(
        ...     items=[testadvanced1, testadvanced2],
        ...     total=50,
        ...     page=1,
        ...     size=20,
        ...     filters_applied={"status": "active", "priority_gte": 5}
        ... )
    """
    
    items: list[TestAdvancedResponse] = Field(
        ...,
        description="List of testadvanceds"
    )
    
    total: int = Field(
        ...,
        ge=0,
        description="Total number of testadvanceds matching filters",
        examples=[0, 50, 1000]
    )
    
    
    page: int = Field(
        ...,
        ge=1,
        description="Current page number",
        examples=[1, 2, 10]
    )
    
    size: int = Field(
        ...,
        ge=1,
        le=100,
        description="Number of items per page",
        examples=[10, 20, 50]
    )
    
    pages: int = Field(
        ...,
        ge=0,
        description="Total number of pages",
        examples=[1, 5, 20]
    )
    

    # Advanced metadata
    filters_applied: dict = Field(
        default_factory=dict,
        description="Applied filters summary",
        examples=[{"status": "active", "priority_gte": 5}]
    )

    facets: Optional[dict] = Field(
        None,
        description="Faceted search results (counts by category)",
        examples=[{"status": {"active": 45, "inactive": 5}, "priority": {"high": 20, "low": 30}}]
    )

    search_time_ms: Optional[float] = Field(
        None,
        description="Search execution time in milliseconds",
        examples=[12.5, 45.2, 123.8]
    )


class TestAdvancedSearchRequest(BaseModel):
    """
    Schema for advanced search requests.
    
    This schema defines the structure for complex search queries
    with multiple filters and sorting options.
    """
    
    # Text search
    query: Optional[str] = Field(
        None,
        max_length=500,
        description="Full-text search query",
        examples=["important project", "business critical"]
    )

    # Filters
    status: Optional[list[TestAdvancedStatus]] = Field(
        None,
        description="Filter by status values",
        examples=[["active", "draft"]]
    )

    priority_gte: Optional[int] = Field(
        None,
        ge=0,
        le=10,
        description="Minimum priority level",
        examples=[5, 7, 8]
    )

    priority_lte: Optional[int] = Field(
        None,
        ge=0,
        le=10,
        description="Maximum priority level",
        examples=[3, 5, 9]
    )

    tags: Optional[list[str]] = Field(
        None,
        description="Filter by tags (OR logic)",
        examples=[["important", "urgent"]]
    )

    created_after: Optional[datetime] = Field(
        None,
        description="Filter by creation date (after)",
        examples=["2024-01-01T00:00:00Z"]
    )

    created_before: Optional[datetime] = Field(
        None,
        description="Filter by creation date (before)",
        examples=["2024-12-31T23:59:59Z"]
    )

    # Sorting
    sort_by: Optional[str] = Field(
        default="created_at",
        description="Sort field",
        examples=["name", "priority", "created_at", "updated_at"]
    )

    sort_order: Literal["asc", "desc"] = Field(
        default="desc",
        description="Sort order",
        examples=["asc", "desc"]
    )

    # Pagination
    page: int = Field(
        default=1,
        ge=1,
        description="Page number",
        examples=[1, 2, 10]
    )

    size: int = Field(
        default=20,
        ge=1,
        le=100,
        description="Items per page",
        examples=[10, 20, 50]
    )

    # Advanced options
    include_facets: bool = Field(
        default=False,
        description="Include faceted search results",
        examples=[False, True]
    )


# Convenient type aliases for better code readability
TestAdvancedCreateData = TestAdvancedCreate
TestAdvancedUpdateData = TestAdvancedUpdate
TestAdvancedResponseData = TestAdvancedResponse
TestAdvancedSearchData = TestAdvancedSearchRequest 