"""
TestAdvanced API routes for Advanced level.

This file was auto-generated by Autogen CLI.
Application: test_advanced
Level: Advanced
Generated at: 2025-06-22T16:30:22.531632
"""

from typing import Optional, Any
import logging

from fastapi import APIRouter, Depends, HTTPException, Query, Body, status
from sqlalchemy.ext.asyncio import AsyncSession

from core.database import get_async_session
from apps.test_advanced.services.test_advanced_service import TestAdvancedService
from apps.test_advanced.schemas.test_advanced_schemas import (
    TestAdvancedCreate,
    TestAdvancedUpdate,
    TestAdvancedResponse,
    TestAdvancedList,
    TestAdvancedSearchRequest,
    TestAdvancedStatus
)
from apps.test_advanced.exceptions import (
    TestAdvancedValidationException,
    TestAdvancedServiceException,
    TestAdvancedAlreadyExistsError,
    TestAdvancedNotFoundError
)

logger = logging.getLogger("api.test_advanced")

# Create router for TestAdvanced endpoints with advanced features
router = APIRouter(prefix="/test-advanced", tags=['TestAdvanced'])


async def get_testadvanced_service(
    session: AsyncSession = Depends(get_async_session)
) -> TestAdvancedService:
    """Dependency to get TestAdvanced service instance."""
    return TestAdvancedService(session)


@router.post(
    "/",
    response_model=TestAdvancedResponse,
    status_code=status.HTTP_201_CREATED,
    summary="Create TestAdvanced (Advanced)",
    description="Create a new testadvanced with advanced features."
)
async def create_testadvanced(
    create_data: TestAdvancedCreate,
    service: TestAdvancedService = Depends(get_testadvanced_service)
) -> TestAdvancedResponse:
    """Create a new testadvanced with advanced validation."""
    try:
        logger.info(f"API: Creating advanced testadvanced: {create_data.name}")
        result = await service.create_testadvanced(create_data)
        logger.info(f"API: Created testadvanced with ID: {result.id}")
        return result
        
    except TestAdvancedValidationException as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail={"message": str(e), "errors": e.details.get("validation_errors", [])}
        )
    except TestAdvancedAlreadyExistsError as e:
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail={"message": str(e)}
        )


@router.post(
    "/search",
    response_model=TestAdvancedList,
    summary="Advanced Search TestAdvanceds",
    description="Perform advanced search with complex filtering."
)
async def search_testadvanceds(
    search_request: TestAdvancedSearchRequest,
    service: TestAdvancedService = Depends(get_testadvanced_service)
) -> TestAdvancedList:
    """Advanced search with multiple filters and options."""
    try:
        logger.debug("API: Advanced search testadvanceds")
        result = await service.search_testadvanceds(search_request)
        return result
        
    except TestAdvancedServiceException as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"message": "Advanced search failed", "error": str(e)}
        )


@router.get(
    "/statistics",
    response_model=dict[str, Any],
    summary="Get TestAdvanced Statistics"
)
async def get_statistics(
    service: TestAdvancedService = Depends(get_testadvanced_service)
) -> dict[str, Any]:
    """Get comprehensive statistics about testadvanceds."""
    try:
        return await service.get_statistics()
    except TestAdvancedServiceException as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"message": "Failed to get statistics", "error": str(e)}
        )