"""–°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è Telegram —Å–æ–æ–±—â–µ–Ω–∏–π."""

from pathlib import Path
from typing import Any

from jinja2 import Environment, FileSystemLoader, Template, select_autoescape
from pydantic import Field

from tools.pydantic import BaseModel as BaseConfigModel


class MessageTemplate(BaseConfigModel):
    """–®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è."""

    name: str = Field(..., description="–ò–º—è —à–∞–±–ª–æ–Ω–∞")
    template: str = Field(..., description="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞")
    description: str | None = Field(default=None, description="–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞")
    variables: dict[str, Any] = Field(default_factory=dict, description="–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    parse_mode: str | None = Field(default="HTML", description="–†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞")

    def render(self, **kwargs) -> str:
        """–†–µ–Ω–¥–µ—Ä —à–∞–±–ª–æ–Ω–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏."""
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏
        context = {**self.variables, **kwargs}

        # –°–æ–∑–¥–∞–µ–º Jinja2 —à–∞–±–ª–æ–Ω
        template = Template(self.template)
        return template.render(**context)


class TemplateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π."""

    def __init__(self, templates_dir: str | Path = "telegram/templates", auto_reload: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤.

        Args:
            templates_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —à–∞–±–ª–æ–Ω–∞–º–∏
            auto_reload: –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        """
        self.templates_dir = Path(templates_dir)
        self.auto_reload = auto_reload

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.templates_dir.mkdir(parents=True, exist_ok=True)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Jinja2 –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        self.env = Environment(
            loader=FileSystemLoader(str(self.templates_dir)),
            autoescape=select_autoescape(["html", "xml"]),
            auto_reload=auto_reload,
            trim_blocks=True,
            lstrip_blocks=True,
        )

        # –ö–µ—à —à–∞–±–ª–æ–Ω–æ–≤
        self._templates_cache: dict[str, MessageTemplate] = {}

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._load_templates()

    def _load_templates(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        self._templates_cache.clear()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º .j2 —Ñ–∞–π–ª—ã –∫–∞–∫ —à–∞–±–ª–æ–Ω—ã
        for template_file in self.templates_dir.glob("*.j2"):
            try:
                template_name = template_file.stem
                template_content = template_file.read_text(encoding="utf-8")

                # –ò—â–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
                metadata = self._parse_template_metadata(template_content)

                template = MessageTemplate(name=template_name, template=template_content, **metadata)

                self._templates_cache[template_name] = template

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ {template_file}: {e}")

    def _parse_template_metadata(self, content: str) -> dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —à–∞–±–ª–æ–Ω–∞."""
        metadata = {}
        lines = content.split("\n")

        for line in lines:
            line = line.strip()
            if line.startswith("{#") and line.endswith("#}"):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                # –§–æ—Ä–º–∞—Ç: {# key: value #}
                meta_content = line[2:-2].strip()
                if ":" in meta_content:
                    key, value = meta_content.split(":", 1)
                    key = key.strip()
                    value = value.strip()

                    if key == "description":
                        metadata["description"] = value
                    elif key == "parse_mode":
                        metadata["parse_mode"] = value
                    elif key == "variables":
                        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞–∫ JSON
                        try:
                            import json

                            metadata["variables"] = json.loads(value)
                        except:
                            pass

        return metadata

    def get_template(self, name: str) -> MessageTemplate | None:
        """–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ –∏–º–µ–Ω–∏."""
        if self.auto_reload:
            self._load_templates()

        return self._templates_cache.get(name)

    def render_template(self, name: str, **kwargs) -> str | None:
        """–†–µ–Ω–¥–µ—Ä —à–∞–±–ª–æ–Ω–∞ –ø–æ –∏–º–µ–Ω–∏."""
        template = self.get_template(name)
        if template:
            return template.render(**kwargs)
        return None

    def add_template(self, template: MessageTemplate) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –≤ –∫–µ—à."""
        self._templates_cache[template.name] = template

    def remove_template(self, name: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –∏–∑ –∫–µ—à–∞."""
        if name in self._templates_cache:
            del self._templates_cache[name]
            return True
        return False

    def list_templates(self) -> list[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤."""
        if self.auto_reload:
            self._load_templates()

        return list(self._templates_cache.keys())

    def save_template_to_file(self, template: MessageTemplate) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –≤ —Ñ–∞–π–ª."""
        try:
            template_file = self.templates_dir / f"{template.name}.j2"

            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            content_lines = []

            if template.description:
                content_lines.append(f"{{# description: {template.description} #}}")

            if template.parse_mode and template.parse_mode != "HTML":
                content_lines.append(f"{{# parse_mode: {template.parse_mode} #}}")

            if template.variables:
                import json

                variables_json = json.dumps(template.variables, ensure_ascii=False)
                content_lines.append(f"{{# variables: {variables_json} #}}")

            content_lines.append("")
            content_lines.append(template.template)

            template_file.write_text("\n".join(content_lines), encoding="utf-8")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            self._templates_cache[template.name] = template

            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ {template.name}: {e}")
            return False

    def create_default_templates(self) -> None:
        """–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        default_templates = [
            MessageTemplate(
                name="welcome",
                template="üëã –ü—Ä–∏–≤–µ—Ç, {{ user.first_name }}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!",
                description="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                variables={"user": {"first_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}},
            ),
            MessageTemplate(
                name="help",
                template="""üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

{% for command in commands %}
‚Ä¢ {{ command.command }} - {{ command.description }}
{% endfor %}

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help <–∫–æ–º–∞–Ω–¥–∞>""",
                description="–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
                variables={"commands": []},
            ),
            MessageTemplate(
                name="error",
                template="‚ùå <b>–û—à–∏–±–∫–∞:</b> {{ error_message }}",
                description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ",
                variables={"error_message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"},
            ),
            MessageTemplate(
                name="success",
                template="‚úÖ {{ message }}",
                description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ",
                variables={"message": "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"},
            ),
            MessageTemplate(
                name="loading",
                template="‚è≥ {{ message|default('–ó–∞–≥—Ä—É–∑–∫–∞...') }}",
                description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ",
                variables={},
            ),
            MessageTemplate(
                name="admin_only",
                template="üîí –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤–∞—Ö",
            ),
        ]

        for template in default_templates:
            if not self.get_template(template.name):
                self.save_template_to_file(template)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤
_template_manager: TemplateManager | None = None


def get_template_manager() -> TemplateManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤."""
    global _template_manager
    if _template_manager is None:
        from .config import TelegramBotsConfig

        config = TelegramBotsConfig()
        _template_manager = TemplateManager(
            templates_dir=config.TELEGRAM_TEMPLATES_DIR, auto_reload=config.TELEGRAM_TEMPLATES_AUTO_RELOAD
        )
    return _template_manager


def render_template(name: str, **kwargs) -> str | None:
    """–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–Ω–¥–µ—Ä —à–∞–±–ª–æ–Ω–∞."""
    return get_template_manager().render_template(name, **kwargs)
