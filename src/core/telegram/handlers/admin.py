"""–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Telegram –±–æ—Ç–æ–≤."""

import asyncio
from datetime import datetime

from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from ..decorators import admin_only, command, get_command_registry, rate_limit
from ..manager import get_bot_manager
from ..templates import get_template_manager


@command("admin", description="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", admin_only=True)
async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            ],
            [
                InlineKeyboardButton(text="ü§ñ –ë–æ—Ç—ã", callback_data="admin_bots"),
                InlineKeyboardButton(text="üìã –®–∞–±–ª–æ–Ω—ã", callback_data="admin_templates"),
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
                InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", callback_data="admin_reload"),
            ],
        ]
    )

    admin_text = f"""üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üë§ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {message.from_user.first_name}
üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

    await message.answer(admin_text, parse_mode="HTML", reply_markup=keyboard)


@command("broadcast", description="–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", admin_only=True)
@rate_limit(calls=1, period=300)  # –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 5 –º–∏–Ω—É—Ç
async def cmd_broadcast(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast."""
    command_text = message.text or ""
    if " " not in command_text:
        await message.answer(
            "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/broadcast –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</code>\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            parse_mode="HTML",
        )
        return

    broadcast_text = command_text.split(" ", 1)[1]
    bot_manager = get_bot_manager()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    status_message = await message.answer("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")

    try:
        await bot_manager.send_message_to_all_admins(
            f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n{broadcast_text}", parse_mode="HTML"
        )

        await status_message.edit_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e!s}")


@command("logs", description="–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤", admin_only=True)
async def cmd_logs(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /logs."""
    try:
        import logging

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥–æ–≤
        log_text = "üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤:</b>\n\n"

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —á—Ç–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
        # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥–≥–µ—Ä–∞—Ö

        loggers_info = []
        for name in logging.Logger.manager.loggerDict:
            logger = logging.getLogger(name)
            if logger.handlers:
                loggers_info.append(f"‚Ä¢ {name}: {logger.level}")

        if loggers_info:
            log_text += "\n".join(loggers_info[:10])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        else:
            log_text += "–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        await message.answer(log_text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e!s}")


@command("restart_bots", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤", admin_only=True)
@rate_limit(calls=1, period=600)  # –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 10 –º–∏–Ω—É—Ç
async def cmd_restart_bots(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restart_bots."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_restart"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_restart"),
            ]
        ]
    )

    await message.answer(
        "‚ö†Ô∏è <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤?\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –∏—Ö —Ä–∞–±–æ—Ç—É.",
        parse_mode="HTML",
        reply_markup=keyboard,
    )


@command("create_template", description="–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", admin_only=True)
async def cmd_create_template(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_template."""
    await message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
        "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
        "<code>/create_template –∏–º—è_—à–∞–±–ª–æ–Ω–∞|–æ–ø–∏—Å–∞–Ω–∏–µ|—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>/create_template hello|–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ|–ü—Ä–∏–≤–µ—Ç, {{name}}!</code>",
        parse_mode="HTML",
    )


@command("delete_template", description="–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", admin_only=True)
async def cmd_delete_template(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_template."""
    command_text = message.text or ""
    if " " not in command_text:
        template_manager = get_template_manager()
        templates = template_manager.list_templates()

        if templates:
            template_list = "\n".join([f"‚Ä¢ <code>{t}</code>" for t in templates])
            await message.answer(
                f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:\n{template_list}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/delete_template –∏–º—è_—à–∞–±–ª–æ–Ω–∞</code>",
                parse_mode="HTML",
            )
        else:
            await message.answer("üìã –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    template_name = command_text.split(" ", 1)[1].strip()
    template_manager = get_template_manager()

    if template_manager.remove_template(template_name):
        await message.answer(f"‚úÖ –®–∞–±–ª–æ–Ω <code>{template_name}</code> —É–¥–∞–ª–µ–Ω", parse_mode="HTML")
    else:
        await message.answer(f"‚ùå –®–∞–±–ª–æ–Ω <code>{template_name}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")


# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@admin_only
async def callback_admin_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã."""
    bot_manager = get_bot_manager()
    active_bots = len(bot_manager.bots)

    stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

ü§ñ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤:</b> {active_bots}
üìã <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b> {len(get_command_registry().commands)}
üìù <b>–®–∞–±–ª–æ–Ω–æ–≤:</b> {len(get_template_manager().list_templates())}
üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]
    )

    await callback.answer()
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(stats_text, parse_mode="HTML", reply_markup=keyboard)


@admin_only
async def callback_admin_bots(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏."""
    bot_manager = get_bot_manager()

    bots_info = []
    for bot_name, bot_instance in bot_manager.bots.items():
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if bot_instance.bot else "üî¥ –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
        mode = "üì° Polling" if bot_instance.config.mode.value == "polling" else "üåê Webhook"
        bots_info.append(f"‚Ä¢ <code>{bot_name}</code> - {status} ({mode})")

    bots_text = f"""ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏</b>

{chr(10).join(bots_info) if bots_info else "–ë–æ—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"}"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart_all_bots"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="bots_status"),
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")],
        ]
    )

    await callback.answer()
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(bots_text, parse_mode="HTML", reply_markup=keyboard)


@admin_only
async def callback_admin_templates(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏."""
    template_manager = get_template_manager()
    templates = template_manager.list_templates()

    if templates:
        template_list = []
        for template_name in templates[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            template = template_manager.get_template(template_name)
            if template:
                desc = (
                    template.description[:30] + "..."
                    if template.description and len(template.description) > 30
                    else (template.description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                )
                template_list.append(f"‚Ä¢ <code>{template_name}</code> - {desc}")

        templates_text = f"""üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏</b>

{chr(10).join(template_list)}

–í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}"""
    else:
        templates_text = "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏</b>\n\n–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_template_dialog"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="reload_templates"),
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")],
        ]
    )

    await callback.answer()
    await callback.message.edit_text(templates_text, parse_mode="HTML", reply_markup=keyboard)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from ..decorators import callback_handler

callback_handler("admin_stats")(callback_admin_stats)
callback_handler("admin_bots")(callback_admin_bots)
callback_handler("admin_templates")(callback_admin_templates)


@callback_handler("back_to_admin")
@admin_only
async def callback_back_to_admin(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            ],
            [
                InlineKeyboardButton(text="ü§ñ –ë–æ—Ç—ã", callback_data="admin_bots"),
                InlineKeyboardButton(text="üìã –®–∞–±–ª–æ–Ω—ã", callback_data="admin_templates"),
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
                InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", callback_data="admin_reload"),
            ],
        ]
    )

    admin_text = f"""üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üë§ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {callback.from_user.first_name}
üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

    await callback.answer()
    await callback.message.edit_text(admin_text, parse_mode="HTML", reply_markup=keyboard)


@callback_handler("confirm_restart")
@admin_only
async def callback_confirm_restart(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤."""
    await callback.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤...")

    status_text = "üîÑ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤</b>\n\n"

    try:
        bot_manager = get_bot_manager()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–æ–≤
        status_text += "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–æ–≤...\n"
        await callback.message.edit_text(status_text, parse_mode="HTML")

        await bot_manager.stop_all_bots()

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        await asyncio.sleep(2)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
        status_text += "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤...\n"
        await callback.message.edit_text(status_text, parse_mode="HTML")

        await bot_manager.initialize_bots()
        await bot_manager.start_polling_bots()

        status_text += "‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
        await callback.message.edit_text(status_text, parse_mode="HTML")

    except Exception as e:
        status_text += f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e!s}"
        await callback.message.edit_text(status_text, parse_mode="HTML")


@callback_handler("cancel_restart")
async def callback_cancel_restart(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."""
    await callback.answer("‚ùå –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
    await callback.message.edit_text("‚ùå –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω")


@callback_handler("reload_templates")
@admin_only
async def callback_reload_templates(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤."""
    await callback.answer("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤...")

    try:
        template_manager = get_template_manager()
        template_manager._load_templates()

        await callback.answer("‚úÖ –®–∞–±–ª–æ–Ω—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã", show_alert=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        await callback_admin_templates(callback)

    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e!s}", show_alert=True)


def register_admin_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    # –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
    pass
