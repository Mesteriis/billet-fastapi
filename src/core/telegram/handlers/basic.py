"""–ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–æ–≤."""

from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from ..decorators import callback_handler, command, get_command_registry, message_handler, rate_limit
from ..templates import render_template


@command("start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
@rate_limit(calls=3, period=60)
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = message.from_user
    if user is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        return

    response = render_template(
        "welcome",
        user={"first_name": user.first_name, "last_name": user.last_name, "username": user.username, "id": user.id},
    )

    if response:
        await message.answer(response)
    else:
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!")


@command("help", description="–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
@rate_limit(calls=5, period=60)
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    registry = get_command_registry()
    commands_info = registry.get_commands_info()

    response = render_template("help", commands=commands_info)

    if response:
        await message.answer(response)
    else:
        help_text = "üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        for cmd_info in commands_info:
            help_text += f"‚Ä¢ {cmd_info['command']} - {cmd_info['description']}\n"

        await message.answer(help_text, parse_mode="HTML")


@command("info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
async def cmd_info(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info."""
    from ...core.config import get_settings

    settings = get_settings()

    info_text = f"""ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>

üìç <b>–ü—Ä–æ–µ–∫—Ç:</b> {settings.PROJECT_NAME}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {settings.PROJECT_DESCRIPTION}
üî¢ <b>–í–µ—Ä—Å–∏—è:</b> {settings.VERSION}

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {message.from_user.first_name if message.from_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
üÜî <b>ID:</b> <code>{message.from_user.id if message.from_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}</code>
üí¨ <b>–ß–∞—Ç:</b> {message.chat.type}"""

    await message.answer(info_text, parse_mode="HTML")


@command("status", description="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
@rate_limit(calls=2, period=120)
async def cmd_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status."""
    import datetime

    import psutil

    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    cpu_percent = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage("/")

    uptime = datetime.datetime.now() - datetime.datetime.fromtimestamp(psutil.boot_time())

    status_text = f"""üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>

üñ• <b>CPU:</b> {cpu_percent}%
üß† <b>RAM:</b> {memory.percent}% ({memory.used // 1024 // 1024} MB / {memory.total // 1024 // 1024} MB)
üíæ <b>–î–∏—Å–∫:</b> {disk.percent}% ({disk.used // 1024 // 1024 // 1024} GB / {disk.total // 1024 // 1024 // 1024} GB)
‚è∞ <b>Uptime:</b> {str(uptime).split(".")[0]}"""

    await message.answer(status_text, parse_mode="HTML")


@command("ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–∏–∫–∞")
async def cmd_ping(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping."""
    import time

    start_time = time.time()

    sent_message = await message.answer("üèì Pong!")

    end_time = time.time()
    response_time = round((end_time - start_time) * 1000, 2)

    await sent_message.edit_text(f"üèì Pong! –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {response_time} –º—Å")


@command("echo", description="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def cmd_echo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /echo."""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    command_text = message.text or ""
    if " " in command_text:
        echo_text = command_text.split(" ", 1)[1]
        await message.answer(f"üîÑ {echo_text}")
    else:
        await message.answer("üí≠ –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /echo")


@command("templates", description="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤")
async def cmd_templates(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /templates."""
    from ..templates import get_template_manager

    template_manager = get_template_manager()
    templates = template_manager.list_templates()

    if templates:
        template_text = "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:</b>\n\n"
        for template_name in templates:
            template = template_manager.get_template(template_name)
            if template:
                description = template.description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
                template_text += f"‚Ä¢ <code>{template_name}</code> - {description}\n"

        await message.answer(template_text, parse_mode="HTML")
    else:
        await message.answer("üìã –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


@command("keyboard", description="–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
async def cmd_keyboard(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /keyboard —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="answer_yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="answer_no"),
            ],
            [
                InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="show_info"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings"),
            ],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
        ]
    )

    await message.answer("‚å®Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries
@callback_handler("answer_yes")
async def callback_answer_yes(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è '–î–∞'."""
    await callback.answer("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: –î–∞")
    if (
        callback.message
        and isinstance(callback.message, Message)
        and hasattr(callback.message, "edit_text")
        and callable(getattr(callback.message, "edit_text", None))
    ):
        await callback.message.edit_text("‚úÖ –û—Ç–≤–µ—Ç: –î–∞")


@callback_handler("answer_no")
async def callback_answer_no(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è '–ù–µ—Ç'."""
    await callback.answer("‚ùå –í—ã –≤—ã–±—Ä–∞–ª–∏: –ù–µ—Ç")
    if (
        callback.message
        and isinstance(callback.message, Message)
        and hasattr(callback.message, "edit_text")
        and callable(getattr(callback.message, "edit_text", None))
    ):
        await callback.message.edit_text("‚ùå –û—Ç–≤–µ—Ç: –ù–µ—Ç")


@callback_handler("show_info")
async def callback_show_info(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    info_text = """‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

–≠—Ç–æ –ø—Ä–∏–º–µ—Ä inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ Telegram –±–æ—Ç–µ.
–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""

    await callback.answer()
    if (
        callback.message
        and isinstance(callback.message, Message)
        and hasattr(callback.message, "edit_text")
        and callable(getattr(callback.message, "edit_text", None))
    ):
        await callback.message.edit_text(info_text, parse_mode="HTML")


@callback_handler("show_settings")
async def callback_show_settings(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    settings_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications"),
                InlineKeyboardButton(text="üåô –¢–µ–º–∞", callback_data="toggle_theme"),
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ]
    )

    await callback.answer()
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", parse_mode="HTML", reply_markup=settings_keyboard
        )


@callback_handler("refresh")
async def callback_refresh(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ!", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="answer_yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="answer_no"),
            ],
            [
                InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="show_info"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings"),
            ],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
        ]
    )

    await callback.message.edit_text("‚å®Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@message_handler(content_types=["text"])
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    if message.text and message.text.startswith("/"):
        return

    # –ü—Ä–æ—Å—Ç–æ–π —ç—Ö–æ-–æ—Ç–≤–µ—Ç
    response = f"üí¨ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}"
    await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@message_handler(content_types=["photo"])
async def handle_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    await message.answer("üì∏ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")


@message_handler(content_types=["document"])
async def handle_document(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    doc_name = message.document.file_name if message.document else "—Ñ–∞–π–ª"
    await message.answer(f"üìÑ –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {doc_name}")


@message_handler(content_types=["voice"])
async def handle_voice(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    await message.answer("üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")


@message_handler(content_types=["sticker"])
async def handle_sticker(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤."""
    await message.answer("üòä –ö–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä!")


def register_basic_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    # –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
    # –±–ª–∞–≥–æ–¥–∞—Ä—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º
    pass
