"""
E2E —Ç–µ—Å—Ç—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑ OpenAPI —Å—Ö–µ–º—ã.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ö–æ–¥ "—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑" - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º
—á—Ç–æ –≤—Å—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ E2E, –ø–æ—Ç–æ–º —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å unit —Ç–µ—Å—Ç–∞–º–∏.
"""

import pytest

from tests.utils_test.api_test_client import AsyncApiTestClient, TestScenarioType


class TestE2EAutoGenerated:
    """E2E —Ç–µ—Å—Ç—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑ OpenAPI —Å—Ö–µ–º—ã."""

    async def test_auto_generate_all_endpoint_tests(self, api_client: AsyncApiTestClient):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤.

        –≠—Ç–æ –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –ø–æ–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã.
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º OpenAPI —Å—Ö–µ–º—É
        schema = api_client.load_openapi_schema()

        if not schema:
            pytest.skip("OpenAPI —Å—Ö–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        generated_tests = api_client.generate_tests_from_schema()

        print(f"\nüîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(generated_tests)} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        endpoints_summary = {}

        for test in generated_tests:
            endpoint_key = f"{test.method} {test.endpoint}"
            if endpoint_key not in endpoints_summary:
                endpoints_summary[endpoint_key] = {
                    "success_tests": 0,
                    "validation_tests": 0,
                    "security_tests": 0,
                    "total_confidence": 0.0,
                }

            if "success" in test.test_name.lower():
                endpoints_summary[endpoint_key]["success_tests"] += 1
            elif "validation" in test.test_name.lower():
                endpoints_summary[endpoint_key]["validation_tests"] += 1
            elif "security" in test.test_name.lower():
                endpoints_summary[endpoint_key]["security_tests"] += 1

            endpoints_summary[endpoint_key]["total_confidence"] += test.confidence_score

        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:")
        for endpoint, stats in endpoints_summary.items():
            avg_confidence = stats["total_confidence"] / max(
                1, stats["success_tests"] + stats["validation_tests"] + stats["security_tests"]
            )
            print(
                f"  {endpoint}: {stats['success_tests']}‚úÖ {stats['validation_tests']}üîç {stats['security_tests']}üîí (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.1%})"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        assert len(generated_tests) > 0, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã"

        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ Auth –∏ User —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        auth_endpoints = [t for t in generated_tests if "auth" in t.endpoint.lower()]
        user_endpoints = [t for t in generated_tests if "user" in t.endpoint.lower()]

        print(f"\nüîê Auth —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {len(auth_endpoints)}")
        print(f"üë§ User —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {len(user_endpoints)}")

        assert len(auth_endpoints) > 0, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã Auth —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö"
        assert len(user_endpoints) > 0, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã User —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö"

    async def test_run_critical_endpoint_success_tests(self, api_client: AsyncApiTestClient):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ success —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤.

        –ï—Å–ª–∏ —ç—Ç–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç, –∑–Ω–∞—á–∏—Ç –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç.
        """
        # –í–∫–ª—é—á–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        api_client.enable_performance_tracking()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã
        generated_tests = api_client.generate_tests_from_schema()

        if not generated_tests:
            pytest.skip("–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ success —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        critical_patterns = ["login", "register", "user", "profile", "auth"]
        success_tests = [
            test
            for test in generated_tests
            if "success" in test.test_name.lower()
            and any(pattern in test.endpoint.lower() for pattern in critical_patterns)
            and test.confidence_score > 0.7  # –¢–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–æ—É–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        ]

        print(f"\nüéØ –ó–∞–ø—É—Å–∫ {len(success_tests)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö success —Ç–µ—Å—Ç–æ–≤...")

        passed_tests = 0
        failed_tests = 0

        async with api_client.test_session(TestScenarioType.E2E):
            for test in success_tests[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ 10 –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç
                    success = api_client.run_generated_test(test)

                    if success:
                        passed_tests += 1
                        print(f"  ‚úÖ {test.test_name}")
                    else:
                        failed_tests += 1
                        print(f"  ‚ùå {test.test_name}")

                except Exception as e:
                    failed_tests += 1
                    print(f"  üí• {test.test_name}: {str(e)[:100]}")

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_stats = api_client.get_performance_stats()

        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"  –£–ø–∞–ª–æ: {failed_tests}")
        print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed_tests / (passed_tests + failed_tests) * 100:.1f}%")

        if performance_stats.get("average_response_time"):
            print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {performance_stats['average_response_time']:.3f}s")
            print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {performance_stats.get('total_requests', 0)}")

        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 50% —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—Ö–æ–¥—è—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤ —Ü–µ–ª–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç
        success_rate = passed_tests / (passed_tests + failed_tests) if (passed_tests + failed_tests) > 0 else 0

        if success_rate >= 0.5:
            print(f"\nüéâ E2E —Ç–µ—Å—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤ —Ü–µ–ª–æ–º –†–ê–ë–û–¢–ê–ï–¢! ({success_rate:.1%} success rate)")
            print("üí° –ü—Ä–æ–±–ª–µ–º—ã —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤ unit/integration —Ç–µ—Å—Ç–∞—Ö, –∞ –Ω–µ –≤ –∫–æ–¥–µ")
        else:
            print(f"\n‚ö†Ô∏è  E2E —Ç–µ—Å—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ ({success_rate:.1%} success rate)")
            print("üîß –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")

        # –ù–µ –¥–µ–ª–∞–µ–º assert —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Ç–µ—Å—Ç - –Ω–∞–º –≤–∞–∂–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

    async def test_basic_user_flow_e2e(self, api_client: AsyncApiTestClient, user_factory):
        """
        –ë–∞–∑–æ–≤—ã–π E2E —Ç–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–ª–æ—É.

        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é ‚Üí –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API.
        """
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ E2E —Ñ–ª–æ—É...")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
        user = await user_factory.create(
            email="e2e_test@example.com", username="e2e_user", is_active=True, is_verified=True
        )

        # –≠—Ç–∞–ø 1: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        print(f"  1Ô∏è‚É£ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        auth_user = await api_client.force_auth(user=user)
        assert auth_user.email == "e2e_test@example.com"
        print(f"     ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {auth_user.email}")

        # –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
        print(f"  2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            profile_url = api_client.url_for("get_my_profile")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è route
            response = await api_client.get(profile_url)

            if response.status_code == 200:
                print(f"     ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"     ‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")

        except Exception as e:
            print(f"     üí• –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é: {str(e)[:100]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try:
            user_info_url = api_client.url_for("get_current_user_info")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è route
            response = await api_client.get(user_info_url)

            if response.status_code == 200:
                user_data = response.json()
                print(f"     ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞: {user_data.get('email', 'N/A')}")
                assert user_data.get("email") == "e2e_test@example.com"
            else:
                print(f"     ‚ö†Ô∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")

        except Exception as e:
            print(f"     üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)[:100]}")

        # –≠—Ç–∞–ø 3: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        print(f"  3Ô∏è‚É£ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")
        await api_client.force_logout()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        try:
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º URL (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤—ã—à–µ)
            test_url = api_client.url_for("get_current_user_info")
            response = await api_client.get(test_url)
            if response.status_code in [401, 403]:
                print(f"     ‚úÖ –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –¥–æ—Å—Ç—É–ø –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            else:
                print(f"     ‚ö†Ô∏è  –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –¥–æ—Å—Ç—É–ø –≤—Å–µ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç: {response.status_code}")
        except Exception as e:
            print(f"     üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—Ö–æ–¥–∞: {str(e)[:100]}")

        print(f"\nüèÅ –ë–∞–∑–æ–≤—ã–π E2E —Ñ–ª–æ—É –∑–∞–≤–µ—Ä—à–µ–Ω")

    async def test_api_health_check_e2e(self, api_client: AsyncApiTestClient):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API - –±–∞–∑–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—á–∞—Ç—å.
        """
        print(f"\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...")

        # –°–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        health_endpoints = [
            ("/docs", "GET", "Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"),
            ("/openapi.json", "GET", "OpenAPI —Å—Ö–µ–º–∞"),
            ("/", "GET", "–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"),
        ]

        healthy_endpoints = 0

        for endpoint, method, description in health_endpoints:
            try:
                response = await api_client.request(method, endpoint)

                if response.status_code < 500:  # –õ—é–±–æ–π –Ω–µ-—Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —ç—Ç–æ OK
                    healthy_endpoints += 1
                    print(f"  ‚úÖ {description}: {response.status_code}")
                else:
                    print(f"  ‚ùå {description}: {response.status_code}")

            except Exception as e:
                print(f"  üí• {description}: {str(e)[:50]}")

        health_rate = healthy_endpoints / len(health_endpoints)
        print(f"\nü©∫ –ó–¥–æ—Ä–æ–≤—å–µ API: {health_rate:.1%} ({healthy_endpoints}/{len(health_endpoints)})")

        # API —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–¥–æ—Ä–æ–≤—ã–º –µ—Å–ª–∏ –±–∞–∑–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Ç–≤–µ—á–∞—é—Ç
        assert health_rate >= 0.5, f"API –Ω–µ–∑–¥–æ—Ä–æ–≤: —Ç–æ–ª—å–∫–æ {health_rate:.1%} –±–∞–∑–æ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç"
