"""
Unit тесты для User schemas - повышают покрытие тестированием валидаторов.
"""

import pytest
from pydantic import ValidationError

from apps.users.exceptions import UsersPasswordMismatchError, UsersPasswordValidationError, UsersUsernameValidationError
from apps.users.schemas.user_schemas import UserBase, UserCreate, UserResponse, UserUpdate


class TestUserSchemas:
    """Unit тесты для User schemas."""

    def test_user_base_valid_data(self):
        """Тест валидных данных UserBase."""
        data = {
            "username": "testuser123",
            "email": "test@example.com",
            "first_name": "John",
            "last_name": "Doe",
            "avatar_url": "https://example.com/avatar.jpg",
        }

        user = UserBase(**data)

        assert user.username == "testuser123"
        assert user.email == "test@example.com"
        assert user.first_name == "John"
        assert user.last_name == "Doe"
        assert user.avatar_url == "https://example.com/avatar.jpg"

    def test_user_base_username_validation_valid(self):
        """Тест валидации username с валидными данными."""
        valid_usernames = [
            "user123",
            "test_user",
            "user-name",
            "abc123_test",
            "test-user_123",
        ]

        for username in valid_usernames:
            data = {"username": username, "email": "test@example.com"}
            user = UserBase(**data)
            assert user.username == username.lower()

    def test_user_base_username_validation_invalid_characters(self):
        """Тест валидации username с невалидными символами."""
        invalid_usernames = [
            "user@123",  # @ symbol
            "user.name",  # dot
            "user#test",  # hash
            "user space",  # space
            "user%test",  # percent
        ]

        for username in invalid_usernames:
            with pytest.raises(UsersUsernameValidationError):
                UserBase(username=username, email="test@example.com")

    def test_user_base_username_validation_edge_cases(self):
        """Тест валидации username с граничными случаями."""
        invalid_edge_cases = [
            "_username",  # starts with underscore
            "username_",  # ends with underscore
            "-username",  # starts with dash
            "username-",  # ends with dash
            "abc_",  # ends with underscore but has min length
            "abc-",  # ends with dash but has min length
        ]

        for username in invalid_edge_cases:
            with pytest.raises(UsersUsernameValidationError):
                UserBase(username=username, email="test@example.com")

    def test_user_base_avatar_url_validation_valid(self):
        """Тест валидации avatar_url с валидными URL."""
        valid_urls = [
            "https://example.com/avatar.jpg",
            "http://test.com/image.png",
            "https://cdn.example.com/uploads/avatar.gif",
        ]

        for url in valid_urls:
            data = {"username": "test", "email": "test@example.com", "avatar_url": url}
            user = UserBase(**data)
            assert user.avatar_url == url

    def test_user_base_avatar_url_validation_invalid(self):
        """Тест валидации avatar_url с невалидными URL."""
        invalid_urls = [
            "ftp://example.com/avatar.jpg",  # wrong protocol
            "example.com/avatar.jpg",  # no protocol
            "avatar.jpg",  # relative path
        ]

        for url in invalid_urls:
            with pytest.raises(UsersUsernameValidationError):  # Validator uses wrong exception
                UserBase(username="test", email="test@example.com", avatar_url=url)

    def test_user_create_valid_password(self):
        """Тест валидации пароля с валидными данными."""
        valid_data = {
            "username": "testuser",
            "email": "test@example.com",
            "password": "TestPass123!",
            "confirm_password": "TestPass123!",
        }

        user = UserCreate(**valid_data)

        assert user.password == "TestPass123!"
        assert user.confirm_password == "TestPass123!"

    def test_user_create_password_validation_no_lowercase(self):
        """Тест валидации пароля без строчных букв."""
        data = {
            "username": "testuser",
            "email": "test@example.com",
            "password": "TESTPASS123!",
            "confirm_password": "TESTPASS123!",
        }

        with pytest.raises(UsersPasswordValidationError) as exc_info:
            UserCreate(**data)

        assert "строчную букву" in str(exc_info.value)

    def test_user_create_password_validation_no_uppercase(self):
        """Тест валидации пароля без заглавных букв."""
        data = {
            "username": "testuser",
            "email": "test@example.com",
            "password": "testpass123!",
            "confirm_password": "testpass123!",
        }

        with pytest.raises(UsersPasswordValidationError) as exc_info:
            UserCreate(**data)

        assert "заглавную букву" in str(exc_info.value)

    def test_user_create_password_validation_no_digit(self):
        """Тест валидации пароля без цифр."""
        data = {
            "username": "testuser",
            "email": "test@example.com",
            "password": "TestPass!",
            "confirm_password": "TestPass!",
        }

        with pytest.raises(UsersPasswordValidationError) as exc_info:
            UserCreate(**data)

        assert "цифру" in str(exc_info.value)

    def test_user_create_password_validation_no_special_char(self):
        """Тест валидации пароля без специальных символов."""
        data = {
            "username": "testuser",
            "email": "test@example.com",
            "password": "TestPass123",
            "confirm_password": "TestPass123",
        }

        with pytest.raises(UsersPasswordValidationError) as exc_info:
            UserCreate(**data)

        assert "специальный символ" in str(exc_info.value)

    def test_user_create_password_mismatch(self):
        """Тест несовпадения паролей."""
        data = {
            "username": "testuser",
            "email": "test@example.com",
            "password": "TestPass123!",
            "confirm_password": "DifferentPass123!",
        }

        with pytest.raises(UsersPasswordMismatchError) as exc_info:
            UserCreate(**data)

                assert "не совпадают" in str(exc_info.value)

    def test_user_update_validation(self):
        """Тест валидации UserUpdate схемы."""
        # UserUpdate наследуется от BaseSchema, проверим только валидацию
        data = {"username": "newusername"}
        
        # Проверяем что схема создается без ошибок
        user_update = UserUpdate(**data)
        assert user_update.username == "newusername"

    def test_user_schemas_field_validation(self):
        """Тест валидации полей в схемах."""
        # Тестируем только валидаторы, не создание полных объектов
        
        # Проверяем что валидаторы работают в UserBase
        valid_data = {
            "username": "validuser",
            "email": "valid@example.com"
        }
        
        user = UserBase(**valid_data)
        assert user.username == "validuser"
        assert user.email == "valid@example.com"

    def test_user_schemas_edge_cases(self):
        """Тест граничных случаев всех схем."""
        # Минимальные данные
        minimal_base = UserBase(username="abc", email="a@b.co")
        assert minimal_base.username == "abc"

        # Максимальные длины
        long_data = {
            "username": "a" * 50,  # max_length=50
            "email": "test@example.com",
            "first_name": "F" * 100,  # max_length=100
            "last_name": "L" * 100,  # max_length=100
        }

        user_long = UserBase(**long_data)
        assert len(user_long.username) == 50
        assert len(user_long.first_name) == 100
        assert len(user_long.last_name) == 100
