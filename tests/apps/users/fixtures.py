"""
Test fixtures for User.

Auto-generated by Autogen CLI.
"""

import pytest
import pytest_asyncio
from sqlalchemy.ext.asyncio import AsyncSession

from tests.factories.base_factories import setup_factory_session
from src.apps.users.models.users_models import User
from .factories import UserFactory, create_users, create_users_batch


@pytest_asyncio.fixture
async def users_factory(db_session: AsyncSession):
    """Fixture providing configured UserFactory."""
    setup_factory_session(UserFactory, db_session)
    return UserFactory


@pytest_asyncio.fixture
async def users_instance(db_session: AsyncSession):
    """Fixture providing a single User instance."""
    setup_factory_session(UserFactory, db_session)
    return await create_users()


@pytest_asyncio.fixture
async def users_instances(db_session: AsyncSession):
    """Fixture providing multiple User instances."""
    setup_factory_session(UserFactory, db_session)
    return await create_users_batch(5)


@pytest_asyncio.fixture
async def users_data():
    """Fixture providing sample User data for testing."""
    return {
        # Add sample data fields based on your model
        # "name": "Test Name",
        # "email": "test@example.com",
        # "username": "testuser",
    }


@pytest.fixture
def users_create_data():
    """Fixture providing data for User creation."""
    return {
        # Add required fields for creation
        # "name": "New Test Name",
        # "email": "new@example.com",
    }


@pytest.fixture
def users_update_data():
    """Fixture providing data for User updates."""
    return {
        # Add fields that can be updated
        # "name": "Updated Name",
        # "description": "Updated description",
    }


@pytest.fixture
def invalid_users_data():
    """Fixture providing invalid data for error testing."""
    return {
        # Add invalid data that should trigger validation errors
        # "email": "invalid-email",
        # "name": "",  # Empty required field
    }
