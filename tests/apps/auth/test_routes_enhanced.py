"""
–£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è API —Ä–æ—É—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AsyncApiTestClient.

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API.
"""

import asyncio
import time

import pytest
from httpx import AsyncClient
from sqlalchemy.ext.asyncio import AsyncSession

from tests.utils_test.api_test_client import AsyncApiTestClient, ChainStep, RetryStrategy, TestScenarioType


@pytest.fixture
async def enhanced_client(app) -> AsyncApiTestClient:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç."""
    async with AsyncApiTestClient(app=app, base_url="http://test") as client:
        client.enable_performance_tracking()
        client.setup_snapshots_dir("tests/snapshots")
        yield client


@pytest.mark.auth
@pytest.mark.enhanced
class TestRegistrationEnhanced:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    @pytest.mark.asyncio
    async def test_register_success_with_metrics(
        self, enhanced_client: AsyncApiTestClient, db_session: AsyncSession, helpers
    ):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ç—Ä–µ–∫–∏–Ω–≥–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""

        user_data = {
            "email": "newuser@example.com",
            "username": "newuser",
            "full_name": "New User",
            "password": "NewPassword123!",
            "password_confirm": "NewPassword123!",
        }

        async with enhanced_client.test_session(TestScenarioType.INTEGRATION) as session:
            response = await enhanced_client.post("/api/v1/auth/register", json=user_data)

            assert response.status_code == 201
            data = response.json()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            assert "user" in data
            assert "tokens" in data

            # –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ API –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            snapshot = await enhanced_client.create_api_snapshot("/api/v1/auth/register", method="POST", json=user_data)

            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            perf_stats = enhanced_client.get_performance_stats()

            print(f"üìä –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {perf_stats['avg_response_time']:.3f}s")
            print(f"üì∏ –°–Ω–∏–º–æ–∫ API: {snapshot.checksum}")


@pytest.mark.auth
@pytest.mark.enhanced
class TestLoginEnhanced:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."""

    @pytest.mark.asyncio
    async def test_login_chain_scenario(self, enhanced_client: AsyncApiTestClient, db_session: AsyncSession):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ chain API."""

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await enhanced_client.force_auth(email="chaintest@example.com")
        await enhanced_client.force_logout()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥–∏ —Ü–µ–ø–æ—á–∫–∏
        login_chain = [
            ChainStep(
                method="POST",
                url="/api/v1/auth/login",
                data={"email": "chaintest@example.com", "password": "TestPassword123!"},
                expected_status=200,
                description="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
                extract_data=lambda r: {"tokens": r.json()["tokens"], "user_id": r.json()["user"]["id"]},
            ),
            ChainStep(method="GET", url="/api/v1/auth/me", expected_status=200, description="–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"),
            ChainStep(method="GET", url="/api/v1/auth/validate", expected_status=200, description="–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞"),
        ]

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–µ–ø–æ—á–∫—É
        responses = await enhanced_client.run_test_chain(login_chain)

        assert len(responses) == 3
        print(f"üîó Chain –≤—ã–ø–æ–ª–Ω–µ–Ω: {len(responses)} —à–∞–≥–æ–≤")


@pytest.mark.auth
@pytest.mark.enhanced
@pytest.mark.performance
class TestAuthPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""

    @pytest.mark.asyncio
    async def test_auth_endpoints_benchmark(self, enhanced_client: AsyncApiTestClient):
        """–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await enhanced_client.force_auth(email="benchmark@example.com")
        await enhanced_client.force_logout()

        async with enhanced_client.test_session(TestScenarioType.PERFORMANCE) as session:
            # –ë–µ–Ω—á–º–∞—Ä–∫ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
            login_data = {"email": "benchmark@example.com", "password": "TestPassword123!"}

            login_times = []
            for _ in range(5):  # 5 –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
                start_time = time.time()

                response = await enhanced_client.post("/api/v1/auth/login", json=login_data)

                end_time = time.time()
                login_times.append(end_time - start_time)

                if response.status_code == 200:
                    # –°—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                    tokens = response.json()["tokens"]
                    logout_data = {"refresh_token": tokens["refresh_token"]}
                    await enhanced_client.post("/api/v1/auth/logout", json=logout_data)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            avg_login_time = sum(login_times) / len(login_times)
            max_login_time = max(login_times)
            min_login_time = min(login_times)

            print(f"üèÉ‚Äç‚ôÇÔ∏è –ë–µ–Ω—á–º–∞—Ä–∫ –≤—Ö–æ–¥–∞:")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_login_time:.3f}s")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {min_login_time:.3f}s")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max_login_time:.3f}s")
