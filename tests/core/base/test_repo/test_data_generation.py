import logging
import random

import pytest

from tests.utils_test.isolation_decorators import database_reset_test

# –ò—Å–ø–æ–ª—å–∑—É–µ–º logger –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ conftest.py
logger = logging.getLogger("test_session")


@database_reset_test(verbose=True)
async def test_generate_large_dataset(setup_test_models):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
    - 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
      - 1 –ø—Ä–æ—Ñ–∏–ª—å
      - 10 –ø–æ—Å—Ç–æ–≤
      - 10 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      - 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      - 8 —Ç–µ–≥–æ–≤
    """
    from .factories import (
        TestCategoryFactory,
        TestCommentFactory,
        TestPostFactory,
        TestProfileFactory,
        TestTagFactory,
        TestUserFactory,
    )

    # –§–∞–±—Ä–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –∏–∑–æ–ª—è—Ü–∏–∏

    users = []
    profiles = []
    categories = []
    tags = []
    posts = []
    comments = []

    logger.info("üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")

    # 1. –°–æ–∑–¥–∞–µ–º 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    logger.info("üë• –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    for i in range(10):
        user = await TestUserFactory.create()
        users.append(user)
        logger.info(f"   ‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i + 1}: {user.username} ({user.email})")

    # 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info("üë§ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏...")
    for i, user in enumerate(users):
        profile = await TestProfileFactory.create(user=user)
        profiles.append(profile)
        logger.info(f"   ‚úì –ü—Ä–æ—Ñ–∏–ª—å {i + 1}: {profile.city}, {profile.country}")

    # 3. –°–æ–∑–¥–∞–µ–º 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±—â–∏—Ö –¥–ª—è –≤—Å–µ—Ö
    logger.info("üìÅ –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    for i in range(5):
        category = await TestCategoryFactory.create()
        categories.append(category)
        logger.info(f"   ‚úì –ö–∞—Ç–µ–≥–æ—Ä–∏—è {i + 1}: {category.name}")

    # 4. –°–æ–∑–¥–∞–µ–º 8 —Ç–µ–≥–æ–≤ –æ–±—â–∏—Ö –¥–ª—è –≤—Å–µ—Ö
    logger.info("üè∑Ô∏è –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏...")
    for i in range(8):
        tag = await TestTagFactory.create()
        tags.append(tag)
        logger.info(f"   ‚úì –¢–µ–≥ {i + 1}: {tag.name}")

    # 5. –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ 10 —à—Ç—É–∫)
    logger.info("üìù –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã...")
    for user_idx, user in enumerate(users):
        for post_idx in range(10):
            # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = random.choice(categories)

            post = await TestPostFactory.create(author=user, category=category)
            posts.append(post)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–µ–≥–∏ –∫ –ø–æ—Å—Ç—É —á–µ—Ä–µ–∑ SQL (–∏–∑–±–µ–≥–∞–µ–º lazy loading)
            selected_tags = random.sample(tags, k=random.randint(1, 3))
            for tag in selected_tags:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —á–µ—Ä–µ–∑ insert –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                from .modesl_for_test import post_tags_table

                await setup_test_models.execute(post_tags_table.insert().values(post_id=post.id, tag_id=tag.id))

        logger.info(f"   ‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_idx + 1}: —Å–æ–∑–¥–∞–Ω–æ 10 –ø–æ—Å—Ç–æ–≤")

    # 6. –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ 10 —à—Ç—É–∫)
    logger.info("üí¨ –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...")
    for user_idx, user in enumerate(users):
        for comment_idx in range(10):
            # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            post = random.choice(posts)

            comment = await TestCommentFactory.create(author=user, post=post)
            comments.append(comment)

        logger.info(f"   ‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_idx + 1}: —Å–æ–∑–¥–∞–Ω–æ 10 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")

    # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await setup_test_models.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–æ–∑–¥–∞–ª–æ—Å—å
    logger.info(f"üìä –ò—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–æ:")
    logger.info(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    logger.info(f"   üë§ –ü—Ä–æ—Ñ–∏–ª–µ–π: {len(profiles)}")
    logger.info(f"   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
    logger.info(f"   üè∑Ô∏è –¢–µ–≥–æ–≤: {len(tags)}")
    logger.info(f"   üìù –ü–æ—Å—Ç–æ–≤: {len(posts)}")
    logger.info(f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}")

    # Assertions –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    assert len(users) == 10, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    assert len(profiles) == 10, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ 10 –ø—Ä–æ—Ñ–∏–ª–µ–π"
    assert len(categories) == 5, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
    assert len(tags) == 8, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ 8 —Ç–µ–≥–æ–≤"
    assert len(posts) == 100, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ 100 –ø–æ—Å—Ç–æ–≤ (10x10)"
    assert len(comments) == 100, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ 100 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (10x10)"

    logger.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")


@database_reset_test(verbose=True)
async def test_verify_relationships(setup_test_models):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
    """
    from sqlalchemy import select

    from .modesl_for_test import TestPost, TestProfile, TestUser

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å –ø–æ—Å—Ç—ã
    result = await setup_test_models.execute(select(TestUser).join(TestPost).limit(1))
    user_with_posts = result.scalar_one_or_none()

    if user_with_posts:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ—Å—Ç–∞–º–∏: {user_with_posts.username}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏
    result = await setup_test_models.execute(select(TestUser).join(TestProfile).limit(1))
    user_with_profile = result.scalar_one_or_none()

    if user_with_profile:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–æ—Ñ–∏–ª–µ–º: {user_with_profile.username}")

    logger.info("‚úÖ –°–≤—è–∑–∏ –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


@database_reset_test(verbose=True)
async def test_data_statistics(setup_test_models):
    """
    –°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    """
    from sqlalchemy import func, select

    from .modesl_for_test import TestCategory, TestComment, TestPost, TestProfile, TestTag, TestUser

    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
    logger.info("üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é
    user1 = TestUser(
        username="stat_user1", email="stat1@example.com", full_name="Stat User 1", hashed_password="password"
    )
    user2 = TestUser(
        username="stat_user2", email="stat2@example.com", full_name="Stat User 2", hashed_password="password"
    )

    setup_test_models.add_all([user1, user2])
    await setup_test_models.flush()
    await setup_test_models.refresh(user1)
    await setup_test_models.refresh(user2)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
    profile1 = TestProfile(
        user_id=user1.id, phone="+1-234-567-8901", city="Test City 1", country="Test Country 1", language="en"
    )
    profile2 = TestProfile(
        user_id=user2.id, phone="+1-234-567-8902", city="Test City 2", country="Test Country 2", language="en"
    )

    setup_test_models.add_all([profile1, profile2])

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = TestCategory(name="Test Category", slug="test-category", description="Test description")
    setup_test_models.add(category)
    await setup_test_models.flush()
    await setup_test_models.refresh(category)

    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã
    post1 = TestPost(
        title="Test Post 1", slug="test-post-1", content="Test content 1", author_id=user1.id, category_id=category.id
    )
    post2 = TestPost(
        title="Test Post 2", slug="test-post-2", content="Test content 2", author_id=user2.id, category_id=category.id
    )

    setup_test_models.add_all([post1, post2])
    await setup_test_models.commit()

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = {}

    models = {
        "users": TestUser,
        "posts": TestPost,
        "comments": TestComment,
        "categories": TestCategory,
        "tags": TestTag,
        "profiles": TestProfile,
    }

    logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")

    for name, model in models.items():
        result = await setup_test_models.execute(select(func.count(model.id)))
        count = result.scalar()
        stats[name] = count
        logger.info(f"   {name.title()}: {count}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
    assert stats["users"] >= 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    assert stats["posts"] >= 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –ø–æ—Å—Ç–∞"
    assert stats["profiles"] >= 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –ø—Ä–æ—Ñ–∏–ª—è"
    assert stats["categories"] >= 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1 –∫–∞—Ç–µ–≥–æ—Ä–∏—è"

    logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º!")
