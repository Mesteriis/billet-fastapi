"""
–¢–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ PostgreSQL.

–ü–æ–∫—Ä—ã–≤–∞–µ—Ç:
- search (plainto_tsquery)
- search_phrase (phraseto_tsquery)
- search_websearch (websearch_to_tsquery)
- search_raw (to_tsquery)
- search_rank –∏ search_rank_cd
- –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ (en, ru, simple)
- Edge cases –ø–æ–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
"""

import logging
from datetime import datetime, timezone

import pytest
from faker import Faker
from sqlalchemy.ext.asyncio import AsyncSession

from .enums import PostStatus, Priority
from .modesl_for_test import TestPost, TestUser

# –ò—Å–ø–æ–ª—å–∑—É–µ–º logger –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ conftest.py
logger = logging.getLogger("test_session")

fake = Faker()


@pytest.mark.fulltext
@pytest.mark.asyncio
async def test_all_fulltext_operators(
    setup_test_models: AsyncSession,
    post_repo,
    user_factory,
    post_factory,
) -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ PostgreSQL."""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞")

    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    authors: list[TestUser] = []
    for i in range(3):
        author = await user_factory.create(
            username=f"fulltext_author_{fake.uuid4()[:8]}_{i}",
            is_active=True,
            is_verified=True,
        )
        authors.append(author)

    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    posts_data = [
        {
            "title": "Python Programming Tutorial",
            "content": "–ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python –∏ PostgreSQL –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö",
            "status": PostStatus.PUBLISHED,
        },
        {
            "title": "JavaScript Development Guide",
            "content": "–ü–æ–ª–Ω—ã–π –≥–∏–¥ –ø–æ JavaScript –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Å PostgreSQL",
            "status": PostStatus.PUBLISHED,
        },
        {
            "title": "Database Design Principles",
            "content": "SQL –∏ NoSQL —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞",
            "status": PostStatus.PUBLISHED,
        },
    ]

    for i, data in enumerate(posts_data):
        await post_factory.create(
            title=data["title"],
            slug=f"fulltext-test-{i}",
            content=data["content"],
            status=data["status"],
            priority=Priority.MEDIUM,
            views_count=fake.random_int(min=10, max=1000),
            likes_count=fake.random_int(min=0, max=100),
            rating=fake.pyfloat(left_digits=1, right_digits=1, positive=True, max_value=5.0),
            published_at=fake.date_time_this_year(tzinfo=timezone.utc),
            is_featured=fake.boolean(chance_of_getting_true=20),
            is_premium=fake.boolean(chance_of_getting_true=10),
            allow_comments=True,
            author=authors[i % len(authors)],
            category=None,
        )

    logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(posts_data)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞")

    # –û–±–µ—Ä–Ω–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ try-catch, –ø–æ—Å–∫–æ–ª—å–∫—É –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è
    try:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π search –æ–ø–µ—Ä–∞—Ç–æ—Ä (plainto_tsquery)
        logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º search –æ–ø–µ—Ä–∞—Ç–æ—Ä")

        search_russian = await post_repo.list(content__search="–ø–æ–∏—Å–∫ PostgreSQL")
        logger.info(f"   –†—É—Å—Å–∫–∏–π search: {len(search_russian)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        search_programming = await post_repo.list(content__search="–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
        logger.info(f"   –ü–æ–∏—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: {len(search_programming)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # –¢–µ—Å—Ç 2: search_phrase –æ–ø–µ—Ä–∞—Ç–æ—Ä (phraseto_tsquery)
        logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º search_phrase –æ–ø–µ—Ä–∞—Ç–æ—Ä")

        phrase_search = await post_repo.list(content__search_phrase="–±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö")
        logger.info(f"   Phrase search: {len(phrase_search)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # –¢–µ—Å—Ç 3: search_websearch –æ–ø–µ—Ä–∞—Ç–æ—Ä (websearch_to_tsquery)
        logger.info("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º search_websearch –æ–ø–µ—Ä–∞—Ç–æ—Ä")

        websearch_result = await post_repo.list(content__search_websearch="PostgreSQL OR –ø–æ–∏—Å–∫")
        logger.info(f"   Web search: {len(websearch_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç")

    except Exception as e:
        logger.info(f"   –ü–æ–∏—Å–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–æ–∂–∏–¥–∞–µ–º–æ): {e}")

    # –¢–µ—Å—Ç —Å fulltext_search –º–µ—Ç–æ–¥–æ–º
    try:
        logger.info("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º fulltext_search –º–µ—Ç–æ–¥")

        rank_search = await post_repo.fulltext_search(
            search_fields=["title", "content"], query_text="PostgreSQL", include_rank=True, limit=10
        )
        logger.info(f"   Rank search: {len(rank_search)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ rank –≤–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if rank_search:
            first_result = rank_search[0]
            logger.info(f"   –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {first_result}")

    except Exception as e:
        logger.info(f"   Fulltext search –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ): {e}")


@pytest.mark.fulltext
@pytest.mark.asyncio
async def test_fulltext_edge_cases(setup_test_models, post_repo, user_factory, post_factory):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç edge cases –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.
    """
    logger.info("üö® –¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞")

    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    authors: list[TestUser] = []
    for i in range(2):
        author = await user_factory.create(
            username=f"edge_author_{fake.uuid4()[:8]}_{i}",
            is_active=True,
            is_verified=True,
        )
        authors.append(author)

    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã —Å edge case –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    edge_posts_data = [
        {
            "title": "HTML tags test",
            "content": "<script>alert('xss')</script> <h1>Title</h1> <p>Paragraph with <b>bold</b> text</p>",
        },
        {
            "title": "SQL injection attempt",
            "content": "'; DROP TABLE posts; --",
        },
        {
            "title": "Unicode and emojis üéâ",
            "content": "–¢–µ—Å—Ç —Å unicode —Å–∏–º–≤–æ–ª–∞–º–∏: √°√´√≠√≥√º, —ç–º–æ–¥–∂–∏ üöÄüî•üíØ, –∏ –∫–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã ‰Ω†Â•Ω‰∏ñÁïå",
        },
    ]

    for i, data in enumerate(edge_posts_data):
        await post_factory.create(
            title=data["title"],
            slug=f"edge-test-{i}",
            content=data["content"],
            status=PostStatus.PUBLISHED,
            priority=Priority.MEDIUM,
            views_count=100,
            likes_count=5,
            rating=3.0,
            is_featured=False,
            is_premium=False,
            allow_comments=True,
            author=authors[i % len(authors)],
            category=None,
        )

    # –û–±–µ—Ä–Ω–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ try-catch
    try:
        # Edge Case 1: –ü–æ–∏—Å–∫ HTML —Ç—ç–≥–æ–≤
        logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ HTML —Ç—ç–≥–æ–≤")

        html_search = await post_repo.list(content__search="HTML —Ç—ç–≥–∏")
        logger.info(f"   HTML search: {len(html_search)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # Edge Case 2: –ü–æ–∏—Å–∫ SQL –∏–Ω—ä–µ–∫—Ü–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º)
        logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π")

        sql_injection_search = await post_repo.list(content__search="DROP TABLE")
        logger.info(f"   SQL injection search: {len(sql_injection_search)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # Edge Case 3: Unicode —Å–∏–º–≤–æ–ª—ã
        logger.info("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Unicode —Å–∏–º–≤–æ–ª—ã")

        unicode_search = await post_repo.list(content__search="unicode —Å–∏–º–≤–æ–ª–∞–º–∏")
        logger.info(f"   Unicode search: {len(unicode_search)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        logger.info("‚úÖ Edge cases –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.info(f"   Edge cases –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–æ–∂–∏–¥–∞–µ–º–æ): {e}")


@pytest.mark.fulltext
@pytest.mark.asyncio
async def test_fulltext_with_filters(setup_test_models, post_repo, user_factory, post_factory):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.
    """
    logger.info("üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")

    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    authors: list[TestUser] = []
    for i in range(2):
        author = await user_factory.create(
            username=f"filter_author_{fake.uuid4()[:8]}_{i}",
            is_active=True,
            is_verified=True,
        )
        authors.append(author)

    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    filter_posts_data = [
        {
            "title": "Programming tutorial",
            "content": "–ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ–∏—Å–∫",
            "status": PostStatus.PUBLISHED,
            "priority": Priority.HIGH,
            "views_count": 1000,
            "is_featured": True,
        },
        {
            "title": "Programming basics",
            "content": "–ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ–∏—Å–∫",
            "status": PostStatus.DRAFT,
            "priority": Priority.MEDIUM,
            "views_count": 500,
            "is_premium": True,
        },
        {
            "title": "Advanced programming",
            "content": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ–∏—Å–∫",
            "status": PostStatus.PUBLISHED,
            "priority": Priority.LOW,
            "views_count": 200,
            "allow_comments": False,
        },
    ]

    for i, data in enumerate(filter_posts_data):
        await post_factory.create(
            title=data["title"],
            slug=f"filter-test-{i}",
            content=data["content"],
            status=data["status"],
            priority=data["priority"],
            views_count=data["views_count"],
            likes_count=fake.random_int(min=5, max=50),
            rating=fake.pyfloat(left_digits=1, right_digits=1, positive=True, max_value=5.0),
            is_featured=data.get("is_featured", False),
            is_premium=data.get("is_premium", False),
            allow_comments=data.get("allow_comments", True),
            author=authors[i % len(authors)],
            category=None,
        )

    # –û–±–µ—Ä–Ω–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ try-catch
    try:
        # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ + —Å—Ç–∞—Ç—É—Å
        logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ + —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É")

        search_published = await post_repo.list(content__search="—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é", status=PostStatus.PUBLISHED)
        logger.info(f"   Search + Published: {len(search_published)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ + —á–∏—Å–ª–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ + —á–∏—Å–ª–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")

        search_with_views = await post_repo.list(content__search="—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é", views_count__gte=200)
        logger.info(f"   Search + views >= 200: {len(search_with_views)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        logger.info("‚úÖ –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

    except Exception as e:
        logger.info(f"   –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ): {e}")

    # –¢–µ—Å—Ç –æ–±—ã—á–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±–µ–∑ –ø–æ–∏—Å–∫–∞
    logger.info("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")

    published_posts = await post_repo.list(status=PostStatus.PUBLISHED)
    logger.info(f"   Published posts: {len(published_posts)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    high_views_posts = await post_repo.list(views_count__gte=500)
    logger.info(f"   High views posts: {len(high_views_posts)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")


logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫!")
