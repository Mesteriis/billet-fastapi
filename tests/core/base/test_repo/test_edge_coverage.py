"""
Edge cases –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 95% –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
"""

import logging
import uuid
from datetime import date, datetime
from typing import Any
from unittest.mock import AsyncMock, MagicMock, patch

import pytest
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError, SQLAlchemyError

# –§–∏–∫—Å—Ç—É—Ä—ã post_repo, user_repo –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ conftest.py
from .enums import PostStatus, Priority
from .modesl_for_test import TestPost, TestUser

# –ò—Å–ø–æ–ª—å–∑—É–µ–º logger –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ conftest.py
logger = logging.getLogger("test_session")


@pytest.mark.edge_cases
@pytest.mark.asyncio
async def test_filter_validation_edge_cases(setup_test_models, user_repo, user_factory):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç edge cases –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    """
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤")

    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_users = []
    for i in range(3):
        user = await user_factory.create(
            username=f"test_edge_user_{i}_{uuid.uuid4().hex[:8]}", email=f"edge_{i}@test.com"
        )
        test_users.append(user)

    await setup_test_models.commit()

    # Edge Case 1: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–π")

    # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è in –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    empty_in_result = await user_repo.list(id__in=[])
    assert len(empty_in_result) == 0, "–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ IN –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"

    # None –¥–ª—è in –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä)
    none_in_result = await user_repo.list(id__in=None)
    logger.info(f"   None –≤ IN –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ: {len(none_in_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # –í–∞–ª–∏–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è - –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    valid_ids = [user.id for user in test_users]
    valid_in_result = await user_repo.list(id__in=valid_ids)
    assert len(valid_in_result) >= 3, f"–í–∞–ª–∏–¥–Ω—ã–π IN –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞–π–¥–µ–Ω–æ {len(valid_in_result)}"

    # Edge Case 2: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è")

    # –° patch –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    with patch("core.base.repo.repository.logger") as mock_logger:
        nonexistent_field_result = await user_repo.list(nonexistent_field="value")
        mock_logger.warning.assert_called()
        logger.info(f"   –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ: {len(nonexistent_field_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")


@pytest.mark.edge_cases
@pytest.mark.asyncio
async def test_bulk_operations_error_handling(setup_test_models, user_repo):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ bulk –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
    """
    logger.info("üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ bulk –æ–ø–µ—Ä–∞—Ü–∏—è—Ö")

    # Edge Case 1: Bulk create —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è –¥–∞–Ω–Ω—ã–º–∏
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º bulk create —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è –¥–∞–Ω–Ω—ã–º–∏")

    duplicate_data = [
        {
            "username": "duplicate_user_test",
            "email": "duplicate_test@test.com",
            "full_name": "Duplicate User",
            "hashed_password": "password",
        },
        {
            "username": "duplicate_user_test",  # –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è username
            "email": "duplicate2_test@test.com",
            "full_name": "Duplicate User 2",
            "hashed_password": "password",
        },
    ]

    try:
        duplicate_result = await user_repo.bulk_create(duplicate_data)
        logger.info(f"   –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {len(duplicate_result)} —Å–æ–∑–¥–∞–Ω–æ")
    except Exception as e:
        logger.info(f"   –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")


@pytest.mark.edge_cases
@pytest.mark.asyncio
async def test_aggregation_edge_cases(setup_test_models, post_repo):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç edge cases –≤ –∞–≥—Ä–µ–≥–∞—Ü–∏—è—Ö.
    """
    logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases –∞–≥—Ä–µ–≥–∞—Ü–∏–π")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å—Ç–æ–≤
    test_user = TestUser(
        username="agg_test_user", email="agg@test.com", full_name="Aggregation Test User", hashed_password="password"
    )
    setup_test_models.add(test_user)
    await setup_test_models.flush()
    await setup_test_models.refresh(test_user)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_posts = []
    for i in range(5):
        post = TestPost(
            title=f"Aggregation Test Post {i}",
            slug=f"agg-test-edge-{i}",
            content=f"Content {i}",
            views_count=i * 10,
            likes_count=i * 2,
            rating=float(i % 5 + 1),
            status=PostStatus.PUBLISHED if i % 2 else PostStatus.DRAFT,
            author_id=test_user.id,  # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        )
        test_posts.append(post)

    setup_test_models.add_all(test_posts)
    await setup_test_models.commit()

    # Edge Case 1: –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—é
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—é")

    try:
        nonexistent_agg = await post_repo.aggregate(field="nonexistent_field")
        logger.info(f"   –ê–≥—Ä–µ–≥–∞—Ü–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—è: {len(nonexistent_agg)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    except Exception as e:
        logger.info(f"   –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {e}")


logger.info("‚úÖ Edge case —Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã!")
