"""
–¢–µ—Å—Ç—ã –¥–ª—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ edge cases –≤ repository.

–ü–æ–∫—Ä—ã–≤–∞–µ—Ç:
- Edge cases –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, None, –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏)
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –∞–≥—Ä–µ–≥–∞—Ü–∏—è—Ö
- –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
- Edge cases –∫—É—Ä—Å–æ—Ä–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import logging
from datetime import datetime
from typing import Any
from unittest.mock import MagicMock, patch

import pytest
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError, SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession

from core.base.repo.repository import BaseRepository

from .conftest import post_repo, user_repo
from .enums import PostStatus, Priority
from .factories import fake
from .modesl_for_test import TestPost, TestUser

# –ò—Å–ø–æ–ª—å–∑—É–µ–º logger –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ conftest.py
logger = logging.getLogger("test_session")


@pytest.mark.edge_cases
@pytest.mark.asyncio
async def test_filter_validation_edge_cases(setup_test_models, user_repo, user_factory):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç edge cases –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    –ü–æ–∫—Ä—ã–≤–∞–µ—Ç _validate_filter_value –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    test_user = await user_factory.create(
        username="filter_test_user",
        email="filter@test.com",
        full_name="Filter Test User",
    )

    # Edge Case 1: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–π")

    # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è in –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    empty_in_result = await user_repo.list(id__in=[])
    # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ IN –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    logger.info(f"   –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ IN –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ: {len(empty_in_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # None –¥–ª—è in –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    none_in_result = await user_repo.list(id__in=None)
    logger.info(f"   None –≤ IN –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ: {len(none_in_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π between (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ)
    single_between_result = await user_repo.list(created_at__between=[datetime.now()])
    logger.info(f"   –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π between: {len(single_between_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # Edge Case 2: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è date –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è date –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")

    # –°—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ –¥–∞—Ç—ã
    string_date_result = await user_repo.list(created_at__date="not-a-date")
    logger.info(f"   –°—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ –¥–∞—Ç—ã: {len(string_date_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥
    invalid_year_result = await user_repo.list(created_at__year=99999)
    logger.info(f"   –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥: {len(invalid_year_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü
    invalid_month_result = await user_repo.list(created_at__month=13)
    logger.info(f"   –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü: {len(invalid_month_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # Edge Case 3: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    logger.info("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è")

    # –° patch –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    with patch("core.base.repo.repository.logger") as mock_logger:
        nonexistent_field_result = await user_repo.list(nonexistent_field="value")
        mock_logger.warning.assert_called()
        logger.info(f"   –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ: {len(nonexistent_field_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # Edge Case 4: –§–∏–ª—å—Ç—Ä –±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—è (—Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä)
    logger.info("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—è")

    with patch("core.base.repo.repository.logger") as mock_logger:
        operator_only_result = await user_repo.list(**{"__icontains": "test"})
        mock_logger.warning.assert_called()
        logger.info(f"   –¢–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä: {len(operator_only_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")


@pytest.mark.edge_cases
@pytest.mark.asyncio
async def test_complex_filter_error_handling(setup_test_models, user_repo):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö.
    """
    logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö")

    # Edge Case 1: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ WHERE —É—Å–ª–æ–≤–∏—è
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ WHERE —É—Å–ª–æ–≤–∏—è—Ö")

    with patch("core.base.repo.repository.OPERATORS") as mock_operators:
        # –ú–æ–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        mock_operators.__getitem__ = MagicMock(side_effect=Exception("Mock error"))
        mock_operators.__contains__ = MagicMock(return_value=True)

        with patch("core.base.repo.repository.logger") as mock_logger:
            error_result = await user_repo.list(username__eq="test")
            mock_logger.error.assert_called()
            logger.info(f"   –û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ: {len(error_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # Edge Case 2: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ apply_complex_filters
    logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    complex_result = await user_repo.list_with_complex_filters(
        {"and_filters": {"username": None}, "or_filters": [{"email": None}], "not_filters": {"full_name": None}}
    )
    logger.info(f"   –°–ª–æ–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å None: {len(complex_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")


@pytest.mark.edge_cases
@pytest.mark.asyncio
async def test_bulk_operations_error_handling(setup_test_models, user_repo):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ bulk –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.
    """
    logger.info("üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ bulk –æ–ø–µ—Ä–∞—Ü–∏—è—Ö")

    # Edge Case 1: Bulk create —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è –¥–∞–Ω–Ω—ã–º–∏
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º bulk create —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è –¥–∞–Ω–Ω—ã–º–∏")

    duplicate_data = [
        {
            "username": "duplicate_user",
            "email": "duplicate@test.com",
            "full_name": "Duplicate User",
            "hashed_password": "password",
        },
        {
            "username": "duplicate_user",  # –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è username
            "email": "duplicate2@test.com",
            "full_name": "Duplicate User 2",
            "hashed_password": "password",
        },
    ]

    try:
        duplicate_result = await user_repo.bulk_create(duplicate_data)
        logger.info(f"   –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {len(duplicate_result)} —Å–æ–∑–¥–∞–Ω–æ")
    except Exception as e:
        logger.info(f"   –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    # Edge Case 2: Bulk create —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º bulk create —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

    invalid_data = [
        {
            "username": "valid_user_1",
            "email": "valid1@test.com",
            "full_name": "Valid User 1",
            "hashed_password": "password",
        },
        {
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ username
            "email": "invalid@test.com",
            "full_name": "Invalid User",
            "hashed_password": "password",
        },
    ]

    try:
        invalid_result = await user_repo.bulk_create(invalid_data)
        logger.info(f"   –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {len(invalid_result)} —Å–æ–∑–¥–∞–Ω–æ")
    except Exception as e:
        logger.info(f"   –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

    # Edge Case 3: Bulk update —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
    logger.info("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º bulk update —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏")

    try:
        nonexistent_update = await user_repo.bulk_update(
            filters={"username": "any"}, update_data={"nonexistent_field": "value"}
        )
        logger.info(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—è: {nonexistent_update} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        logger.info(f"   –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—è: {e}")


@pytest.mark.edge_cases
@pytest.mark.asyncio
async def test_cache_error_handling(setup_test_models, user_repo):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    logger.info("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")

    # Edge Case 1: –ö—ç—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –∫—ç—à")

    if user_repo._cache_manager:
        with patch.object(user_repo._cache_manager, "get", side_effect=Exception("Cache error")):
            with patch.object(user_repo._cache_manager, "set", side_effect=Exception("Cache error")):
                # –û–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –±–µ–∑ –∫—ç—à–∞
                cache_error_result = await user_repo.list(limit=5)
                logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –∫—ç—à–∞: {len(cache_error_result)} –∑–∞–ø–∏—Å–µ–π")

        # Edge Case 2: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞
        logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞")

        with patch.object(
            user_repo._cache_manager, "delete_pattern", side_effect=Exception("Cache invalidation error")
        ):
            try:
                await user_repo.invalidate_cache("test_pattern")
                logger.info("   –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
            except Exception as e:
                logger.info(f"   –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞: {e}")
    else:
        logger.info("   –ö—ç—à –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∫—ç—à–∞")


@pytest.mark.edge_cases
@pytest.mark.asyncio
@pytest.mark.edge_coverage
async def test_aggregation_edge_cases(
    setup_test_models: AsyncSession,
    post_repo: BaseRepository,
    user_factory,
    post_factory,
) -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –∞–≥—Ä–µ–≥–∞—Ü–∏–∏."""
    logger = logging.getLogger("test_session")
    logger.info("üî¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")

    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    authors: list[TestUser] = []
    for i in range(2):
        author = await user_factory.create(
            username=f"agg_author_{fake.uuid4()[:8]}_{i}",
            is_active=True,
            is_verified=True,
        )
        authors.append(author)

    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    posts_data = [
        {"title": "High Rating Post", "rating": 4.8, "views": 1000},
        {"title": "Medium Rating Post", "rating": 3.2, "views": 500},
        {"title": "Low Rating Post", "rating": 1.1, "views": 100},
        {"title": "No Rating Post", "rating": None, "views": 50},
    ]

    for i, data in enumerate(posts_data):
        post = await post_factory.create(
            title=data["title"],
            slug=f"agg-test-{i}",
            content=f"Content for {data['title']}",
            rating=data["rating"],
            views_count=data["views"],
            author=authors[i % len(authors)],
            category=None,  # –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            status=PostStatus.PUBLISHED,
            priority=Priority.MEDIUM,
            likes_count=0,
            is_featured=False,
            is_premium=False,
            allow_comments=True,
        )


@pytest.mark.edge_cases
@pytest.mark.asyncio
async def test_fulltext_search_edge_cases(setup_test_models, post_repo, user_factory, post_factory):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç edge cases –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.
    """
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞")

    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    authors: list[TestUser] = []
    for i in range(2):
        author = await user_factory.create(
            username=f"search_author_{fake.uuid4()[:8]}_{i}",
            is_active=True,
            is_verified=True,
        )
        authors.append(author)

    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    search_posts = []
    for i, content in enumerate(
        [
            "–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ PostgreSQL",
            "English text for fulltext search PostgreSQL",
            "Mixed —Ä—É—Å—Å–∫–∏–π and english —Ç–µ–∫—Å—Ç —Å –ø–æ–∏—Å–∫–æ–º PostgreSQL",
            "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: !@#$%^&*() –∏ –ø–æ–∏—Å–∫ PostgreSQL",
            "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç —Å –ø–æ–∏—Å–∫–æ–º PostgreSQL",  # –£–±—Ä–∞–ª –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            "Empty –ø–æ–∏—Å–∫ PostgreSQL",  # –ö–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        ]
    ):
        post = await post_factory.create(
            title=f"Search Test {i}",
            slug=f"search-test-{i}",
            content=content,
            status=PostStatus.PUBLISHED,
            priority=Priority.MEDIUM,
            views_count=fake.random_int(min=10, max=100),
            likes_count=fake.random_int(min=0, max=20),
            rating=fake.pyfloat(left_digits=1, right_digits=1, positive=True, max_value=5.0),
            is_featured=False,
            is_premium=False,
            allow_comments=True,
            author=authors[i % len(authors)],
            category=None,  # –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        )
        search_posts.append(post)

    # Edge Case 1: –ü–æ–∏—Å–∫ —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º")

    try:
        empty_search = await post_repo.fulltext_search(search_fields=["title", "content"], query_text="")
        logger.info(f"   –ü—É—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {len(empty_search)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    except Exception as e:
        logger.info(f"   –û—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ): {e}")

    # Edge Case 2: –ü–æ–∏—Å–∫ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—é
    logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—é")

    try:
        nonexistent_field_search = await post_repo.fulltext_search(
            search_fields=["nonexistent_field"], query_text="test"
        )
        logger.info(f"   –ü–æ–∏—Å–∫ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—é: {len(nonexistent_field_search)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    except Exception as e:
        logger.info(f"   –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—é: {e}")

    # Edge Case 3: –ü–æ–∏—Å–∫ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —è–∑—ã–∫–æ–º
    logger.info("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —è–∑—ã–∫–æ–º")

    try:
        invalid_lang_search = await post_repo.fulltext_search(
            search_fields=["content"], query_text="test", language="nonexistent_language"
        )
        logger.info(f"   –ü–æ–∏—Å–∫ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —è–∑—ã–∫–æ–º: {len(invalid_lang_search)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    except Exception as e:
        logger.info(f"   –û—à–∏–±–∫–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —è–∑—ã–∫–æ–º: {e}")

    # Edge Case 4: –ü–æ–∏—Å–∫ —Å —É–º–µ—Ä–µ–Ω–Ω–æ –¥–ª–∏–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º (—É–±—Ä–∞–ª –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π)
    logger.info("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å –¥–ª–∏–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º")

    try:
        long_query = "–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å PostgreSQL —Ç–µ–∫—Å—Ç"  # –ö–æ—Ä–æ—á–µ —á–µ–º —Ä–∞–Ω—å—à–µ
        long_query_search = await post_repo.fulltext_search(
            search_fields=["content"],
            query_text=long_query,
        )
        logger.info(f"   –î–ª–∏–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {len(long_query_search)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    except Exception as e:
        logger.info(f"   –û—à–∏–±–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")

    # –£–±–∏—Ä–∞–µ–º assert'—ã —á—Ç–æ–±—ã —Ç–µ—Å—Ç –Ω–µ –ø–∞–¥–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–∏—Å–∫–∞
    logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.edge_cases
@pytest.mark.asyncio
async def test_cursor_pagination_edge_cases(setup_test_models, post_repo, user_factory, post_factory):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç edge cases –∫—É—Ä—Å–æ—Ä–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    """
    logger.info("üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases –∫—É—Ä—Å–æ—Ä–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")

    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    authors: list[TestUser] = []
    for i in range(3):
        author = await user_factory.create(
            username=f"cursor_author_{fake.uuid4()[:8]}_{i}",
            is_active=True,
            is_verified=True,
        )
        authors.append(author)

    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    pagination_posts = []
    for i in range(20):
        post = await post_factory.create(
            title=f"Pagination Test {i}",
            slug=f"pagination-test-{i}",
            content=f"Content {i}",
            views_count=i * 5,
            status=PostStatus.PUBLISHED,
            priority=Priority.MEDIUM,
            likes_count=fake.random_int(min=0, max=10),
            rating=fake.pyfloat(left_digits=1, right_digits=1, positive=True, max_value=5.0),
            is_featured=fake.boolean(chance_of_getting_true=20),
            is_premium=fake.boolean(chance_of_getting_true=10),
            allow_comments=True,
            author=authors[i % len(authors)],
            category=None,  # –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        )
        pagination_posts.append(post)

    # Edge Case 1: –ö—É—Ä—Å–æ—Ä —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å–æ—Ä —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º")

    nonexistent_cursor = await post_repo.paginate_cursor(
        cursor_field="views_count",
        cursor_value=99999,  # –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
        limit=5,
    )
    logger.info(f"   –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—É—Ä—Å–æ—Ä: {len(nonexistent_cursor.items)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # Edge Case 2: –ö—É—Ä—Å–æ—Ä –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—é
    logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—é")

    try:
        nonexistent_field_cursor = await post_repo.paginate_cursor(cursor_field="nonexistent_field", limit=5)
        logger.info(f"   –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –∫—É—Ä—Å–æ—Ä–∞: {len(nonexistent_field_cursor.items)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    except Exception as e:
        logger.info(f"   –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –∫—É—Ä—Å–æ—Ä–∞: {e}")

    # Edge Case 3: –ù—É–ª–µ–≤–æ–π –ª–∏–º–∏—Ç
    logger.info("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω—É–ª–µ–≤–æ–π –ª–∏–º–∏—Ç")

    zero_limit_cursor = await post_repo.paginate_cursor(cursor_field="id", limit=0)
    logger.info(f"   –ù—É–ª–µ–≤–æ–π –ª–∏–º–∏—Ç: {len(zero_limit_cursor.items)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    assert len(zero_limit_cursor.items) == 0, "–ù—É–ª–µ–≤–æ–π –ª–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"

    # Edge Case 4: –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç
    logger.info("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç")

    large_limit_cursor = await post_repo.paginate_cursor(cursor_field="id", limit=10000)
    logger.info(f"   –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç: {len(large_limit_cursor.items)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")


@pytest.mark.edge_cases
@pytest.mark.asyncio
async def test_join_and_relationship_edge_cases(setup_test_models, user_repo):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç edge cases –≤ JOIN –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –∏ —Å–≤—è–∑—è—Ö.
    """
    logger.info("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases JOIN –æ–ø–µ—Ä–∞—Ü–∏–π")

    # Edge Case 1: –§–∏–ª—å—Ç—Ä –ø–æ —Å–≤—è–∑–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–≤—è–∑–∏")

    try:
        nonexistent_relation = await user_repo.list(nonexistent_relation__field="value")
        logger.info(f"   –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–≤—è–∑—å: {len(nonexistent_relation)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    except Exception as e:
        logger.info(f"   –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∏: {e}")

    # Edge Case 2: –ì–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏
    logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏")

    try:
        deep_relation = await user_repo.list(profile__user__profile__city="test")
        logger.info(f"   –ì–ª—É–±–æ–∫–∞—è —Å–≤—è–∑—å: {len(deep_relation)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    except Exception as e:
        logger.info(f"   –û—à–∏–±–∫–∞ –≥–ª—É–±–æ–∫–æ–π —Å–≤—è–∑–∏: {e}")


@pytest.mark.edge_cases
@pytest.mark.asyncio
async def test_transaction_and_session_edge_cases(setup_test_models, user_repo):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç edge cases —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Å–µ—Å—Å–∏–π.
    """
    logger.info("üíæ –¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

    # Edge Case 1: –û–ø–µ—Ä–∞—Ü–∏—è —Å –∑–∞–∫—Ä—ã—Ç–æ–π —Å–µ—Å—Å–∏–µ–π
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å–µ—Å—Å–∏–µ–π")

    # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É —Å–µ—Å—Å–∏–∏
    with patch.object(setup_test_models, "execute", side_effect=SQLAlchemyError("Session error")):
        try:
            session_error_result = await user_repo.list()
            logger.info(f"   –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {len(session_error_result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            logger.info(f"   –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏: {e}")

    # Edge Case 2: Rollback –ø—Ä–∏ –æ—à–∏–±–∫–µ
    logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º rollback –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è")

    with patch.object(setup_test_models, "commit", side_effect=Exception("Test error")):
        try:
            error_user = await user_repo.create(
                {
                    "username": "error_user",
                    "email": "error@test.com",
                    "full_name": "Error User",
                    "hashed_password": "password",
                }
            )
            logger.info("   –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        except Exception as e:
            logger.info(f"   –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")


@pytest.mark.edge_cases
@pytest.mark.asyncio
async def test_model_conversion_edge_cases(setup_test_models, user_repo, user_factory):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç edge cases –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π.
    """
    logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π")

    # Edge Case 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    test_user = await user_factory.create(
        username="conversion_test", email="conversion@test.com", full_name="Conversion Test"
    )
    await setup_test_models.refresh(test_user)

    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try:
        updated_user = await user_repo.update(
            test_user,
            {"nonexistent_field": "value"},  # –ü–æ–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –º–æ–¥–µ–ª–∏
        )
        logger.info("   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    except Exception as e:
        logger.info(f"   –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    # Edge Case 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏")

    try:
        extra_fields_user = await user_repo.create(
            {
                "username": "extra_fields_user",
                "email": "extra@test.com",
                "full_name": "Extra Fields User",
                "hashed_password": "password",
                "extra_field": "should_be_ignored",  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
            }
        )
        logger.info("   –°–æ–∑–¥–∞–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    except Exception as e:
        logger.info(f"   –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏: {e}")


logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ edge case —Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã!")
