"""–¢–µ—Å—Ç—ã –¥–ª—è TaskIQ CLI –∫–æ–º–∞–Ω–¥."""

from unittest.mock import AsyncMock, MagicMock, patch

import pytest
from click.testing import CliRunner

from src.cli import cli, setup_logging


class TestCLICommands:
    """–¢–µ—Å—Ç—ã –¥–ª—è CLI –∫–æ–º–∞–Ω–¥."""

    @pytest.fixture
    def runner(self):
        """–°–æ–∑–¥–∞–µ—Ç CLI runner –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        return CliRunner()

    def test_cli_help(self, runner):
        """–¢–µ—Å—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ CLI."""
        result = runner.invoke(cli, ["--help"])
        assert result.exit_code == 0
        assert "TaskIQ Management CLI" in result.output

    @patch("src.cli.run_worker_async")
    @patch("src.cli.asyncio.run")
    def test_worker_command_default(self, mock_asyncio_run, mock_run_worker, runner):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã worker —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        result = runner.invoke(cli, ["worker"])

        assert result.exit_code == 0
        assert "üöÄ –ó–∞–ø—É—Å–∫" in result.output
        mock_asyncio_run.assert_called_once()

    @patch("src.cli.run_worker_async")
    @patch("src.cli.asyncio.run")
    def test_worker_command_with_options(self, mock_asyncio_run, mock_run_worker, runner):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã worker —Å –æ–ø—Ü–∏—è–º–∏."""
        result = runner.invoke(
            cli, ["worker", "--workers", "8", "--max-tasks", "100", "--max-memory", "512", "--reload"]
        )

        assert result.exit_code == 0
        assert "üöÄ –ó–∞–ø—É—Å–∫ 8 TaskIQ –≤–æ—Ä–∫–µ—Ä–æ–≤" in result.output
        mock_asyncio_run.assert_called_once()

    @patch("src.cli.run_worker_async")
    @patch("src.cli.asyncio.run")
    def test_worker_command_keyboard_interrupt(self, mock_asyncio_run, mock_run_worker, runner):
        """–¢–µ—Å—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã worker."""
        mock_asyncio_run.side_effect = KeyboardInterrupt()

        result = runner.invoke(cli, ["worker"])

        assert result.exit_code == 0
        assert "üëã TaskIQ –≤–æ—Ä–∫–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" in result.output

    @patch("src.cli.run_worker_async")
    @patch("src.cli.asyncio.run")
    def test_worker_command_exception(self, mock_asyncio_run, mock_run_worker, runner):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–µ worker."""
        mock_asyncio_run.side_effect = Exception("Worker failed to start")

        result = runner.invoke(cli, ["worker"])

        assert result.exit_code == 1
        assert "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–æ—Ä–∫–µ—Ä–æ–≤" in result.output

    def test_scheduler_command(self, runner):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã scheduler."""
        result = runner.invoke(cli, ["scheduler"])

        assert result.exit_code == 0
        assert "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω" in result.output
        assert "üí° –î–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ cron" in result.output

    @patch("src.cli.send_email_notification")
    @patch("src.cli.broker")
    @patch("src.cli.asyncio.run")
    def test_test_command_default(self, mock_asyncio_run, mock_broker, mock_task, runner):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã test —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
        mock_task.kiq = AsyncMock()
        mock_task_result = MagicMock()
        mock_task_result.task_id = "test-task-123"
        mock_task.kiq.return_value = mock_task_result

        mock_broker.startup = AsyncMock()
        mock_broker.shutdown = AsyncMock()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ async run –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        def run_async_func(func):
            import asyncio

            return asyncio.run(func())

        mock_asyncio_run.side_effect = run_async_func

        result = runner.invoke(cli, ["test"])

        assert result.exit_code == 0
        assert "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TaskIQ" in result.output
        assert "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ" in result.output

    @patch("src.cli.send_email_notification")
    @patch("src.cli.broker")
    @patch("src.cli.asyncio.run")
    def test_test_command_with_task_name(self, mock_asyncio_run, mock_broker, mock_task, runner):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã test —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏."""
        mock_task.kiq = AsyncMock()
        mock_task_result = MagicMock()
        mock_task_result.task_id = "email-test-456"
        mock_task.kiq.return_value = mock_task_result

        mock_broker.startup = AsyncMock()
        mock_broker.shutdown = AsyncMock()

        def run_async_func(func):
            import asyncio

            return asyncio.run(func())

        mock_asyncio_run.side_effect = run_async_func

        result = runner.invoke(cli, ["test", "--task-name", "email"])

        assert result.exit_code == 0
        assert "üìß –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email" in result.output

    @patch("src.cli.broker")
    @patch("src.cli.asyncio.run")
    def test_test_command_exception(self, mock_asyncio_run, mock_broker, runner):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–µ test."""
        mock_broker.startup = AsyncMock(side_effect=Exception("Connection failed"))

        def run_async_func(func):
            import asyncio

            return asyncio.run(func())

        mock_asyncio_run.side_effect = run_async_func

        result = runner.invoke(cli, ["test"])

        assert result.exit_code == 1
        assert "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" in result.output

    @patch("src.cli.settings")
    def test_info_command(self, mock_settings, runner):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã info."""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        mock_settings.TASKIQ_BROKER_URL = "redis://localhost:6379/1"
        mock_settings.TASKIQ_RESULT_BACKEND_URL = "redis://localhost:6379/2"
        mock_settings.MAX_BACKGROUND_WORKERS = 4
        mock_settings.TASKIQ_MAX_RETRIES = 3
        mock_settings.TASKIQ_RETRY_DELAY = 5
        mock_settings.TASKIQ_TASK_TIMEOUT = 300

        result = runner.invoke(cli, ["info"])

        assert result.exit_code == 0
        assert "‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TaskIQ" in result.output
        assert "redis://localhost:6379/1" in result.output
        assert "redis://localhost:6379/2" in result.output
        assert "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏" in result.output
        assert "send_email_notification" in result.output
        assert "process_file" in result.output


class TestCLIUtilities:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç CLI."""

    @patch("src.cli.logging.basicConfig")
    @patch("src.cli.settings")
    def test_setup_logging(self, mock_settings, mock_logging_config):
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        mock_settings.LOG_LEVEL = "DEBUG"
        mock_settings.LOG_FORMAT = "%(asctime)s - %(message)s"
        mock_settings.LOG_FILE = "test.log"

        setup_logging()

        mock_logging_config.assert_called_once()
        args, kwargs = mock_logging_config.call_args
        assert "level" in kwargs
        assert "format" in kwargs
        assert "handlers" in kwargs

    @pytest.fixture
    def runner(self):
        """–°–æ–∑–¥–∞–µ—Ç CLI runner –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        return CliRunner()

    def test_cli_group_exists(self, runner):
        """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è CLI –≥—Ä—É–ø–ø—ã."""
        result = runner.invoke(cli)
        assert result.exit_code == 0

    def test_all_commands_exist(self, runner):
        """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥."""
        result = runner.invoke(cli, ["--help"])

        expected_commands = ["worker", "scheduler", "test", "info"]
        for command in expected_commands:
            assert command in result.output


class TestCLISignalHandling:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ CLI."""

    @pytest.fixture
    def runner(self):
        """–°–æ–∑–¥–∞–µ—Ç CLI runner –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        return CliRunner()

    @patch("src.cli.signal.signal")
    @patch("src.cli.run_worker_async")
    @patch("src.cli.asyncio.run")
    def test_signal_handler_setup(self, mock_asyncio_run, mock_run_worker, mock_signal, runner):
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        result = runner.invoke(cli, ["worker"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        assert mock_signal.call_count >= 2  # SIGINT –∏ SIGTERM

    @patch("src.cli.sys.exit")
    @patch("src.cli.signal.signal")
    @patch("src.cli.run_worker_async")
    @patch("src.cli.asyncio.run")
    def test_signal_handler_execution(self, mock_asyncio_run, mock_run_worker, mock_signal, mock_exit, runner):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ –≤—ã–∑–æ–≤–æ–≤ signal.signal
        signal_handler = None

        def capture_signal_handler(sig, handler):
            nonlocal signal_handler
            signal_handler = handler

        mock_signal.side_effect = capture_signal_handler

        result = runner.invoke(cli, ["worker"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        assert signal_handler is not None

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        if signal_handler:
            signal_handler(None, None)
            mock_exit.assert_called_once_with(0)


class TestCLIErrorScenarios:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫ –≤ CLI."""

    @pytest.fixture
    def runner(self):
        """–°–æ–∑–¥–∞–µ—Ç CLI runner –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        return CliRunner()

    def test_invalid_command(self, runner):
        """–¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã."""
        result = runner.invoke(cli, ["invalid-command"])
        assert result.exit_code != 0

    def test_invalid_worker_options(self, runner):
        """–¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è worker."""
        result = runner.invoke(cli, ["worker", "--workers", "invalid"])
        assert result.exit_code != 0

    def test_invalid_max_tasks_option(self, runner):
        """–¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –æ–ø—Ü–∏–∏ max-tasks."""
        result = runner.invoke(cli, ["worker", "--max-tasks", "not-a-number"])
        assert result.exit_code != 0

    def test_invalid_max_memory_option(self, runner):
        """–¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –æ–ø—Ü–∏–∏ max-memory."""
        result = runner.invoke(cli, ["worker", "--max-memory", "invalid-memory"])
        assert result.exit_code != 0


class TestCLIOutputFormatting:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ CLI."""

    @pytest.fixture
    def runner(self):
        """–°–æ–∑–¥–∞–µ—Ç CLI runner –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        return CliRunner()

    @patch("src.cli.settings")
    def test_info_command_formatting(self, mock_settings, runner):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã info."""
        mock_settings.TASKIQ_BROKER_URL = "redis://test:6379/1"
        mock_settings.TASKIQ_RESULT_BACKEND_URL = "redis://test:6379/2"
        mock_settings.MAX_BACKGROUND_WORKERS = 8
        mock_settings.TASKIQ_MAX_RETRIES = 5
        mock_settings.TASKIQ_RETRY_DELAY = 10
        mock_settings.TASKIQ_TASK_TIMEOUT = 600

        result = runner.invoke(cli, ["info"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ã–≤–æ–¥–∞
        lines = result.output.split("\n")

        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å emoji –≤ –≤—ã–≤–æ–¥–µ
        emoji_lines = [
            line for line in lines if any(emoji in line for emoji in ["üìä", "üíæ", "üë•", "üîÑ", "‚è±Ô∏è", "‚è∞", "üìã"])
        ]
        assert len(emoji_lines) >= 6

    @patch("src.cli.run_worker_async")
    @patch("src.cli.asyncio.run")
    def test_worker_command_output_formatting(self, mock_asyncio_run, mock_run_worker, runner):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã worker."""
        result = runner.invoke(cli, ["worker", "--workers", "4"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ emoji –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        assert "üöÄ" in result.output
        assert "üìä" in result.output
        assert "üíæ" in result.output
        assert "TaskIQ –≤–æ—Ä–∫–µ—Ä–æ–≤" in result.output

    def test_scheduler_command_output_formatting(self, runner):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã scheduler."""
        result = runner.invoke(cli, ["scheduler"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ emoji
        assert "üìÖ" in result.output
        assert "üí°" in result.output


class TestCLIPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ CLI."""

    @pytest.fixture
    def runner(self):
        """–°–æ–∑–¥–∞–µ—Ç CLI runner –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        return CliRunner()

    def test_cli_startup_time(self, runner):
        """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ CLI."""
        import time

        start_time = time.time()
        result = runner.invoke(cli, ["--help"])
        end_time = time.time()

        startup_time = end_time - start_time

        # CLI –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ
        assert startup_time < 2.0
        assert result.exit_code == 0

    @patch("src.cli.settings")
    def test_info_command_performance(self, mock_settings, runner):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã info."""
        mock_settings.TASKIQ_BROKER_URL = "redis://localhost:6379/1"
        mock_settings.TASKIQ_RESULT_BACKEND_URL = "redis://localhost:6379/2"
        mock_settings.MAX_BACKGROUND_WORKERS = 4
        mock_settings.TASKIQ_MAX_RETRIES = 3
        mock_settings.TASKIQ_RETRY_DELAY = 5
        mock_settings.TASKIQ_TASK_TIMEOUT = 300

        import time

        start_time = time.time()
        result = runner.invoke(cli, ["info"])
        end_time = time.time()

        execution_time = end_time - start_time

        # –ö–æ–º–∞–Ω–¥–∞ info –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ
        assert execution_time < 1.0
        assert result.exit_code == 0
