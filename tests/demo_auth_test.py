"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π auth —Ç–µ—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ conftest.py.

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç.
"""

import asyncio
from unittest.mock import AsyncMock, MagicMock, patch

import pytest
from httpx import AsyncClient


class MockUser:
    """–ú–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""

    def __init__(self, id=1, username="testuser", email="test@test.com", is_active=True, is_verified=False):
        self.id = id
        self.username = username
        self.email = email
        self.is_active = is_active
        self.is_verified = is_verified


class MockUserFactory:
    """–ú–æ–∫ —Ñ–∞–±—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    @staticmethod
    async def create(**kwargs):
        defaults = {"id": 1, "username": "testuser", "email": "test@test.com", "is_active": True, "is_verified": False}
        defaults.update(kwargs)
        return MockUser(**defaults)


class TestAuthRegistrationDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è auth registration —Ç–µ—Å—Ç–æ–≤."""

    @pytest.mark.asyncio
    async def test_register_success_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∏–∑ –Ω–∞—à–∏—Ö —Ç–µ—Å—Ç–æ–≤)
        register_data = {
            "username": "newuser123",
            "email": "newuser@test.com",
            "password": "SecurePass123!",
            "remember_me": False,
        }

        # –ú–æ–∫–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_factory = MockUserFactory()

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
        new_user = await user_factory.create(username=register_data["username"], email=register_data["email"])

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ (–∫–∞–∫ –≤ –Ω–∞—à–∏—Ö —Ç–µ—Å—Ç–∞—Ö)
        assert new_user.username == "newuser123"
        assert new_user.email == "newuser@test.com"
        assert new_user.is_active is True

        print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

    @pytest.mark.asyncio
    async def test_register_duplicate_email_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è email."""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è email...")

        user_factory = MockUserFactory()

        # –°–æ–∑–¥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = await user_factory.create(email="duplicate@test.com", username="existing_user")

        # –î–∞–Ω–Ω—ã–µ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è email
        register_data = {
            "username": "newuser",
            "email": existing_user.email,  # –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è email
            "password": "SecurePass123!",
            "remember_me": False,
        }

        # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API
        # response = await client.post("/auth/register", json=register_data)
        # assert response.status_code == 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        assert existing_user.email == "duplicate@test.com"
        assert register_data["email"] == existing_user.email

        print("‚úÖ –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è email —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    def test_register_invalid_data_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")

        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ (–∏–∑ –Ω–∞—à–∏—Ö —Ç–µ—Å—Ç–æ–≤)
        test_cases = [
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
            {
                "username": "test",
                "password": "SecurePass123!",
                # email –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            },
            # –°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å
            {"username": "test", "email": "test@test.com", "password": "weak"},
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email
            {"username": "test", "email": "invalid-email", "password": "SecurePass123!"},
        ]

        for case_data in test_cases:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if "email" not in case_data:
                assert "username" in case_data  # –ï—Å—Ç—å username –Ω–æ –Ω–µ—Ç email
            elif case_data["password"] == "weak":
                assert len(case_data["password"]) < 8  # –°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å
            elif "@" not in case_data["email"]:
                assert "invalid" in case_data["email"]  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email

        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


class TestAuthLoginDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è auth login —Ç–µ—Å—Ç–æ–≤."""

    @pytest.mark.asyncio
    async def test_login_success_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

        user_factory = MockUserFactory()

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        user = await user_factory.create(username="loginuser", email="login@test.com", is_active=True, is_verified=True)

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
        login_data = {
            "email_or_username": user.email,
            "password": "test_password",
            "remember_me": False,
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        assert user.is_active is True
        assert user.is_verified is True
        assert login_data["email_or_username"] == user.email

        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

    @pytest.mark.asyncio
    async def test_login_invalid_credentials_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

        user_factory = MockUserFactory()
        user = await user_factory.create(username="testuser", email="test@test.com")

        # –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
        login_data = {"email_or_username": user.email, "password": "wrong_password", "remember_me": False}

        # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ:
        # response = await client.post("/auth/login", json=login_data)
        # assert response.status_code == 401

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        assert login_data["password"] != "correct_password"
        assert login_data["email_or_username"] == user.email

        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!")


class TestAuthTokensDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è auth tokens —Ç–µ—Å—Ç–æ–≤."""

    @pytest.mark.asyncio
    async def test_refresh_token_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...")

        user_factory = MockUserFactory()
        user = await user_factory.create(is_active=True)

        # –ú–æ–∫–∞–µ–º refresh —Ç–æ–∫–µ–Ω
        class MockRefreshToken:
            def __init__(self, user, token="refresh_token_123", is_active=True, is_revoked=False):
                self.user = user
                self.token = token
                self.is_active = is_active
                self.is_revoked = is_revoked

        refresh_token = MockRefreshToken(user=user, is_active=True, is_revoked=False)

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –±–µ–∑ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        def simulate_refresh_token(token):
            """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞."""
            if token.is_active and not token.is_revoked:
                return ("new_access_token", "new_refresh_token")
            return None

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É
        result = simulate_refresh_token(refresh_token)
        assert result == ("new_access_token", "new_refresh_token")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
        assert refresh_token.is_active is True
        assert refresh_token.is_revoked is False
        assert refresh_token.user == user

        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


class TestAuthPermissionsDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è auth permissions —Ç–µ—Å—Ç–æ–≤."""

    def test_user_permissions_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞...")

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
        regular_user = MockUser(id=1, username="user")
        admin_user = MockUser(id=2, username="admin")

        # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ (–∏–∑ –Ω–∞—à–∏—Ö —Ç–µ—Å—Ç–æ–≤)
        def can_see_private(current, target):
            return current.id == target.id or getattr(current, "is_superuser", False)

        def can_modify_user(current, target):
            return current.id == target.id or getattr(current, "is_admin", False)

        # –¢–µ—Å—Ç—ã –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        assert can_see_private(regular_user, regular_user) is True  # –°–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        assert can_see_private(regular_user, admin_user) is False  # –ß—É–∂–æ–π –ø—Ä–æ—Ñ–∏–ª—å

        # –ü—Ä–∞–≤–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        assert can_modify_user(regular_user, regular_user) is True  # –°–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        assert can_modify_user(regular_user, admin_user) is False  # –ß—É–∂–æ–π –ø—Ä–æ—Ñ–∏–ª—å

        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö auth —Ç–µ—Å—Ç–æ–≤...")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Ç–µ—Å—Ç–æ–≤
    auth_reg_test = TestAuthRegistrationDemo()
    auth_login_test = TestAuthLoginDemo()
    auth_tokens_test = TestAuthTokensDemo()
    auth_perms_test = TestAuthPermissionsDemo()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    try:
        auth_reg_test.test_register_invalid_data_demo()
        auth_perms_test.test_user_permissions_demo()

        print("=" * 60)
        print("üéâ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ auth —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üìù –î–ª—è async —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pytest tests/demo_auth_test.py -v")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        exit(1)
