"""
–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Locust.
"""

import random

from locust import HttpUser, between, events, task
from locust.runners import MasterRunner


class UserLoadTest(HttpUser):
    """–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""

    wait_time = between(1, 3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    def on_start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.auth_token = None
        self.user_data = None
        self.login()

    def login(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        login_data = {"username": f"testuser_{random.randint(1000, 9999)}", "password": "TestPassword123!"}

        # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è
        register_response = self.client.post(
            "/auth/register",
            json={
                **login_data,
                "email": f"test_{random.randint(1000, 9999)}@example.com",
                "full_name": "Test User",
                "password_confirm": "TestPassword123!",
            },
        )

        if register_response.status_code == 201:
            # –¢–µ–ø–µ—Ä—å –ª–æ–≥–∏–Ω–∏–º—Å—è
            response = self.client.post("/auth/login", json=login_data)
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.user_data = data.get("user")

    def get_headers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π."""
        if self.auth_token:
            return {"Authorization": f"Bearer {self.auth_token}"}
        return {}

    @task(3)
    def get_profile(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.client.get("/users/me", headers=self.get_headers())

    @task(2)
    def update_profile(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        update_data = {
            "full_name": f"Updated User {random.randint(1, 1000)}",
            "bio": f"Updated bio {random.randint(1, 1000)}",
        }
        self.client.put("/users/me", json=update_data, headers=self.get_headers())

    @task(1)
    def change_password(self):
        """–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è."""
        password_data = {
            "current_password": "TestPassword123!",
            "new_password": "NewPassword123!",
            "new_password_confirm": "NewPassword123!",
        }
        self.client.post("/users/me/change-password", json=password_data, headers=self.get_headers())

    @task(1)
    def refresh_token(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞."""
        self.client.post("/auth/refresh", headers=self.get_headers())


class APILoadTest(HttpUser):
    """–û–±—â–µ–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API."""

    wait_time = between(0.5, 2)

    @task(5)
    def health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API."""
        self.client.get("/health")

    @task(3)
    def get_users_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        self.client.get("/users/")

    @task(2)
    def search_users(self):
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        query = random.choice(["test", "user", "admin", "john"])
        self.client.get(f"/users/search/?q={query}")


class DatabaseLoadTest(HttpUser):
    """–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î."""

    wait_time = between(0.1, 0.5)

    def on_start(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""
        self.auth_token = self.get_admin_token()

    def get_admin_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        admin_data = {"username": "admin", "password": "admin123"}
        response = self.client.post("/auth/login", json=admin_data)
        if response.status_code == 200:
            return response.json().get("access_token")
        return None

    def get_headers(self):
        """–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π."""
        if self.auth_token:
            return {"Authorization": f"Bearer {self.auth_token}"}
        return {}

    @task(10)
    def read_operations(self):
        """–û–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è."""
        endpoints = ["/users/", "/users/me", f"/users/{random.randint(1, 100)}"]
        endpoint = random.choice(endpoints)
        self.client.get(endpoint, headers=self.get_headers())

    @task(3)
    def write_operations(self):
        """–û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏."""
        user_data = {
            "email": f"load_test_{random.randint(10000, 99999)}@example.com",
            "username": f"load_user_{random.randint(10000, 99999)}",
            "full_name": "Load Test User",
            "password": "TestPassword123!",
            "password_confirm": "TestPassword123!",
        }
        self.client.post("/auth/register", json=user_data)

    @task(1)
    def complex_operations(self):
        """–°–ª–æ–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î."""
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "email": f"complex_{random.randint(10000, 99999)}@example.com",
            "username": f"complex_user_{random.randint(10000, 99999)}",
            "full_name": "Complex Test User",
            "password": "TestPassword123!",
            "password_confirm": "TestPassword123!",
        }

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        register_response = self.client.post("/auth/register", json=user_data)

        if register_response.status_code == 201:
            # –õ–æ–≥–∏–Ω
            login_response = self.client.post(
                "/auth/login", json={"username": user_data["username"], "password": user_data["password"]}
            )

            if login_response.status_code == 200:
                token = login_response.json().get("access_token")
                headers = {"Authorization": f"Bearer {token}"}

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
                self.client.put(
                    "/users/me",
                    json={"full_name": "Updated Complex User", "bio": "Complex operations test"},
                    headers=headers,
                )


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤


class LoadTestConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."""

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–≥—Ä—É–∑–∫–∏
    USERS = 50  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    SPAWN_RATE = 5  # –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ–∫—É–Ω–¥—É
    RUN_TIME = "5m"  # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤

    # –•–æ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    HOST = "http://localhost:8000"

    @classmethod
    def get_command(cls, test_class: str = "UserLoadTest") -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞."""
        return (
            f"locust -f tests/performance/load_tests.py "
            f"--users {cls.USERS} "
            f"--spawn-rate {cls.SPAWN_RATE} "
            f"--run-time {cls.RUN_TIME} "
            f"--host {cls.HOST} "
            f"{test_class} "
            f"--headless "
            f"--html reports/locust_report.html"
        )


# –°–æ–±—ã—Ç–∏—è Locust –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏


@events.request.add_listener
def on_request(request_type, name, response_time, response_length, exception, context, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—Ä–æ—Å–æ–≤."""
    if exception:
        print(f"Request failed: {name} - {exception}")


@events.test_start.add_listener
def on_test_start(environment, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!")


@events.test_stop.add_listener
def on_test_stop(environment, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if isinstance(environment.runner, MasterRunner):
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {environment.runner.stats.total.num_requests}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {environment.runner.stats.total.num_failures}")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {environment.runner.stats.total.avg_response_time:.2f}ms")


# –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:
"""
# –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Locust
locust -f tests/performance/load_tests.py --host http://localhost:8000

# Headless —Ä–µ–∂–∏–º
locust -f tests/performance/load_tests.py --users 50 --spawn-rate 5 --run-time 5m --host http://localhost:8000 --headless

# –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
locust -f tests/performance/load_tests.py --users 20 --spawn-rate 2 --run-time 2m --host http://localhost:8000 UserLoadTest --headless

# –° –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–∞
locust -f tests/performance/load_tests.py --users 100 --spawn-rate 10 --run-time 10m --host http://localhost:8000 --headless --html reports/load_test_report.html
"""
