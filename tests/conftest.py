import asyncio
import logging
import os
import tempfile
from pathlib import Path
from typing import AsyncGenerator, Generator

import alembic.command
import alembic.config
import pytest
import pytest_asyncio
from fastapi import FastAPI
from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine
from sqlalchemy.pool import NullPool

from core.database import get_db
from main import app as main_app
from main import settings
from tests.utils_test.api_test_client import AsyncApiTestClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
# –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–æ–º–µ CRITICAL
logging.disable(logging.INFO)

# –°–æ–∑–¥–∞–µ–º –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –≤–∫–ª—é—á–µ–Ω–∏–µ–º
logger = logging.getLogger("test_session")
logger.setLevel(logging.INFO)
logger.disabled = False  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –Ω–∞—à –ª–æ–≥–≥–µ—Ä


def pytest_terminal_summary(terminalreporter, exitstatus):
    total = terminalreporter._numcollected
    passed = len(terminalreporter.stats.get("passed", []))
    failed = len(terminalreporter.stats.get("failed", []))
    terminalreporter.write_sep("-", f"‚úî Passed: {passed} / {total}, ‚ùå Failed: {failed}")


def is_ci_environment() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ —Ç–µ—Å—Ç—ã –≤ CI –æ–∫—Ä—É–∂–µ–Ω–∏–∏."""
    ci_indicators = [
        "CI",
        "CONTINUOUS_INTEGRATION",
        "GITHUB_ACTIONS",
        "GITLAB_CI",
        "JENKINS_URL",
        "BUILDKITE",
        "CIRCLECI",
        "TRAVIS",
        "APPVEYOR",
        "BUILD_NUMBER",
        "BUILD_ID",
    ]
    return any(os.getenv(indicator) for indicator in ci_indicators)


@pytest.fixture(scope="session", autouse=True)
def configure_logging():
    """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫."""
    # –ü–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.disable(logging.INFO)

    # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
    test_logger = logging.getLogger("test_session")
    test_logger.disabled = False
    test_logger.setLevel(logging.INFO)

    yield

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    logging.disable(logging.NOTSET)


@pytest.fixture(scope="session", autouse=True)
def cleanup_project_artifacts():
    """
    –û—á–∏—â–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ (–Ω–µ –≤ CI).
    –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è SKIP_CLEANUP_ARTIFACTS=1

    –ü—Ä–∏–º–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:
        SKIP_CLEANUP_ARTIFACTS=1 pytest tests/
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ—á–∏—Å—Ç–∫–∞ —è–≤–Ω–æ
    if os.getenv("SKIP_CLEANUP_ARTIFACTS"):
        logger.info("üö´ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (SKIP_CLEANUP_ARTIFACTS=1)")
        yield
        return

    if is_ci_environment():
        logger.info("üèóÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ CI –æ–∫—Ä—É–∂–µ–Ω–∏–µ - –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        yield
        return

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –æ—á–∏—Å—Ç–∫–∏
        import sys

        project_root = Path(__file__).parent.parent
        sys.path.insert(0, str(project_root / "scripts"))

        try:
            from cleanup_project import ProjectCleaner  # type: ignore
        except ImportError as ie:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –æ—á–∏—Å—Ç–∫–∏: {ie}")
            yield
            return

        logger.info("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤...")

        # –°–æ–∑–¥–∞–µ–º –æ—á–∏—Å—Ç–∏—Ç–µ–ª—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
        cleaner = ProjectCleaner(project_root=project_root, dry_run=False, verbose=False)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
        success = cleaner.run()

        if success and cleaner.removed_items:
            logger.info(
                f"‚ú® –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {len(cleaner.removed_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, "
                f"–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {cleaner.format_size(cleaner.total_size_saved)}"
            )
        elif success:
            logger.info("‚ú® –ü—Ä–æ–µ–∫—Ç —É–∂–µ —á–∏—Å—Ç—ã–π")
        else:
            logger.warning("‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞: {e}")

    yield


@pytest.fixture(scope="session")
def event_loop():
    """Event loop with proper isolation for asyncpg compatibility"""
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É event loop –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
    policy = asyncio.get_event_loop_policy()
    loop = policy.new_event_loop()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loop –∫–∞–∫ —Ç–µ–∫—É—â–∏–π –¥–ª—è asyncpg
    asyncio.set_event_loop(loop)
    old_loop = asyncio.get_event_loop()

    try:
        yield loop
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º loop
        try:
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ pending tasks
            pending = asyncio.all_tasks(loop)
            if pending:
                for task in pending:
                    if not task.done():
                        task.cancel()
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                if pending:
                    loop.run_until_complete(asyncio.gather(*pending, return_exceptions=True))

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
            loop.run_until_complete(loop.shutdown_asyncgens())

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º default executor
            if hasattr(loop, "shutdown_default_executor"):
                loop.run_until_complete(loop.shutdown_default_executor())
        except Exception as e:
            logger.warning(f"Warning during loop cleanup: {e}")
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π loop –µ—Å–ª–∏ –æ–Ω –±—ã–ª
            if old_loop != loop:
                try:
                    asyncio.set_event_loop(old_loop)
                except:
                    pass
            loop.close()


@pytest.fixture(scope="session")
def temp_dir():
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    with tempfile.TemporaryDirectory() as tmp_dir:
        yield Path(tmp_dir)


@pytest_asyncio.fixture(scope="session", autouse=True)
async def postgres_container():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    from testcontainers.postgres import PostgresContainer

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ PostgreSQL
        with PostgresContainer(
            image="postgres:15-alpine",
            driver="asyncpg",  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        ).with_env("POSTGRES_INITDB_ARGS", "--auth-host=trust --auth-local=trust") as pg:
            yield pg

    except Exception as e:
        logger.warning(f"PostgreSQL container failed: {e}")

        class MockContainer:
            def get_connection_url(self):
                return "sqlite+aiosqlite:///:memory:"

        yield MockContainer()


@pytest_asyncio.fixture(scope="function")
async def async_engine(postgres_container, event_loop):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    uri = postgres_container.get_connection_url()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PostgreSQL URL –≤ asyncpg —Ñ–æ—Ä–º–∞—Ç
    if "postgresql+psycopg2://" in uri:
        uri = uri.replace("postgresql+psycopg2://", "postgresql+asyncpg://")
    elif "postgresql://" in uri:
        uri = uri.replace("postgresql://", "postgresql+asyncpg://")

    logger.info(f"Database URI: {uri[:50]}...")

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä 'loop' –∏ —É–ø—Ä–æ—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    engine_config = {
        "echo": False,  # –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ö–æ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
        "poolclass": NullPool,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º NullPool –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
        "pool_pre_ping": True,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        "pool_recycle": 300,  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    }

    # –î–ª—è asyncpg –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if "asyncpg" in uri:
        engine_config["connect_args"] = {
            "server_settings": {
                "application_name": "pytest_test",
                "timezone": "UTC",
            },
            "command_timeout": 60,
        }

    engine = create_async_engine(uri, **engine_config)

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async with engine.begin() as conn:
            await conn.execute(text("SELECT 1"))
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")

        yield engine

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise
    finally:
        try:
            await engine.dispose()
        except Exception as e:
            logger.warning(f"Warning during engine disposal: {e}")


@pytest_asyncio.fixture(scope="function")
async def async_session(async_engine) -> AsyncGenerator[AsyncSession, None]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    async_session_maker = async_sessionmaker(
        bind=async_engine,
        class_=AsyncSession,
        expire_on_commit=False,
        autoflush=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ñ–ª—É—à –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
        autocommit=False,  # –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º autocommit
    )

    async with async_session_maker() as session:
        yield session


@pytest_asyncio.fixture(scope="function")
async def setup_test_models(async_session) -> AsyncGenerator[AsyncSession, None]:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞.
    """
    from tests.core.base.test_repo.modesl_for_test import TestBaseModel

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    async with async_session.bind.begin() as conn:
        await conn.run_sync(TestBaseModel.metadata.create_all)

    yield async_session

    # –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    await _cleanup_test_data(async_session)


async def _cleanup_test_data(session: AsyncSession) -> None:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏.
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if session.in_transaction():
            try:
                await session.rollback()
            except Exception:
                pass

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ constraints –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—á–∏—Å—Ç–∫–∏
        await session.execute(text("SET session_replication_role = replica"))

        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        await session.execute(
            text("""
            TRUNCATE TABLE 
                test_post_tags,
                test_comments, 
                test_profiles,
                test_posts,
                test_tags, 
                test_categories,
                test_users
            RESTART IDENTITY CASCADE
        """)
        )

        # –í–∫–ª—é—á–∞–µ–º constraints –æ–±—Ä–∞—Ç–Ω–æ
        await session.execute(text("SET session_replication_role = DEFAULT"))
        await session.commit()

        logger.debug("‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")

    except Exception as e:
        logger.debug(f"Cleanup info: {e}")  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å WARNING –Ω–∞ DEBUG

        # Fallback: –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ TRUNCATE –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        try:
            from tests.core.base.test_repo.modesl_for_test import TestBaseModel

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º engine –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
            async with session.bind.connect() as conn:
                await conn.run_sync(TestBaseModel.metadata.drop_all)
                await conn.run_sync(TestBaseModel.metadata.create_all)
                await conn.commit()

            logger.debug("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        except Exception as fallback_e:
            logger.debug(f"Fallback cleanup info: {fallback_e}")

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∫–∞—Ç —Å–µ—Å—Å–∏–∏
        try:
            await session.rollback()
        except Exception:
            pass


@pytest.fixture(scope="function")
def app(async_session) -> Generator[FastAPI, None, None]:
    """FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ë–î."""

    async def override_get_db():
        yield async_session

    main_app.dependency_overrides[get_db] = override_get_db
    try:
        yield main_app
    finally:
        main_app.dependency_overrides.clear()


@pytest_asyncio.fixture(scope="function")
async def api_client(app: FastAPI, async_session) -> AsyncGenerator[AsyncApiTestClient, None]:
    """API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    async with AsyncApiTestClient(app=app, db=async_session) as client:
        yield client


# === –§–∞–±—Ä–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===


@pytest.fixture
def user_factory(setup_test_models):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        from tests.core.base.test_repo.factories import UserFactory

        UserFactory._meta.sqlalchemy_session = setup_test_models  # type: ignore
        return UserFactory
    except ImportError:
        return None


@pytest.fixture
def post_factory(setup_test_models):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤."""
    try:
        from tests.core.base.test_repo.factories import PostFactory

        PostFactory._meta.sqlalchemy_session = setup_test_models  # type: ignore
        return PostFactory
    except ImportError:
        return None


@pytest.fixture
def category_factory(setup_test_models):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    try:
        from tests.core.base.test_repo.factories import CategoryFactory

        CategoryFactory._meta.sqlalchemy_session = setup_test_models  # type: ignore
        return CategoryFactory
    except ImportError:
        return None


@pytest.fixture
def tag_factory(setup_test_models):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–æ–≤."""
    try:
        from tests.core.base.test_repo.factories import TagFactory

        TagFactory._meta.sqlalchemy_session = setup_test_models  # type: ignore
        return TagFactory
    except ImportError:
        return None


@pytest.fixture
def comment_factory(setup_test_models):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""
    try:
        from tests.core.base.test_repo.factories import CommentFactory

        CommentFactory._meta.sqlalchemy_session = setup_test_models  # type: ignore
        return CommentFactory
    except ImportError:
        return None


@pytest.fixture
def profile_factory(setup_test_models):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π."""
    try:
        from tests.core.base.test_repo.factories import ProfileFactory

        ProfileFactory._meta.sqlalchemy_session = setup_test_models  # type: ignore
        return ProfileFactory
    except ImportError:
        return None


# === –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ ===


@pytest.fixture
def user_repo(setup_test_models):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    from core.base.repo.repository import BaseRepository
    from tests.core.base.test_repo.modesl_for_test import TestUser

    return BaseRepository(TestUser, setup_test_models)  # type: ignore


@pytest.fixture
def post_repo(setup_test_models):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    from core.base.repo.repository import BaseRepository
    from tests.core.base.test_repo.modesl_for_test import TestPost

    return BaseRepository(TestPost, setup_test_models)  # type: ignore


@pytest.fixture
def category_repo(setup_test_models):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    from core.base.repo.repository import BaseRepository
    from tests.core.base.test_repo.modesl_for_test import TestCategory

    return BaseRepository(TestCategory, setup_test_models)  # type: ignore


@pytest.fixture
def tag_repo(setup_test_models):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ç–µ–≥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    from core.base.repo.repository import BaseRepository
    from tests.core.base.test_repo.modesl_for_test import TestTag

    return BaseRepository(TestTag, setup_test_models)  # type: ignore


@pytest.fixture
def comment_repo(setup_test_models):
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    from core.base.repo.repository import BaseRepository
    from tests.core.base.test_repo.modesl_for_test import TestComment

    return BaseRepository(TestComment, setup_test_models)  # type: ignore
