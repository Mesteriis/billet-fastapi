"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏ API.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∑–∞–º–µ–Ω–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π AsyncClient –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã–π
AsyncApiTestClient –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–∞—Ö —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.
"""

import asyncio

import pytest
from fastapi import FastAPI
from httpx import AsyncClient
from sqlalchemy.ext.asyncio import AsyncSession
from tests.factories.user_factory import UserFactory
from tests.utils_test.api_test_client import AsyncApiTestClient, ChainStep, RetryStrategy, TestScenarioType

# === –§–ò–ö–°–¢–£–†–´ –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ===


@pytest.fixture
async def enhanced_client(app: FastAPI) -> AsyncApiTestClient:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏."""
    async with AsyncApiTestClient(app=app, base_url="http://test") as client:
        # –í–∫–ª—é—á–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        client.enable_performance_tracking()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–Ω–∏–º–∫–æ–≤
        client.setup_snapshots_dir("tests/snapshots")

        yield client


@pytest.fixture
async def auth_enhanced_client(enhanced_client: AsyncApiTestClient) -> AsyncApiTestClient:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç."""
    await enhanced_client.force_auth(email="test@example.com", is_superuser=False, email_verified=True)
    return enhanced_client


@pytest.fixture
async def admin_enhanced_client(enhanced_client: AsyncApiTestClient) -> AsyncApiTestClient:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω –∫–ª–∏–µ–Ω—Ç."""
    await enhanced_client.force_auth(email="admin@example.com", is_superuser=True, email_verified=True)
    return enhanced_client


# === –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ï –¢–ï–°–¢–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ===


@pytest.mark.auth
@pytest.mark.enhanced
class TestEnhancedAuthFlow:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏."""

    @pytest.mark.asyncio
    async def test_registration_with_snapshots(self, enhanced_client: AsyncApiTestClient):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–Ω–∏–º–∫–∞ API."""
        user_data = {
            "email": "snapshot@example.com",
            "username": "snapshotuser",
            "full_name": "Snapshot User",
            "password": "SnapshotPassword123!",
            "password_confirm": "SnapshotPassword123!",
        }

        # –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ API –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        snapshot = await enhanced_client.create_api_snapshot("/api/v1/auth/register", method="POST", json=user_data)

        assert snapshot.method == "POST"
        assert snapshot.status_code == 201
        print(f"API snapshot created: {snapshot.checksum}")

    @pytest.mark.asyncio
    async def test_auth_chain_flow(self, enhanced_client: AsyncApiTestClient):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ chain API."""

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥–∏ —Ü–µ–ø–æ—á–∫–∏
        steps = [
            ChainStep(
                method="POST",
                url="/api/v1/auth/register",
                data={
                    "email": "chain@example.com",
                    "username": "chainuser",
                    "full_name": "Chain User",
                    "password": "ChainPassword123!",
                    "password_confirm": "ChainPassword123!",
                },
                expected_status=201,
                description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                extract_data=lambda r: {"tokens": r.json()["tokens"]},
            ),
            ChainStep(
                method="GET",
                url="/api/v1/auth/me",
                headers=lambda ctx: {"Authorization": f"Bearer {ctx['tokens']['access_token']}"},
                expected_status=200,
                description="–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                validate_response=lambda r, ctx: r.json()["email"] == "chain@example.com",
            ),
            ChainStep(
                method="POST",
                url="/api/v1/auth/refresh",
                data=lambda ctx: {"refresh_token": ctx["tokens"]["refresh_token"]},
                expected_status=200,
                description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤",
                extract_data=lambda r: {"new_tokens": r.json()},
            ),
            ChainStep(
                method="POST",
                url="/api/v1/auth/logout",
                data=lambda ctx: {"refresh_token": ctx["new_tokens"]["refresh_token"]},
                expected_status=204,
                description="–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
            ),
        ]

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–µ–ø–æ—á–∫—É —Ç–µ—Å—Ç–æ–≤
        responses = await enhanced_client.run_test_chain(steps)

        assert len(responses) == 4
        assert all(r.status_code in [200, 201, 204] for r in responses)


# === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ ===


@pytest.mark.demo
class TestEnhancedClientDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."""

    @pytest.mark.asyncio
    async def test_all_features_demo(self, enhanced_client: AsyncApiTestClient):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞."""

        print("\nüöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ API")

        # 1. –°–Ω–∏–º–∫–∏ API
        print("\nüì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–æ–≤ API...")
        snapshot = await enhanced_client.create_api_snapshot("/")
        print(f"   –°–Ω–∏–º–æ–∫ —Å–æ–∑–¥–∞–Ω: {snapshot.checksum}")

        # 2. –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö API
        print("\nüé≠ –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö API...")
        enhanced_client.mock_external_api("https://external.example.com/api", {"status": "mocked"}, status_code=200)
        print("   –í–Ω–µ—à–Ω–∏–π API –∑–∞–º–æ–∫–∞–Ω")

        # 3. Performance tracking
        print("\n‚ö° –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        enhanced_client.enable_performance_tracking()

        # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        for i in range(3):
            await enhanced_client.get("/")

        stats = enhanced_client.get_performance_stats()
        print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['avg_response_time']:.3f}s")

        # 4. –¢–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
        print("\nüìä –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è...")
        async with enhanced_client.test_session(TestScenarioType.INTEGRATION) as session:
            await enhanced_client.get("/health")
            print(f"   –°–µ—Å—Å–∏—è: {session.session_id}, –º–µ—Ç—Ä–∏–∫: {len(session.metrics)}")

        # 5. Chain —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüîó Chain —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        chain = [
            ChainStep("GET", "/", description="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"),
            ChainStep("GET", "/health", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"),
        ]

        responses = await enhanced_client.run_test_chain(chain)
        print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ {len(responses)} —à–∞–≥–æ–≤ –≤ —Ü–µ–ø–æ—á–∫–µ")

        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__ + "::TestEnhancedClientDemo::test_all_features_demo", "-v", "-s"])
