#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ pre-commit —Ö—É–∫–∞—Ö.
"""

import os
import sys
from pathlib import Path


def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞."""
    project_root = Path(__file__).parent.parent
    errors = []

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    required_dirs = ["src", "tests", "migrations", "src/apps", "src/core", "tests/factories", "tests/mocking"]

    for dir_path in required_dirs:
        full_path = project_root / dir_path
        if not full_path.exists():
            errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    required_files = ["pyproject.toml", "src/__init__.py", "tests/__init__.py", "conftest.py"]

    for file_path in required_files:
        full_path = project_root / file_path
        if not full_path.exists():
            errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: {file_path}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ __init__.py –≤ –ø–∞–∫–µ—Ç–∞—Ö
    src_dirs = []
    for root, dirs, files in os.walk(project_root / "src"):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º __pycache__ –∏ .git
        dirs[:] = [d for d in dirs if not d.startswith(".") and d != "__pycache__"]
        if dirs:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∞–ø–∫–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–∞–∫–µ—Ç
            src_dirs.append(Path(root))

    for src_dir in src_dirs:
        init_file = src_dir / "__init__.py"
        if not init_file.exists():
            rel_path = src_dir.relative_to(project_root)
            errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç __init__.py –≤ –ø–∞–∫–µ—Ç–µ: {rel_path}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ __init__.py —Ñ–∞–π–ª–∞—Ö
    for init_file in project_root.rglob("*/__init__.py"):
        if "src" in str(init_file):
            try:
                with open(init_file, encoding="utf-8") as f:
                    content = f.read()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
                    if "from .." in content and init_file.name != "__init__.py":
                        rel_path = init_file.relative_to(project_root)
                        errors.append(f"‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤: {rel_path}")
            except Exception:
                pass

    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if errors:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:")
        for error in errors:
            print(error)
        return False
    else:
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True


if __name__ == "__main__":
    success = check_project_structure()
    sys.exit(0 if success else 1)
