#!/usr/bin/env python3
"""
Inter-App Imports Linter.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –≤ –ø–∞–ø–∫–µ apps/:
- ‚ùå –ó–∞–ø—Ä–µ—â–∞–µ—Ç –ø—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –≤–Ω–µ TYPE_CHECKING
- ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ (apps.*.interfaces)
- ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ TYPE_CHECKING –±–ª–æ–∫–∞—Ö
- ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏–∑ shared –º–æ–¥—É–ª–µ–π
"""

import argparse
import ast
import re
import sys
from pathlib import Path
from typing import Any, Iterator, NamedTuple


class ImportViolation(NamedTuple):
    """–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏–º–ø–æ—Ä—Ç–∞."""

    file_path: str
    line_number: int
    column: int
    import_module: str
    violation_type: str
    suggestion: str


class InterAppImportsChecker(ast.NodeVisitor):
    """
    AST visitor –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏.
    """

    def __init__(self, file_path: str, config: dict[str, Any] | None = None):
        self.file_path = file_path
        self.violations: list[ImportViolation] = []
        self.in_type_checking = False
        self.type_checking_depth = 0
        self.config = config or {}

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.apps_import_pattern = re.compile(r"^apps\.([^.]+)\.(.+)$")
        self.interfaces_pattern = re.compile(r"^apps\.([^.]+)\.interfaces")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
        self.allowed_shared_imports = self._get_allowed_shared_imports()

    def _get_allowed_shared_imports(self) -> list[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        shared_imports = self.config.get("allow_shared_imports", [])

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (boolean) –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if isinstance(shared_imports, bool):
            if shared_imports:
                return ["apps.shared"]  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            else:
                return []

        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π
        if isinstance(shared_imports, list):
            return shared_imports

        # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        return ["apps.shared"]

    def _is_allowed_shared_import(self, module_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∏–º–ø–æ—Ä—Ç –∏–∑ shared –º–æ–¥—É–ª—è."""
        for allowed_path in self.allowed_shared_imports:
            if module_name.startswith(allowed_path + ".") or module_name == allowed_path:
                return True
        return False

    def visit_If(self, node: ast.If) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ if –±–ª–æ–∫–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è TYPE_CHECKING."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º if TYPE_CHECKING:
        if self._is_type_checking_block(node):
            self.in_type_checking = True
            self.type_checking_depth += 1

            # –ü–æ—Å–µ—â–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
            for child in ast.iter_child_nodes(node):
                self.visit(child)

            self.type_checking_depth -= 1
            if self.type_checking_depth == 0:
                self.in_type_checking = False
        else:
            # –û–±—ã—á–Ω—ã–π if –±–ª–æ–∫
            self.generic_visit(node)

    def visit_Import(self, node: ast.Import) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ import statements."""
        for alias in node.names:
            self._check_import(module_name=alias.name, node=node, import_type="import")

    def visit_ImportFrom(self, node: ast.ImportFrom) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ from ... import statements."""
        if node.module:
            self._check_import(module_name=node.module, node=node, import_type="from_import")

    def _is_type_checking_block(self, node: ast.If) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–ª–æ–∫ TYPE_CHECKING."""
        if isinstance(node.test, ast.Name):
            return node.test.id == "TYPE_CHECKING"
        elif isinstance(node.test, ast.Attribute):
            # typing.TYPE_CHECKING
            if (
                isinstance(node.test.value, ast.Name)
                and node.test.value.id == "typing"
                and node.test.attr == "TYPE_CHECKING"
            ):
                return True
        return False

    def _check_import(self, module_name: str, node: ast.AST, import_type: str) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏–º–ø–æ—Ä—Ç–æ–º –∏–∑ apps.*
        apps_match = self.apps_import_pattern.match(module_name)
        if not apps_match:
            return  # –ù–µ –∏–º–ø–æ—Ä—Ç –∏–∑ apps, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        app_name, module_path = apps_match.groups()

        # –ü—Ä–∞–≤–∏–ª–æ 1: –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö shared –º–æ–¥—É–ª–µ–π —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        if self._is_allowed_shared_import(module_name):
            return

        # –ü—Ä–∞–≤–∏–ª–æ 2: –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        if self.interfaces_pattern.match(module_name):
            return

        # –ü—Ä–∞–≤–∏–ª–æ 3: –ò–º–ø–æ—Ä—Ç—ã –≤ TYPE_CHECKING –±–ª–æ–∫–∞—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        if self.in_type_checking:
            return

        # –ü—Ä–∞–≤–∏–ª–æ 4: –ò–º–ø–æ—Ä—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Ç–æ–≥–æ –∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        current_app = self._get_current_app_name()
        if current_app == app_name:
            return

        # –ù–∞—Ä—É—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!
        violation_type = "direct_inter_app_import"
        suggestion = self._generate_suggestion(module_name, app_name, module_path)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–ª–æ–Ω–∫–∏
        line_number = getattr(node, "lineno", 1)
        column = getattr(node, "col_offset", 0)

        self.violations.append(
            ImportViolation(
                file_path=self.file_path,
                line_number=line_number,
                column=column,
                import_module=module_name,
                violation_type=violation_type,
                suggestion=suggestion,
            )
        )

    def _get_current_app_name(self) -> str | None:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞."""
        path_parts = Path(self.file_path).parts
        try:
            apps_index = path_parts.index("apps")
            if apps_index + 1 < len(path_parts):
                return path_parts[apps_index + 1]
        except ValueError:
            pass
        return None

    def _generate_suggestion(self, module_name: str, app_name: str, module_path: str) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é."""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        allowed_examples = (
            ", ".join(self.allowed_shared_imports[:3]) if self.allowed_shared_imports else "core, constants"
        )

        if "models" in module_path or "schemas" in module_path:
            return f"Use interface: from apps.{app_name}.interfaces import [InterfaceName]"
        elif "services" in module_path:
            return f"Move to TYPE_CHECKING: if TYPE_CHECKING:\\n    from {module_name} import ..."
        else:
            return f"Consider: 1) interface from apps.{app_name}.interfaces, 2) TYPE_CHECKING block, or 3) allowed shared paths: {allowed_examples}"


class InterAppImportsLinter:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ª–∏–Ω—Ç–µ—Ä–∞.
    """

    def __init__(self, config: dict[str, Any] | None = None):
        self.config = config or {}
        self.total_files = 0
        self.total_violations = 0

    def check_file(self, file_path: str) -> list[ImportViolation]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª."""
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()

            tree = ast.parse(content, filename=file_path)
            checker = InterAppImportsChecker(file_path, self.config)
            checker.visit(tree)

            return checker.violations

        except SyntaxError as e:
            print(f"‚ö†Ô∏è  Syntax error in {file_path}:{e.lineno}: {e.msg}")
            return []
        except Exception as e:
            print(f"‚ùå Error processing {file_path}: {e}")
            return []

    def check_directory(self, directory: str) -> Iterator[ImportViolation]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        path = Path(directory)

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ .py —Ñ–∞–π–ª—ã
        python_files = list(path.rglob("*.py"))
        self.total_files = len(python_files)

        for file_path in python_files:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º __pycache__ –∏ .venv
            if "__pycache__" in str(file_path) or ".venv" in str(file_path):
                continue

            violations = self.check_file(str(file_path))
            for violation in violations:
                yield violation

    def format_violation(self, violation: ImportViolation) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞."""
        return (
            f"{violation.file_path}:{violation.line_number}:{violation.column}: "
            f"‚ùå Direct inter-app import: {violation.import_module}\n"
            f"    üí° Suggestion: {violation.suggestion}"
        )

    def run(self, paths: list[str], fix: bool = False) -> int:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–∏–Ω—Ç–µ—Ä."""
        all_violations = []

        for path in paths:
            if Path(path).is_file():
                violations = self.check_file(path)
                all_violations.extend(violations)
            else:
                violations = list(self.check_directory(path))
                all_violations.extend(violations)

        self.total_violations = len(all_violations)

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if all_violations:
            print("üîç Inter-App Import Violations Found:\n")

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º
            violations_by_file = {}
            for violation in all_violations:
                if violation.file_path not in violations_by_file:
                    violations_by_file[violation.file_path] = []
                violations_by_file[violation.file_path].append(violation)

            # –í—ã–≤–æ–¥–∏–º –ø–æ —Ñ–∞–π–ª–∞–º
            for file_path, violations in violations_by_file.items():
                print(f"üìÑ {file_path}:")
                for violation in violations:
                    print(f"  Line {violation.line_number}: {violation.import_module}")
                    print(f"    üí° {violation.suggestion}")
                print()

            print(f"‚ùå Found {self.total_violations} violations in {len(violations_by_file)} files")

            # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print("\nüìã Quick Fix Guide:")
            print("  1. ‚úÖ Use interfaces: from apps.users.interfaces import UserIdentity")
            print("  2. ‚úÖ Use TYPE_CHECKING: if TYPE_CHECKING: from apps.users.models import User")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            allowed_paths = self.config.get("allow_shared_imports", ["apps.shared", "core", "constants"])
            if isinstance(allowed_paths, list) and allowed_paths:
                example_path = allowed_paths[0]
                print(f"  3. ‚úÖ Allowed shared paths: from {example_path} import ...")
            else:
                print("  3. ‚úÖ Shared modules: from core import ... (check config)")

            return 1  # Exit code 1 = –µ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è
        else:
            print(f"‚úÖ No inter-app import violations found! Checked {self.total_files} files.")
            return 0  # Exit code 0 = –Ω–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π


def load_config() -> dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ pyproject.toml."""
    try:
        import tomllib
    except ImportError:
        return {}  # –ï—Å–ª–∏ tomllib –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

    try:
        with open("pyproject.toml", "rb") as f:
            data = tomllib.load(f)
        return data.get("tool", {}).get("inter_app_imports_linter", {})
    except FileNotFoundError:
        return {}


def main() -> int:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="Inter-App Imports Linter - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏")
    parser.add_argument("paths", nargs="*", default=["src/apps"], help="–ü—É—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: src/apps)")
    parser.add_argument("--fix", action="store_true", help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
    parser.add_argument("--config", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")

    args = parser.parse_args()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–∏–Ω—Ç–µ—Ä
    linter = InterAppImportsLinter(config)

    if args.verbose:
        print(f"üîç Checking paths: {args.paths}")
        print(f"üìã Config: {config}")

    return linter.run(args.paths, fix=args.fix)


if __name__ == "__main__":
    sys.exit(main())
