#!/usr/bin/env python3
"""
CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.
"""

import asyncio
import json
import sys
from pathlib import Path
from typing import Optional

import click
import rich
from rich.console import Console
from rich.table import Table

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from core.migrations import DatabaseManager, MigrationBackup, MigrationManager, MigrationMonitor, MigrationValidator

console = Console()


@click.group()
def cli():
    """üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏."""
    pass


@cli.command()
@click.option("--target", default="head", help="–¶–µ–ª–µ–≤–∞—è —Ä–µ–≤–∏–∑–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
@click.option("--no-backup", is_flag=True, help="–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±—ç–∫–∞–ø")
def safe_migrate(target: str, no_backup: bool):
    """üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –±—ç–∫–∞–ø–æ–º."""

    async def _migrate():
        manager = MigrationManager()

        with console.status("[bold green]–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è..."):
            result = await manager.safe_migrate(target=target, create_backup=not no_backup)

        if result["success"]:
            console.print("‚úÖ [bold green]–ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

            if result["backup_name"]:
                console.print(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {result['backup_name']}")

            if result["migration_status"]:
                status = result["migration_status"]
                console.print(f"üìä –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {status.get('current_version', 'N/A')}")
                console.print(f"üìà –í—Å–µ–≥–æ –º–∏–≥—Ä–∞—Ü–∏–π: {status.get('total_migrations', 0)}")
        else:
            console.print("‚ùå [bold red]–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏!")
            console.print(f"üîç –û—à–∏–±–∫–∞: {result['error']}")

            if result["validation_errors"]:
                console.print("‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
                for error in result["validation_errors"]:
                    console.print(f"  ‚Ä¢ {error}")

    asyncio.run(_migrate())


@cli.command()
def status():
    """üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π."""

    async def _status():
        monitor = MigrationMonitor()

        with console.status("[bold blue]–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π..."):
            status = await monitor.get_migration_status()

        if "error" in status:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞: {status['error']}")
            return

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç—É—Å–∞
        table = Table(title="üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")

        table.add_row("–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è", status.get("current_version", "N/A"))
        table.add_row("–í—Å–µ–≥–æ –º–∏–≥—Ä–∞—Ü–∏–π", str(status.get("total_migrations", 0)))
        table.add_row("–û–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è", str(len(status.get("pending_migrations", []))))
        table.add_row("–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞", status.get("last_check", "N/A"))
        table.add_row("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", status.get("database_url", "N/A"))

        console.print(table)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        pending = status.get("pending_migrations", [])
        if pending:
            console.print("\n‚è≥ [bold yellow]–û–∂–∏–¥–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
            for migration in pending:
                console.print(f"  ‚Ä¢ {migration.get('file', 'N/A')} - {migration.get('message', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}")

    asyncio.run(_status())


@cli.command()
def validate():
    """üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π."""

    async def _validate():
        monitor = MigrationMonitor()

        with console.status("[bold blue]–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–π..."):
            result = await monitor.check_migration_integrity()

        if "error" in result:
            console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞: {result['error']}")
            return

        console.print(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: {result.get('total_checked', 0)}")

        errors = result.get("errors", [])
        warnings = result.get("warnings", [])
        valid = result.get("valid_migrations", [])

        if errors:
            console.print(f"\n‚ùå [bold red]–û—à–∏–±–∫–∏ ({len(errors)}):")
            for error in errors:
                console.print(f"  ‚Ä¢ {error}")

        if warnings:
            console.print(f"\n‚ö†Ô∏è [bold yellow]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(warnings)}):")
            for warning in warnings:
                console.print(f"  ‚Ä¢ {warning}")

        if valid:
            console.print(f"\n‚úÖ [bold green]–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ ({len(valid)}):")
            for migration in valid[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                console.print(f"  ‚Ä¢ {migration}")
            if len(valid) > 5:
                console.print(f"  ... –∏ –µ—â–µ {len(valid) - 5}")

        if not errors and not warnings:
            console.print("\nüéâ [bold green]–í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")

    asyncio.run(_validate())


@cli.command()
@click.option("--description", default="", help="–û–ø–∏—Å–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞")
def backup(description: str):
    """üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""

    async def _backup():
        backup_service = MigrationBackup()

        with console.status("[bold blue]–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..."):
            backup_name = await backup_service.create_backup(description)

        console.print(f"‚úÖ [bold green]–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_name}")

    asyncio.run(_backup())


@cli.command()
def list_backups():
    """üìã –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤."""
    backup_service = MigrationBackup()
    backups = backup_service.list_backups()

    if not backups:
        console.print("üì≠ [yellow]–ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    table = Table(title="üìã –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤")
    table.add_column("–ò–º—è", style="cyan")
    table.add_column("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", style="green")
    table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="yellow")
    table.add_column("–†–∞–∑–º–µ—Ä", style="blue")

    for backup in backups:
        size_mb = backup.get("file_size", 0) / (1024 * 1024)
        table.add_row(
            backup.get("backup_name", "N/A"),
            backup.get("created_at", "N/A")[:19],  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
            backup.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"),
            f"{size_mb:.2f} MB",
        )

    console.print(table)


@cli.command()
@click.argument("backup_name")
def restore(backup_name: str):
    """üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞."""

    async def _restore():
        backup_service = MigrationBackup()

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not click.confirm(f"‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞ '{backup_name}'? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!"):
            console.print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return

        with console.status("[bold red]–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞..."):
            try:
                await backup_service.restore_backup(backup_name)
                console.print(f"‚úÖ [bold green]–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞: {backup_name}")
            except Exception as e:
                console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    asyncio.run(_restore())


@cli.command()
@click.option("--keep", default=10, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
def cleanup_backups(keep: int):
    """üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤."""
    backup_service = MigrationBackup()

    removed = backup_service.cleanup_old_backups(keep_count=keep)

    if removed > 0:
        console.print(f"üóëÔ∏è [bold green]–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: {removed}")
    else:
        console.print("‚ú® [green]–ù–µ—Ç –±—ç–∫–∞–ø–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")


@cli.command()
@click.argument("migration_file", type=click.Path(exists=True))
def validate_file(migration_file: str):
    """üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏."""
    validator = MigrationValidator()
    migration_path = Path(migration_file)

    console.print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞: {migration_path.name}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    syntax_errors = validator.validate_migration_syntax(migration_path)
    if syntax_errors:
        console.print("‚ùå [bold red]–û—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:")
        for error in syntax_errors:
            console.print(f"  ‚Ä¢ {error}")
    else:
        console.print("‚úÖ [green]–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    dep_errors = validator.validate_migration_dependencies(migration_path)
    if dep_errors:
        console.print("‚ö†Ô∏è [bold yellow]–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏:")
        for error in dep_errors:
            console.print(f"  ‚Ä¢ {error}")
    else:
        console.print("‚úÖ [green]–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")

    if not syntax_errors and not dep_errors:
        console.print("üéâ [bold green]–§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")


@cli.command()
def monitor():
    """üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∏–≥—Ä–∞—Ü–∏–π."""

    async def _monitor():
        monitor = MigrationMonitor()

        console.print("üìà [bold blue]–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∏–≥—Ä–∞—Ü–∏–π (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")

        try:
            while True:
                console.clear()

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
                status = await monitor.get_migration_status()

                if "error" in status:
                    console.print(f"‚ùå [bold red]–û—à–∏–±–∫–∞: {status['error']}")
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                    table = Table(title="üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫)")
                    table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
                    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")

                    table.add_row("–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è", status.get("current_version", "N/A"))
                    table.add_row("–í—Å–µ–≥–æ –º–∏–≥—Ä–∞—Ü–∏–π", str(status.get("total_migrations", 0)))
                    table.add_row("–û–∂–∏–¥–∞—é—â–∏—Ö", str(len(status.get("pending_migrations", []))))
                    table.add_row("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", status.get("last_check", "N/A")[:19])

                    console.print(table)

                # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(10)

        except KeyboardInterrupt:
            console.print("\nüëã [yellow]–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    asyncio.run(_monitor())


@cli.command()
def db_info():
    """üóÑÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""

    async def _db_info():
        db_manager = DatabaseManager()

        with console.status("[bold blue]–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î..."):
            info = await db_manager.get_database_info(db_manager.settings.SQLALCHEMY_DATABASE_URI)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        table = Table(title="üóÑÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")

        table.add_row("–ò–º—è –ë–î", info.get("database_name", "N/A"))
        table.add_row("–¢–∏–ø –ë–î", info.get("database_type", "N/A"))
        table.add_row("–°—É—â–µ—Å—Ç–≤—É–µ—Ç", "‚úÖ –î–∞" if info.get("exists") else "‚ùå –ù–µ—Ç")
        table.add_row("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "‚úÖ OK" if info.get("connection_test") else "‚ùå –û—à–∏–±–∫–∞")
        table.add_row("–†–∞–∑–º–µ—Ä", info.get("size", "N/A"))
        table.add_row("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü", str(info.get("tables_count", "N/A")))

        console.print(table)

    asyncio.run(_db_info())


@cli.command()
@click.option("--force", is_flag=True, help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
def db_create(force: bool):
    """üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""

    async def _db_create():
        db_manager = DatabaseManager()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        if await db_manager.database_exists(db_manager.settings.SQLALCHEMY_DATABASE_URI):
            console.print("‚ÑπÔ∏è [yellow]–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ force
        if not force:
            if not click.confirm("üèóÔ∏è –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?"):
                console.print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return

        with console.status("[bold blue]–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."):
            success = await db_manager.create_database(db_manager.settings.SQLALCHEMY_DATABASE_URI)

        if success:
            console.print("‚úÖ [bold green]–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        else:
            console.print("‚ùå [bold red]–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    asyncio.run(_db_create())


@cli.command()
@click.option("--force", is_flag=True, help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
def db_drop(force: bool):
    """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""

    async def _db_drop():
        db_manager = DatabaseManager()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        if not await db_manager.database_exists(db_manager.settings.SQLALCHEMY_DATABASE_URI):
            console.print("‚ÑπÔ∏è [yellow]–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not force:
            console.print("‚ö†Ô∏è [bold red]–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            if not click.confirm("üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?"):
                console.print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return

            # –î–≤–æ–π–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if not click.confirm("üö® –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –£–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ù–ê–í–°–ï–ì–î–ê?"):
                console.print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return

        with console.status("[bold red]–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."):
            success = await db_manager.drop_database(db_manager.settings.SQLALCHEMY_DATABASE_URI)

        if success:
            console.print("‚úÖ [bold green]–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        else:
            console.print("‚ùå [bold red]–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    asyncio.run(_db_drop())


@cli.command()
def db_test():
    """üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."""

    async def _db_test():
        db_manager = DatabaseManager()

        with console.status("[bold blue]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."):
            success = await db_manager.test_connection(db_manager.settings.SQLALCHEMY_DATABASE_URI)

        if success:
            console.print("‚úÖ [bold green]–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            console.print("‚ùå [bold red]–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    asyncio.run(_db_test())


@cli.command()
def db_ensure():
    """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""

    async def _db_ensure():
        db_manager = DatabaseManager()

        with console.status("[bold blue]–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ë–î..."):
            success = await db_manager.ensure_database_exists()

        if success:
            console.print("‚úÖ [bold green]–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            console.print("‚ùå [bold red]–ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")

    asyncio.run(_db_ensure())


if __name__ == "__main__":
    cli()
