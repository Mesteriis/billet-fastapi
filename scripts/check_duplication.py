#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–µ–π.
"""

import argparse
import hashlib
import os
import re
import subprocess
import sys
from collections import defaultdict
from pathlib import Path
from typing import Dict, List, Set, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
MIN_LINES_FOR_DUPLICATE = 7  # –ú–∏–Ω–∏–º—É–º —Å—Ç—Ä–æ–∫ –¥–ª—è —Å—á–∏—Ç–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–º
IGNORE_PATTERNS = [
    r"^\s*#.*$",  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    r'^\s*""".*?""".*$',  # –î–æ–∫—Å—Ç—Ä–∏–Ω–≥–∏
    r"^\s*$",  # –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    r"^\s*import\s+.*$",  # –ò–º–ø–æ—Ä—Ç—ã
    r"^\s*from\s+.*import.*$",  # From –∏–º–ø–æ—Ä—Ç—ã
]

EXCLUDE_DIRS = {
    "__pycache__",
    ".git",
    ".pytest_cache",
    "htmlcov",
    "node_modules",
    ".venv",
    "venv",
    "migrations",
    "reports",
    "docs",
    "examples",
}

EXCLUDE_FILES = {"__init__.py", "conftest.py", "test_*.py", "*_test.py"}


class CodeDuplicationDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞."""

    def __init__(self, root_path: str, min_lines: int = MIN_LINES_FOR_DUPLICATE):
        self.root_path = Path(root_path)
        self.min_lines = min_lines
        self.ignore_patterns = [re.compile(pattern) for pattern in IGNORE_PATTERNS]

    def should_ignore_line(self, line: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É."""
        return any(pattern.match(line) for pattern in self.ignore_patterns)

    def normalize_line(self, line: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        line = re.sub(r"\s+", " ", line.strip())
        # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        line = re.sub(r"\b\w+\b", "VAR", line)
        return line

    def get_python_files(self) -> List[Path]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Python —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
        python_files = []

        for root, dirs, files in os.walk(self.root_path):
            # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS]

            for file in files:
                if file.endswith(".py"):
                    file_path = Path(root) / file

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
                    should_exclude = any(file_path.match(pattern) for pattern in EXCLUDE_FILES)

                    if not should_exclude:
                        python_files.append(file_path)

        return python_files

    def get_file_lines(self, file_path: Path) -> List[str]:
        """–ß–∏—Ç–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞."""
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                lines = []
                for line_num, line in enumerate(f, 1):
                    if not self.should_ignore_line(line):
                        normalized = self.normalize_line(line)
                        if normalized:  # –ù–µ –ø—É—Å—Ç–∞—è –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
                            lines.append((line_num, line.rstrip(), normalized))
                return lines
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return []

    def find_exact_duplicates(self) -> Dict[str, List[Tuple[Path, int, int]]]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞."""
        print("üîç –ü–æ–∏—Å–∫ —Ç–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")

        duplicates = defaultdict(list)
        files = self.get_python_files()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ö–µ—à–∞–º –±–ª–æ–∫–æ–≤
        for file_path in files:
            lines = self.get_file_lines(file_path)

            # –°–æ–∑–¥–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
            for i in range(len(lines) - self.min_lines + 1):
                block_lines = lines[i : i + self.min_lines]

                # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –±–ª–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
                block_text = "\n".join(norm_line for _, _, norm_line in block_lines)
                block_hash = hashlib.md5(block_text.encode()).hexdigest()

                start_line = block_lines[0][0]
                end_line = block_lines[-1][0]

                duplicates[block_hash].append((file_path, start_line, end_line))

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥—É–±–ª–∏–∫–∞—Ç—ã (–±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è)
        return {h: locations for h, locations in duplicates.items() if len(locations) > 1}

    def find_similar_functions(self) -> List[Tuple[str, List[Tuple[Path, int]]]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏."""
        print("üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...")

        functions = defaultdict(list)
        files = self.get_python_files()

        for file_path in files:
            content = self.get_file_content(file_path)
            if not content:
                continue

            # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
            function_pattern = re.compile(r"^(\s*)def\s+(\w+)\s*\([^)]*\):", re.MULTILINE)

            for match in function_pattern.finditer(content):
                func_name = match.group(2)
                start_line = content[: match.start()].count("\n") + 1

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
                functions[func_name].append((file_path, start_line))

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        similar = []
        for func_name, locations in functions.items():
            if len(locations) > 1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ —Ñ–∞–π–ª—ã
                unique_files = {loc[0] for loc in locations}
                if len(unique_files) > 1:
                    similar.append((func_name, locations))

        return similar

    def get_file_content(self, file_path: Path) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞."""
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                return f.read()
        except Exception:
            return ""

    def check_architectural_violations(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã)."""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π...")

        violations = []

        # –ü—Ä–∞–≤–∏–ª–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        rules = {
            "messaging": ["streaming"],  # messaging –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å streaming
            "streaming": ["messaging"],  # streaming –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å messaging (–∫—Ä–æ–º–µ core)
        }

        files = self.get_python_files()

        for file_path in files:
            content = self.get_file_content(file_path)
            if not content:
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥—É–ª—å —Ñ–∞–π–ª–∞
            parts = file_path.parts
            if "src" in parts:
                try:
                    src_index = parts.index("src")
                    if src_index + 1 < len(parts):
                        module = parts[src_index + 1]
                    else:
                        continue
                except (ValueError, IndexError):
                    continue
            else:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
            import_pattern = re.compile(r"^(?:from\s+(\w+)|import\s+(\w+))", re.MULTILINE)

            for match in import_pattern.finditer(content):
                imported_module = match.group(1) or match.group(2)

                if module in rules and imported_module in rules[module]:
                    violations.append(f"‚ùå {file_path}: –º–æ–¥—É–ª—å '{module}' –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å '{imported_module}'")

        return violations

    def run_pylint_similarity_check(self) -> str:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç pylint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–æ–∂–µ—Å—Ç–∏ –∫–æ–¥–∞."""
        print("üîç –ó–∞–ø—É—Å–∫ pylint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–æ–∂–µ—Å—Ç–∏...")

        try:
            cmd = ["pylint", "--disable=all", "--enable=duplicate-code", "src/"]
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=self.root_path)
            return result.stdout
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ pylint: {e}"

    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏."""
        report = []
        report.append("# üìä –û—Ç—á–µ—Ç –æ–± –∞–Ω–∞–ª–∏–∑–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞\n")

        # –¢–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
        duplicates = self.find_exact_duplicates()
        report.append(f"## üîç –¢–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã (–Ω–∞–π–¥–µ–Ω–æ: {len(duplicates)})\n")

        if duplicates:
            for i, (block_hash, locations) in enumerate(duplicates.items(), 1):
                if len(locations) > 1:
                    report.append(f"### –î—É–±–ª–∏–∫–∞—Ç #{i}")
                    report.append(f"**–ù–∞–π–¥–µ–Ω–æ –≤ {len(locations)} –º–µ—Å—Ç–∞—Ö:**")
                    for file_path, start_line, end_line in locations:
                        rel_path = file_path.relative_to(self.root_path)
                        report.append(f"- `{rel_path}:{start_line}-{end_line}`")
                    report.append("")
        else:
            report.append("‚úÖ –¢–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n")

        # –ü–æ—Ö–æ–∂–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        similar_functions = self.find_similar_functions()
        report.append(f"## üîß –ü–æ—Ö–æ–∂–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞–π–¥–µ–Ω–æ: {len(similar_functions)})\n")

        if similar_functions:
            for func_name, locations in similar_functions:
                report.append(f"### –§—É–Ω–∫—Ü–∏—è: `{func_name}`")
                report.append("**–ù–∞–π–¥–µ–Ω–∞ –≤:**")
                for file_path, line_num in locations:
                    rel_path = file_path.relative_to(self.root_path)
                    report.append(f"- `{rel_path}:{line_num}`")
                report.append("")
        else:
            report.append("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n")

        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        violations = self.check_architectural_violations()
        report.append(f"## üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è (–Ω–∞–π–¥–µ–Ω–æ: {len(violations)})\n")

        if violations:
            for violation in violations:
                report.append(f"- {violation}")
            report.append("")
        else:
            report.append("‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n")

        # Pylint —Å—Ö–æ–∂–µ—Å—Ç—å
        pylint_output = self.run_pylint_similarity_check()
        report.append("## üêç Pylint Similarity Check\n")
        report.append("```")
        report.append(pylint_output)
        report.append("```\n")

        return "\n".join(report)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞")
    parser.add_argument("--path", "-p", default=".", help="–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É")
    parser.add_argument(
        "--min-lines",
        "-m",
        type=int,
        default=MIN_LINES_FOR_DUPLICATE,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–∞",
    )
    parser.add_argument("--output", "-o", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞")

    args = parser.parse_args()

    detector = CodeDuplicationDetector(args.path, args.min_lines)
    report = detector.generate_report()

    if args.output:
        with open(args.output, "w", encoding="utf-8") as f:
            f.write(report)
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {args.output}")
    else:
        print(report)


if __name__ == "__main__":
    main()
