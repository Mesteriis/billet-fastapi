#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ Docker –∫—ç—à–∞.
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—Ä–∞–∑—ã –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.
"""

import subprocess
import sys
from pathlib import Path


def run_command(cmd: list[str]) -> bool:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ."""
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        print(f"‚úÖ {' '.join(cmd)} - —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {' '.join(cmd)} - –æ—à–∏–±–∫–∞: {e.stderr}")
        return False


def warm_docker_cache():
    """–ü—Ä–æ–≥—Ä–µ–≤–∞–µ—Ç Docker –∫—ç—à –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    print("üî• –ü—Ä–æ–≥—Ä–µ–≤ Docker –∫—ç—à–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤...")

    # –û–±—Ä–∞–∑—ã –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    images = [
        "postgres:15-alpine",
        "postgres:latest",
        "testcontainers/ryuk:0.8.1",
        # "redis:7-alpine",  # –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è Redis —Ç–µ—Å—Ç–æ–≤
        # "rabbitmq:3-management-alpine",  # –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è RabbitMQ —Ç–µ—Å—Ç–æ–≤
    ]

    success_count = 0

    for image in images:
        print(f"üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑: {image}")
        if run_command(["docker", "pull", image]):
            success_count += 1

    print(f"\nüéØ –ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: {success_count}/{len(images)} –æ–±—Ä–∞–∑–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Å–æ–∑–¥–∞–µ–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–µ–≤
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        subprocess.run(
            [
                "docker",
                "run",
                "--rm",
                "-d",
                "--name",
                "test-pg-warmup",
                "-e",
                "POSTGRES_PASSWORD=test",
                "-e",
                "POSTGRES_DB=test",
                "-e",
                "POSTGRES_USER=test",
                "postgres:15-alpine",
            ],
            check=True,
            capture_output=True,
        )

        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        import time

        time.sleep(3)

        subprocess.run(["docker", "stop", "test-pg-warmup"], check=True, capture_output=True)

        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {e}")

    print("\nüéâ Docker –∫—ç—à –≥–æ—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤!")


def check_docker():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Docker."""
    try:
        subprocess.run(["docker", "version"], capture_output=True, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return False


if __name__ == "__main__":
    if not check_docker():
        sys.exit(1)

    warm_docker_cache()
