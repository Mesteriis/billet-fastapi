#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –º—É—Å–æ—Ä–∞.

–ë–ï–ó–û–ü–ê–°–ù–û —É–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –º—É—Å–æ—Ä:
- .benchmarks/ - —Ñ–∞–π–ª—ã –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
- reports/ - –æ—Ç—á–µ—Ç—ã (–∫—Ä–æ–º–µ –≤–∞–∂–Ω—ã—Ö)
- htmlcov/ - –æ—Ç—á–µ—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è HTML
- .coverage* - —Ñ–∞–π–ª—ã –ø–æ–∫—Ä—ã—Ç–∏—è
- .pytest_cache/ - –∫–µ—à pytest
- .mypy_cache/ - –∫–µ—à mypy
- __pycache__/ - –∫–µ—à Python
- *.pyc, *.pyo - —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Python —Ñ–∞–π–ª—ã
- .DS_Store - —Ñ–∞–π–ª—ã macOS
- Thumbs.db - —Ñ–∞–π–ª—ã Windows
- *.tmp, *.temp - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
- *.log - –ª–æ–≥ —Ñ–∞–π–ª—ã (–∫—Ä–æ–º–µ –≤–∞–∂–Ω—ã—Ö)
- .tox/ - tox –æ–∫—Ä—É–∂–µ–Ω–∏—è
- .ruff_cache/, .black_cache/ - –∫–µ—à –ª–∏–Ω—Ç–µ—Ä–æ–≤

–ù–ï –£–î–ê–õ–Ø–ï–¢ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã:
- .venv/, venv/, env/ - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
- node_modules/ - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Node.js
- dist/, build/ - –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏
- src/, tests/, docs/ - –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
- .git/ - —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Git
"""

import argparse
import os
import shutil
import sys
from pathlib import Path
from typing import List, Set


class ProjectCleaner:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""

    def __init__(self, project_root: Path, dry_run: bool = False, verbose: bool = False):
        self.project_root = project_root
        self.dry_run = dry_run
        self.verbose = verbose
        self.removed_items: List[str] = []
        self.total_size_saved = 0

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –º—É—Å–æ—Ä, –ù–ï –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!)
        self.directories_to_remove = {
            ".benchmarks",
            "htmlcov",
            ".pytest_cache",
            ".mypy_cache",
            "__pycache__",
            ".tox",
            ".coverage_html",
            ".ruff_cache",
            ".black_cache",
        }

        self.file_patterns_to_remove = {
            "*.pyc",
            "*.pyo",
            "*.pyd",
            ".coverage*",
            "*.tmp",
            "*.temp",
            "*.log",
            ".DS_Store",
            "Thumbs.db",
            "*.orig",
            "*.rej",
            "*.swp",
            "*.swo",
            "*~",
            ".pytest_cache",
        }

        # –§–∞–π–ª—ã –≤ reports/ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        self.reports_patterns = {
            "coverage.xml",
            "coverage.json",
            "junit.xml",
            "test-results.xml",
            "flake8-report.txt",
            "mypy-report.txt",
            "bandit-report.json",
            "*.html",  # HTML –æ—Ç—á–µ—Ç—ã
            "*.xml",  # XML –æ—Ç—á–µ—Ç—ã (–∫—Ä–æ–º–µ –≤–∞–∂–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤)
        }

        # –í–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å
        self.protected_files = {
            "README.md",
            "LICENSE",
            "pyproject.toml",
            "requirements.txt",
            "Dockerfile",
            "docker-compose.yml",
            ".gitignore",
            ".pre-commit-config.yaml",
            "Makefile",
        }

        # –í–∞–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å
        self.protected_directories = {
            ".git",
            "src",
            "tests",
            "docs",
            "examples",
            "migrations",
            "config",
            "scripts",
            "templates",
            "backups",  # –í–∞–∂–Ω—ã–µ –±—ç–∫–∞–ø—ã
            ".venv",  # –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            "venv",  # –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            "env",  # –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            ".env",  # –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            "node_modules",  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Node.js
            "dist",  # –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å –≤–∞–∂–Ω—ã–º–∏)
            "build",  # –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å –≤–∞–∂–Ω—ã–º–∏)
        }

    def get_directory_size(self, path: Path) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –±–∞–π—Ç–∞—Ö."""
        total_size = 0
        try:
            for dirpath, dirnames, filenames in os.walk(path):
                for filename in filenames:
                    filepath = Path(dirpath) / filename
                    try:
                        total_size += filepath.stat().st_size
                    except (OSError, FileNotFoundError):
                        pass
        except (OSError, FileNotFoundError):
            pass
        return total_size

    def format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
        size_float = float(size_bytes)
        for unit in ["B", "KB", "MB", "GB"]:
            if size_float < 1024.0:
                return f"{size_float:.1f} {unit}"
            size_float /= 1024.0
        return f"{size_float:.1f} TB"

    def is_protected(self, path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if path.name in self.protected_files or path.name in self.protected_directories:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for parent in path.parents:
            if parent.name in self.protected_directories:
                return True

        return False

    def should_remove_file(self, file_path: Path) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª."""
        if self.is_protected(file_path):
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–∞–π–ª–æ–≤
        for pattern in self.file_patterns_to_remove:
            if file_path.match(pattern):
                return True

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è reports/
        if "reports" in file_path.parts:
            for pattern in self.reports_patterns:
                if file_path.match(pattern):
                    return True

        return False

    def clean_directories(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        for root, dirs, files in os.walk(self.project_root):
            root_path = Path(root)

            # –£–¥–∞–ª—è–µ–º —Ü–µ–ª—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for dir_name in list(dirs):
                dir_path = root_path / dir_name

                if dir_name in self.directories_to_remove and not self.is_protected(dir_path):
                    size = self.get_directory_size(dir_path)

                    if self.verbose:
                        print(
                            f"üóÇÔ∏è  –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {dir_path.relative_to(self.project_root)} ({self.format_size(size)})"
                        )

                    if not self.dry_run:
                        try:
                            shutil.rmtree(dir_path)
                            self.removed_items.append(f"üìÅ {dir_path.relative_to(self.project_root)}")
                            self.total_size_saved += size
                        except OSError as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {dir_path}: {e}")
                    else:
                        self.removed_items.append(f"üìÅ {dir_path.relative_to(self.project_root)} (dry-run)")
                        self.total_size_saved += size

                    # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç—å –≤–Ω—É—Ç—Ä—å
                    dirs.remove(dir_name)

    def clean_files(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã."""
        for root, dirs, files in os.walk(self.project_root):
            root_path = Path(root)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if any(protected in root_path.parts for protected in self.protected_directories):
                continue

            for file_name in files:
                file_path = root_path / file_name

                if self.should_remove_file(file_path):
                    try:
                        size = file_path.stat().st_size

                        if self.verbose:
                            print(
                                f"üìÑ –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª: {file_path.relative_to(self.project_root)} ({self.format_size(size)})"
                            )

                        if not self.dry_run:
                            file_path.unlink()
                            self.removed_items.append(f"üìÑ {file_path.relative_to(self.project_root)}")
                            self.total_size_saved += size
                        else:
                            self.removed_items.append(f"üìÑ {file_path.relative_to(self.project_root)} (dry-run)")
                            self.total_size_saved += size

                    except OSError as e:
                        if self.verbose:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")

    def clean_empty_directories(self) -> None:
        """–£–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        for root, dirs, files in os.walk(self.project_root, topdown=False):
            root_path = Path(root)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ
            if root_path == self.project_root or self.is_protected(root_path):
                continue

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞—è –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                if not any(root_path.iterdir()):
                    if self.verbose:
                        print(f"üìÇ –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {root_path.relative_to(self.project_root)}")

                    if not self.dry_run:
                        root_path.rmdir()
                        self.removed_items.append(f"üìÇ {root_path.relative_to(self.project_root)} (–ø—É—Å—Ç–∞—è)")
                    else:
                        self.removed_items.append(f"üìÇ {root_path.relative_to(self.project_root)} (–ø—É—Å—Ç–∞—è, dry-run)")

            except OSError:
                # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞—è –∏–ª–∏ –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞
                pass

    def run(self) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ–µ–∫—Ç–∞."""
        print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {self.project_root}")

        if self.dry_run:
            print("üîç –†–µ–∂–∏–º dry-run: —Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã")

        print()

        # –û—á–∏—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.clean_directories()

        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã
        self.clean_files()

        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.clean_empty_directories()

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:")
        print(f"   –£–¥–∞–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(self.removed_items)}")
        print(f"   –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {self.format_size(self.total_size_saved)}")

        if self.verbose and self.removed_items:
            print(f"\nüìã –£–¥–∞–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
            for item in self.removed_items[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
                print(f"   {item}")

            if len(self.removed_items) > 20:
                print(f"   ... –∏ –µ—â–µ {len(self.removed_items) - 20} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        if not self.removed_items:
            print("‚ú® –ü—Ä–æ–µ–∫—Ç —É–∂–µ —á–∏—Å—Ç—ã–π!")
            return True

        if self.dry_run:
            print("\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run –¥–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description="–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –º—É—Å–æ—Ä–∞",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python scripts/cleanup_project.py                    # –û–±—ã—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
  python scripts/cleanup_project.py --dry-run          # –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
  python scripts/cleanup_project.py --verbose          # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
  python scripts/cleanup_project.py --dry-run -v       # –ü–æ–¥—Ä–æ–±–Ω—ã–π dry-run
        """,
    )

    parser.add_argument("--dry-run", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏")

    parser.add_argument("-v", "--verbose", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")

    parser.add_argument(
        "--project-root", type=Path, default=Path.cwd(), help="–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è)"
    )

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_root = args.project_root.resolve()
    if not (project_root / "pyproject.toml").exists():
        print("‚ùå –û—à–∏–±–∫–∞: pyproject.toml –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.")
        return 1

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
    cleaner = ProjectCleaner(project_root=project_root, dry_run=args.dry_run, verbose=args.verbose)

    try:
        success = cleaner.run()
        return 0 if success else 1
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
