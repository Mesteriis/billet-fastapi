#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –ø—Ä–æ–µ–∫—Ç–∞.
"""

import re
import sys
from pathlib import Path
from typing import List, Set


class ArchitectureChecker:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª."""

    def __init__(self, root_path: Path):
        self.root_path = root_path
        self.violations = []

        # –ü—Ä–∞–≤–∏–ª–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        self.rules = {
            # messaging –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å streaming
            "messaging": {
                "forbidden_imports": ["streaming"],
                "description": "messaging –º–æ–¥—É–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å streaming",
            },
            # streaming –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å messaging (–∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö)
            "streaming": {
                "forbidden_imports": ["messaging"],
                "allowed_exceptions": ["messaging.core", "messaging.models"],
                "description": "streaming –º–æ–¥—É–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å messaging (–∫—Ä–æ–º–µ core –∏ models)",
            },
            # apps –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–∞–ø—Ä—è–º—É—é
            "apps": {
                "forbidden_cross_imports": True,
                "description": "apps –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–∞–ø—Ä—è–º—É—é",
            },
        }

    def get_python_files(self) -> List[Path]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Python —Ñ–∞–π–ª–æ–≤ –≤ src/."""
        src_path = self.root_path / "src"
        if not src_path.exists():
            return []

        python_files = []
        for file_path in src_path.rglob("*.py"):
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç—ã –∏ –º–∏–≥—Ä–∞—Ü–∏–∏
            if any(part in file_path.parts for part in ["test", "migration", "__pycache__"]):
                continue
            python_files.append(file_path)

        return python_files

    def get_file_imports(self, file_path: Path) -> Set[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            content = file_path.read_text(encoding="utf-8")
        except Exception:
            return set()

        imports = set()

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        patterns = [
            r"^from\s+(\w+(?:\.\w+)*)",  # from module import ...
            r"^import\s+(\w+(?:\.\w+)*)",  # import module
        ]

        for line in content.splitlines():
            line = line.strip()
            for pattern in patterns:
                match = re.match(pattern, line)
                if match:
                    module = match.group(1)
                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –º–æ–¥—É–ª—è
                    top_level = module.split(".")[0]
                    imports.add(top_level)

        return imports

    def get_module_from_path(self, file_path: Path) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–æ–¥—É–ª—å –ø–æ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞."""
        parts = file_path.parts
        if "src" not in parts:
            return ""

        try:
            src_index = parts.index("src")
            if src_index + 1 < len(parts):
                return parts[src_index + 1]
        except ValueError:
            pass

        return ""

    def check_forbidden_imports(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã."""
        python_files = self.get_python_files()

        for file_path in python_files:
            module = self.get_module_from_path(file_path)
            if not module or module not in self.rules:
                continue

            rule = self.rules[module]
            if "forbidden_imports" not in rule:
                continue

            imports = self.get_file_imports(file_path)
            forbidden = set(rule["forbidden_imports"])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            allowed_exceptions = set(rule.get("allowed_exceptions", []))

            violations = imports & forbidden
            for violation in violations:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
                is_allowed = any(exc.startswith(f"{violation}.") for exc in allowed_exceptions)

                if not is_allowed:
                    rel_path = file_path.relative_to(self.root_path)
                    self.violations.append(f"‚ùå {rel_path}: {rule['description']} (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç {violation})")

    def check_apps_cross_imports(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –º–µ–∂–¥—É apps."""
        src_path = self.root_path / "src" / "apps"
        if not src_path.exists():
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö apps
        apps = [d.name for d in src_path.iterdir() if d.is_dir() and not d.name.startswith("_")]

        for app_dir in src_path.iterdir():
            if not app_dir.is_dir() or app_dir.name.startswith("_"):
                continue

            app_name = app_dir.name
            other_apps = [app for app in apps if app != app_name]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ —ç—Ç–æ–º app
            for file_path in app_dir.rglob("*.py"):
                if "__pycache__" in file_path.parts:
                    continue

                imports = self.get_file_imports(file_path)

                # –ò—â–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥—Ä—É–≥–∏—Ö apps
                for other_app in other_apps:
                    if other_app in imports:
                        rel_path = file_path.relative_to(self.root_path)
                        self.violations.append(
                            f"‚ùå {rel_path}: app '{app_name}' –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å app '{other_app}' –Ω–∞–ø—Ä—è–º—É—é"
                        )

    def check_circular_imports(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
        python_files = self.get_python_files()
        import_graph = {}

        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∏–º–ø–æ—Ä—Ç–æ–≤
        for file_path in python_files:
            module_name = str(file_path.relative_to(self.root_path / "src")).replace("/", ".").replace(".py", "")
            imports = self.get_file_imports(file_path)
            import_graph[module_name] = imports

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª—ã (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        for module, imports in import_graph.items():
            for imported in imports:
                if imported in import_graph and module.split(".")[0] in import_graph[imported]:
                    self.violations.append(f"‚ö†Ô∏è  –í–æ–∑–º–æ–∂–µ–Ω —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–µ–∂–¥—É {module} –∏ {imported}")

    def check_all(self) -> List[str]:
        """–ü—Ä–æ–≤–æ–¥–∏—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã."""
        print("üèóÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª...")

        self.check_forbidden_imports()
        self.check_apps_cross_imports()
        self.check_circular_imports()

        return self.violations


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    root_path = Path(".")
    checker = ArchitectureChecker(root_path)
    violations = checker.check_all()

    if violations:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª:")
        for violation in violations:
            print(f"  {violation}")
        print(f"\n–í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {len(violations)}")
        sys.exit(1)
    else:
        print("‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–±–ª—é–¥–µ–Ω—ã!")
        sys.exit(0)


if __name__ == "__main__":
    main()
