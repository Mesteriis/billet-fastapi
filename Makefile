# Makefile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è TaskIQ –ø—Ä–æ–µ–∫—Ç–æ–º

.PHONY: help install dev run worker test clean clean-dry clean-verbose clean-old typecheck typecheck-strict mypy-install-types mypy-report

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED=\033[0;31m
GREEN=\033[0;32m
YELLOW=\033[1;33m
BLUE=\033[0;34m
NC=\033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "$(YELLOW)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(BLUE)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	uv sync

dev: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	uv sync --group dev

run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å FastAPI —Å–µ—Ä–≤–µ—Ä
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞...$(NC)"
	uvicorn src.main:app --reload --host 0.0.0.0 --port 8000

worker: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å TaskIQ –≤–æ—Ä–∫–µ—Ä—ã
	@echo "$(GREEN)‚ö° –ó–∞–ø—É—Å–∫ TaskIQ –≤–æ—Ä–∫–µ—Ä–æ–≤...$(NC)"
	python src/cli.py worker --workers 4

worker-dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)üîÑ –ó–∞–ø—É—Å–∫ TaskIQ –≤–æ—Ä–∫–µ—Ä–æ–≤ (dev —Ä–µ–∂–∏–º)...$(NC)"
	python src/cli.py worker --workers 2 --reload

taskiq-info: ## –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TaskIQ
	@echo "$(BLUE)‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TaskIQ:$(NC)"
	python src/cli.py info

taskiq-test: ## –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å TaskIQ
	@echo "$(BLUE)üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TaskIQ...$(NC)"
	python src/cli.py test

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	uv run pytest -v

test-quiet: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ –ª–æ–≥–æ–≤ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫)
	@echo "$(BLUE)ü§´ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ...$(NC)"
	TEST_LOG_LEVEL=quiet uv run pytest -v

test-verbose: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	@echo "$(BLUE)üì¢ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...$(NC)"
	TEST_LOG_LEVEL=verbose uv run pytest -v -s

test-debug: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
	@echo "$(BLUE)üêõ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏...$(NC)"
	TEST_LOG_LEVEL=debug uv run pytest -v -s --pdb

test-silent: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –ª–æ–≥–æ–≤
	@echo "$(BLUE)üîá –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –ª–æ–≥–æ–≤...$(NC)"
	TEST_LOG_LEVEL=quiet uv run pytest --tb=no -q

test-cov: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
	@echo "$(BLUE)üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º...$(NC)"
	uv run pytest --cov=src --cov-report=html --cov-report=term-missing

test-auth: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	@echo "$(BLUE)üîê –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...$(NC)"
	uv run pytest -v -m auth

test-users: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	@echo "$(BLUE)üë• –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...$(NC)"
	uv run pytest -v -m users

test-taskiq: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã TaskIQ
	@echo "$(BLUE)‚ö° –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ TaskIQ...$(NC)"
	uv run pytest tests/test_taskiq_* -v

test-integration: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	uv run pytest -v -m integration

test-unit: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)üß© –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤...$(NC)"
	uv run pytest -v -m unit

test-watch: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
	@echo "$(BLUE)üëÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...$(NC)"
	uv run pytest-watch

test-fast: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (–±–µ–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö)
	@echo "$(BLUE)‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	uv run pytest -v -m "not slow"

# –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
test-parallel: ## –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
	@echo "$(GREEN)‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	uv run pytest -n auto

# –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
test-mocked: ## –¢–µ—Å—Ç—ã —Å –º–æ–∫–∞–º–∏
	@echo "$(YELLOW)üé≠ –¢–µ—Å—Ç—ã —Å –º–æ–∫–∞–º–∏...$(NC)"
	uv run pytest -m mocked -v

# Performance —Ç–µ—Å—Ç—ã
test-performance: ## –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	@echo "$(RED)üèéÔ∏è –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...$(NC)"
	uv run pytest -m performance --benchmark-only

test-load: ## –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@echo "$(RED)üí™ –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã...$(NC)"
	uv run locust -f tests/performance/load_tests.py --users 50 --spawn-rate 5 --run-time 2m --host http://localhost:8000 --headless --html reports/load_test_report.html

# E2E —Ç–µ—Å—Ç—ã
test-e2e: ## E2E —Ç–µ—Å—Ç—ã —Å Playwright
	@echo "$(GREEN)üé¨ E2E —Ç–µ—Å—Ç—ã...$(NC)"
	uv run pytest tests/e2e/ -m e2e -v

install-playwright: ## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Playwright
	@echo "$(BLUE)üé≠ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Playwright...$(NC)"
	uv run playwright install chromium

# –§–∞–±—Ä–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
test-factories: ## –¢–µ—Å—Ç—ã —Ñ–∞–±—Ä–∏–∫ –¥–∞–Ω–Ω—ã—Ö
	@echo "$(YELLOW)üè≠ –¢–µ—Å—Ç—ã —Ñ–∞–±—Ä–∏–∫ –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	uv run pytest -m factories -v

# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
test-sequential: ## –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: unit ‚Üí integration ‚Üí e2e ‚Üí performance
	@echo "$(GREEN)üîÑ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@echo "$(BLUE)1Ô∏è‚É£ Unit —Ç–µ—Å—Ç—ã...$(NC)"
	@$(MAKE) test-unit-fast
	@echo "$(BLUE)2Ô∏è‚É£ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã...$(NC)" 
	@$(MAKE) test-integration-fast
	@echo "$(BLUE)3Ô∏è‚É£ E2E —Ç–µ—Å—Ç—ã...$(NC)"
	@$(MAKE) test-e2e-fast
	@echo "$(BLUE)4Ô∏è‚É£ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...$(NC)"
	@$(MAKE) test-performance-fast
	@echo "$(GREEN)‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!$(NC)"

# –ë—ã—Å—Ç—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
test-unit-fast: ## –ë—ã—Å—Ç—Ä—ã–µ unit —Ç–µ—Å—Ç—ã
	@uv run pytest -m unit -v --tb=short --maxfail=10

test-integration-fast: ## –ë—ã—Å—Ç—Ä—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@uv run pytest -m integration -v --tb=short --maxfail=5

test-e2e-fast: ## –ë—ã—Å—Ç—Ä—ã–µ E2E —Ç–µ—Å—Ç—ã
	@uv run pytest -m e2e -v --tb=short --maxfail=3

test-performance-fast: ## –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	@uv run pytest -m performance -v --tb=short --maxfail=1

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
test-unit-coverage: ## Unit —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
	@echo "$(BLUE)üß© Unit —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º...$(NC)"
	uv run pytest -m unit --cov=src --cov-report=term-missing --cov-report=html:htmlcov/unit -v

test-integration-coverage: ## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
	@echo "$(BLUE)üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º...$(NC)"
	uv run pytest -m integration --cov=src --cov-report=term-missing --cov-report=html:htmlcov/integration -v

test-all-coverage: ## –í—Å–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º 80%
	@echo "$(GREEN)üìä –í—Å–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º 80%...$(NC)"
	uv run pytest --cov=src --cov-report=html:htmlcov/full --cov-report=term-missing --cov-fail-under=80 -v

# –¢–µ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
test-auth-full: ## –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	@echo "$(BLUE)üîê –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...$(NC)"
	uv run pytest -m auth -v --cov=src.apps.auth --cov-report=term-missing

test-users-full: ## –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	@echo "$(BLUE)üë• –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...$(NC)"
	uv run pytest -m users -v --cov=src.apps.users --cov-report=term-missing

test-realtime-full: ## –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã realtime
	@echo "$(BLUE)‚ö° –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã realtime...$(NC)"
	uv run pytest -m realtime -v --cov=src.core.realtime --cov-report=term-missing

test-telegram-full: ## –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã Telegram
	@echo "$(BLUE)üì± –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã Telegram...$(NC)"
	uv run pytest -m telegram -v --cov=src.core.telegram --cov-report=term-missing

# –¢–µ—Å—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
test-parallel-unit: ## –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ unit —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ unit —Ç–µ—Å—Ç—ã...$(NC)"
	uv run pytest -m unit -n auto --dist=loadgroup

test-parallel-integration: ## –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã...$(NC)"
	uv run pytest -m integration -n 2 --dist=loadgroup

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤
test-mutations: ## Mutation —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	@echo "$(RED)üß¨ Mutation —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...$(NC)"
	uv run mutmut run --paths-to-mutate=src/

test-coverage-report: ## –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
	@echo "$(BLUE)üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è...$(NC)"
	uv run coverage report --show-missing --skip-covered
	uv run coverage html --directory=htmlcov/detailed

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
test-report: ## –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	@echo "$(BLUE)üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...$(NC)"
	mkdir -p reports
	uv run pytest --html=reports/test_report.html --self-contained-html --json-report --json-report-file=reports/test_results.json

test-report-full: ## –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
	@echo "$(BLUE)üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...$(NC)"
	mkdir -p reports
	uv run pytest --cov=src --cov-report=html:reports/coverage --html=reports/test_report.html --self-contained-html --json-report --json-report-file=reports/test_results.json -v

# –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
clean-test: ## –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	rm -rf htmlcov/
	rm -rf reports/
	rm -rf .coverage*
	rm -rf .pytest_cache/
	find . -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true

lint: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–æ–º
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...$(NC)"
	ruff check src/
	ruff format src/ --check

format: ## –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	@echo "$(GREEN)‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	ruff format src/

redis-start: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å Redis —á–µ—Ä–µ–∑ Docker
	@echo "$(GREEN)üî¥ –ó–∞–ø—É—Å–∫ Redis...$(NC)"
	docker run -d --name taskiq-redis -p 6379:6379 redis:alpine || docker start taskiq-redis

redis-stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Redis
	@echo "$(RED)‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis...$(NC)"
	docker stop taskiq-redis || true

redis-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Redis
	@echo "$(BLUE)üìã –õ–æ–≥–∏ Redis:$(NC)"
	docker logs -f taskiq-redis

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–Ω–æ–≤—ã–π —É–º–Ω—ã–π —Å–ø–æ—Å–æ–±)
	@echo "$(YELLOW)üßπ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	python scripts/cleanup_project.py

clean-dry: ## –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
	@echo "$(BLUE)üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—á–∏—Å—Ç–∫–∏...$(NC)"
	python scripts/cleanup_project.py --dry-run

clean-verbose: ## –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –≤—ã–≤–æ–¥–æ–º –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
	@echo "$(YELLOW)üßπ –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	python scripts/cleanup_project.py --verbose

clean-old: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
	@echo "$(YELLOW)üßπ –°—Ç–∞—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞...$(NC)"
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete
	rm -rf .pytest_cache/
	rm -rf htmlcov/
	rm -rf .coverage

setup: ## –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(GREEN)üîß –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	$(MAKE) install
	$(MAKE) redis-start
	sleep 2
	$(MAKE) taskiq-test
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!$(NC)"
	@echo "$(YELLOW)–ó–∞–ø—É—Å—Ç–∏—Ç–µ 'make run' –¥–ª—è API –∏ 'make worker' –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤$(NC)"

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@echo "$(BLUE)üìã –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:$(NC)"
	tail -f app.log

docker-build: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
	@echo "$(BLUE)üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...$(NC)"
	docker build -t taskiq-app .

docker-run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Docker Compose
	@echo "$(GREEN)üê≥ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker Compose...$(NC)"
	docker-compose up -d

docker-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "$(BLUE)üìã –õ–æ–≥–∏ Docker:$(NC)"
	docker-compose logs -f

docker-stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@echo "$(RED)‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(NC)"
	docker-compose down

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
prod-deploy: ## –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
	@echo "$(GREEN)üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ...$(NC)"
	# –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

prod-logs: ## –õ–æ–≥–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
	@echo "$(BLUE)üìã –õ–æ–≥–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:$(NC)"
	journalctl -u taskiq-worker -f

# –£—Ç–∏–ª–∏—Ç—ã
check-deps: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(BLUE)üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	uv pip list --outdated

update-deps: ## –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(GREEN)‚¨ÜÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	uv sync --upgrade

health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
	@echo "$(BLUE)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	curl -s http://localhost:8000/health | jq . || echo "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	curl -s http://localhost:8000/tasks/health | jq . || echo "TaskIQ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# Pre-commit –∫–æ–º–∞–Ω–¥—ã
pre-commit-install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pre-commit —Ö—É–∫–∏
	@echo "$(GREEN)üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pre-commit —Ö—É–∫–æ–≤...$(NC)"
	uv run pre-commit install

pre-commit-update: ## –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏–∏ –≤ pre-commit
	@echo "$(BLUE)‚¨ÜÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pre-commit —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...$(NC)"
	uv run pre-commit autoupdate

pre-commit-run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å pre-commit –Ω–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö
	@echo "$(YELLOW)üîç –ó–∞–ø—É—Å–∫ pre-commit –Ω–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö...$(NC)"
	uv run pre-commit run --all-files

pre-commit-run-staged: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å pre-commit —Ç–æ–ª—å–∫–æ –Ω–∞ staged —Ñ–∞–π–ª–∞—Ö
	@echo "$(YELLOW)üìã –ó–∞–ø—É—Å–∫ pre-commit –Ω–∞ staged —Ñ–∞–π–ª–∞—Ö...$(NC)"
	uv run pre-commit run

pre-commit-clean: ## –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à pre-commit
	@echo "$(RED)üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ pre-commit...$(NC)"
	uv run pre-commit clean

pre-commit-manual: ## –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑ pre-commit
	@echo "$(BLUE)üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫...$(NC)"
	uv run ruff check src/ tests/ scripts/ --fix
	uv run ruff format src/ tests/ scripts/
	uv run mypy src/ --ignore-missing-imports
	uv run bandit -r src/ -f json -o reports/bandit.json || true
	uv run safety check --json --output reports/safety.json || true
	python scripts/check_structure.py

# –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
code-quality: ## –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
	@echo "$(GREEN)‚ú® –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...$(NC)"
	mkdir -p reports
	$(MAKE) pre-commit-run
	$(MAKE) test-cov
	$(MAKE) test-performance
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç—á–µ—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ reports/$(NC)"

setup-dev: ## –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	$(MAKE) dev
	$(MAKE) install-playwright
	$(MAKE) pre-commit-install
	$(MAKE) redis-start
	@echo "$(GREEN)‚úÖ –°—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ç–æ–≤–∞!$(NC)"
	@echo "$(YELLOW)–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å 'make code-quality' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏$(NC)"

.PHONY: check-duplication
check-duplication:  ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞..."
	@python scripts/check_duplication.py --min-lines=7

.PHONY: check-architecture  
check-architecture:  ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
	@echo "üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª..."
	@python scripts/check_architecture.py

.PHONY: lint-all
lint-all: check-duplication check-architecture  ## –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
	@echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"

.PHONY: fix-tests
fix-tests:  ## –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ fixture –≤ —Ç–µ—Å—Ç–∞—Ö
	@echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å fixture..."
	@find tests/ -name "*.py" -exec python -m py_compile {} \; || true

.PHONY: docs-update
docs-update:  ## –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
	@echo "üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π..."
	@find src/ -name "*.py" -path "*/src/*" ! -path "*/tests/*" ! -name "__init__.py" -exec grep -L '"""' {} \; || echo "–í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã!"

.PHONY: quality-check
quality-check: lint-all fix-tests docs-update  ## –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "üéØ –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

.PHONY: migrate-create
migrate-create:  ## –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make migrate-create MSG="–æ–ø–∏—Å–∞–Ω–∏–µ")
	@echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏..."
	@if [ -z "$(MSG)" ]; then \
		echo "‚ùå –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: make migrate-create MSG='–æ–ø–∏—Å–∞–Ω–∏–µ'"; \
		exit 1; \
	fi
	@uv run alembic revision --autogenerate -m "$(MSG)"

.PHONY: migrate-up
migrate-up:  ## –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
	@echo "‚¨ÜÔ∏è  –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
	@uv run alembic upgrade head

.PHONY: migrate-down
migrate-down:  ## –û—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏
	@echo "‚¨áÔ∏è  –û—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏..."
	@uv run alembic downgrade -1

.PHONY: migrate-status
migrate-status:  ## –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
	@echo "üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π..."
	@uv run alembic current
	@echo ""
	@uv run alembic history --verbose

.PHONY: migrate-reset
migrate-reset:  ## –°–±—Ä–æ—Å –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π (–û–°–¢–û–†–û–ñ–ù–û!)
	@echo "üö® –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!"
	@read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): " confirm && [ "$$confirm" = "y" ]
	@uv run alembic downgrade base
	@echo "‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã"

.PHONY: migrate-validate
migrate-validate:  ## –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
	@echo "üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π..."
	@uv run python -c "import asyncio; from core.migrations import MigrationMonitor; print(asyncio.run(MigrationMonitor().check_migration_integrity()))"

.PHONY: migrate-backup
migrate-backup:  ## –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î
	@echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
	@uv run python -c "import asyncio; from core.migrations import MigrationBackup; print(asyncio.run(MigrationBackup().create_backup('manual_backup')))"

.PHONY: migrate-list-backups
migrate-list-backups:  ## –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
	@echo "üìã –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤:"
	@uv run python -c "from core.migrations import MigrationBackup; import json; print(json.dumps(MigrationBackup().list_backups(), indent=2, ensure_ascii=False))"

.PHONY: migrate-safe
migrate-safe:  ## –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –±—ç–∫–∞–ø–æ–º
	@echo "üõ°Ô∏è  –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è..."
	@uv run python -c "import asyncio; from core.migrations import MigrationManager; import json; result = asyncio.run(MigrationManager().safe_migrate()); print(json.dumps(result, indent=2, ensure_ascii=False))"

.PHONY: migrate-monitor
migrate-monitor:  ## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
	@echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∏–≥—Ä–∞—Ü–∏–π..."
	@uv run python -c "import asyncio; from core.migrations import MigrationMonitor; import json; result = asyncio.run(MigrationMonitor().get_migration_status()); print(json.dumps(result, indent=2, ensure_ascii=False))"

.PHONY: test-migrations
test-migrations:  ## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
	@uv run pytest tests/test_migrations.py -v --tb=short

.PHONY: test-migrations-alembic
test-migrations-alembic:  ## –ó–∞–ø—É—Å–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ pytest-alembic
	@echo "üî¨ –ó–∞–ø—É—Å–∫ pytest-alembic —Ç–µ—Å—Ç–æ–≤..."
	@uv run pytest --test-alembic -v

# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ===
.PHONY: db-info
db-info:  ## üóÑÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	@python scripts/migration_cli.py db-info

.PHONY: db-create
db-create:  ## üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@python scripts/migration_cli.py db-create

.PHONY: db-drop
db-drop:  ## üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–û–°–¢–û–†–û–ñ–ù–û!)
	@python scripts/migration_cli.py db-drop

.PHONY: db-test
db-test:  ## üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
	@python scripts/migration_cli.py db-test

.PHONY: db-ensure
db-ensure:  ## üîç –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	@python scripts/migration_cli.py db-ensure

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
typecheck:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–∏–ø—ã —Å mypy..."
	cd src && mypy .

# –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
typecheck-strict:
	@echo "üîç –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Å mypy..."
	cd src && mypy . --strict

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–æ–≤ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
mypy-install-types:
	@echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–∏–ø—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫..."
	mypy --install-types --non-interactive

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
mypy-report:
	@echo "üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏..."
	cd src && mypy . --html-report ../reports/mypy-html --txt-report ../reports/mypy-txt
