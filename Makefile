# Makefile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FastAPI + TaskIQ –ø—Ä–æ–µ–∫—Ç–æ–º

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø
# ============================================================================

# –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ env —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
ifneq (,$(wildcard .env))
    include .env
    export $(shell sed 's/=.*//' .env)
endif
ifneq (,$(wildcard local.env))
    include local.env  
    export $(shell sed 's/=.*//' local.env)
endif
ifneq (,$(wildcard docker.env))
    include docker.env
    export $(shell sed 's/=.*//' docker.env)
endif

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
WORKERS ?= 4
HOST ?= 0.0.0.0
PORT ?= 8000

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED=\033[0;31m
GREEN=\033[0;32m
YELLOW=\033[1;33m
BLUE=\033[0;34m
PURPLE=\033[0;35m
CYAN=\033[0;36m
NC=\033[0m

# –û–±—â–∏–µ phony —Ü–µ–ª–∏
.PHONY: help install dev clean setup

# ============================================================================
# –°–ü–†–ê–í–ö–ê
# ============================================================================

help: ## üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º
	@echo "$(YELLOW)üöÄ FastAPI + TaskIQ Project Management$(NC)"
	@echo ""
	@echo "$(CYAN)üì¶ –£–°–¢–ê–ù–û–í–ö–ê –ò –ù–ê–°–¢–†–û–ô–ö–ê:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z0-9_-]+:.*?## üì¶/ {printf "  $(GREEN)%-18s$(NC) %s\n", $$1, substr($$2, 3)}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(CYAN)üèÉ –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í:$(NC)" 
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z0-9_-]+:.*?## üèÉ/ {printf "  $(GREEN)%-18s$(NC) %s\n", $$1, substr($$2, 3)}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(CYAN)üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z0-9_-]+:.*?## üß™/ {printf "  $(GREEN)%-18s$(NC) %s\n", $$1, substr($$2, 3)}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(CYAN)üóÑÔ∏è  –ë–ê–ó–ê –î–ê–ù–ù–´–•:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z0-9_-]+:.*?## üóÑÔ∏è/ {printf "  $(GREEN)%-18s$(NC) %s\n", $$1, substr($$2, 3)}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(CYAN)üîç –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z0-9_-]+:.*?## üîç/ {printf "  $(GREEN)%-18s$(NC) %s\n", $$1, substr($$2, 3)}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(CYAN)üê≥ DOCKER:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z0-9_-]+:.*?## üê≥/ {printf "  $(GREEN)%-18s$(NC) %s\n", $$1, substr($$2, 3)}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(CYAN)üßπ –£–¢–ò–õ–ò–¢–´:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z0-9_-]+:.*?## üßπ/ {printf "  $(GREEN)%-18s$(NC) %s\n", $$1, substr($$2, 3)}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(YELLOW)üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:$(NC)"
	@echo "  $(GREEN)make test$(NC)                    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã (—Å –æ—á–∏—Å—Ç–∫–æ–π)"
	@echo "  $(GREEN)make test-no-cleanup$(NC)         - –¢–µ—Å—Ç—ã –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"
	@echo "  $(GREEN)make test-fast-no-cleanup$(NC)    - –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo "  $(GREEN)make test-rich$(NC)               - –¢–µ—Å—Ç—ã —Å –∫—Ä–∞—Å–∏–≤—ã–º Rich —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
	@echo "  $(GREEN)make test-rich-fast$(NC)          - –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã —Å Rich —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
	@echo "  $(GREEN)make test -m unit$(NC)           - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã"  
	@echo "  $(GREEN)make test -m auth --cov$(NC)     - –¢–µ—Å—Ç—ã auth —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º"
	@echo "  $(GREEN)make test -v -s$(NC)             - –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ + –ª–æ–≥–∏"
	@echo "  $(GREEN)make test --pdb$(NC)             - –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"
	@echo "  $(GREEN)make clean$(NC)                   - –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
	@echo "  $(GREEN)make pre-commit-cleanup-full$(NC) - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ pre-commit"
	@echo "  $(GREEN)make run HOST=127.0.0.1$(NC)     - API –Ω–∞ localhost"
	@echo "  $(GREEN)make worker WORKERS=8$(NC)       - 8 –≤–æ—Ä–∫–µ—Ä–æ–≤ TaskIQ"

# ============================================================================
# –£–°–¢–ê–ù–û–í–ö–ê –ò –ù–ê–°–¢–†–û–ô–ö–ê
# ============================================================================

install: ## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(BLUE)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	@uv sync

dev: ## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	@uv sync --group dev

setup: install ## üì¶ –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ + redis + —Ç–µ—Å—Ç)
	@echo "$(GREEN)üîß –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	@$(MAKE) redis-start
	@sleep 2
	@$(MAKE) taskiq-info
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤! –ó–∞–ø—É—Å—Ç–∏—Ç–µ:$(NC)"
	@echo "  $(YELLOW)make run$(NC)    - –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞"
	@echo "  $(YELLOW)make worker$(NC) - –¥–ª—è TaskIQ –≤–æ—Ä–∫–µ—Ä–æ–≤"

setup-dev: dev ## üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (dev + playwright + pre-commit)
	@echo "$(GREEN)üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@$(MAKE) install-playwright
	@$(MAKE) pre-commit-install  
	@$(MAKE) redis-start
	@echo "$(GREEN)‚úÖ –°—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ç–æ–≤–∞!$(NC)"

setup-testing: dev ## üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π Docker)
	@echo "$(GREEN)üß™ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...$(NC)"
	@$(MAKE) docker-warm
	@$(MAKE) install-playwright
	@echo "$(GREEN)‚úÖ –°—Ä–µ–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∞! Docker –æ–±—Ä–∞–∑—ã –ø—Ä–æ–≥—Ä–µ—Ç—ã.$(NC)"

# ============================================================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í  
# ============================================================================

run: ## üèÉ –ó–∞–ø—É—Å—Ç–∏—Ç—å FastAPI —Å–µ—Ä–≤–µ—Ä (HOST=0.0.0.0 PORT=8000)
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ $(HOST):$(PORT)...$(NC)"
	@uvicorn src.main:app --reload --host $(HOST) --port $(PORT)

worker: ## üèÉ –ó–∞–ø—É—Å—Ç–∏—Ç—å TaskIQ –≤–æ—Ä–∫–µ—Ä—ã (WORKERS=4)
	@echo "$(GREEN)‚ö° –ó–∞–ø—É—Å–∫ $(WORKERS) TaskIQ –≤–æ—Ä–∫–µ—Ä–æ–≤...$(NC)"
	uv run src/cli.py worker --workers $(WORKERS)

worker-dev: ## üèÉ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä—ã –≤ dev —Ä–µ–∂–∏–º–µ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
	@echo "$(GREEN)üîÑ –ó–∞–ø—É—Å–∫ TaskIQ –≤–æ—Ä–∫–µ—Ä–æ–≤ (dev —Ä–µ–∂–∏–º)...$(NC)"
	uv run src/cli.py worker --workers 2 --reload

taskiq-info: ## üèÉ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TaskIQ
	@echo "$(BLUE)‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TaskIQ:$(NC)"
	uv run src/cli.py info

# ============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
# ============================================================================

test: ## üß™ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: make test -m unit --cov -v)
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: $(ARGS)$(NC)"
	@$(MAKE) _run-pytest

# –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ pytest —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
_run-pytest:
	@if echo "$(ARGS)" | grep -q "\--cov"; then \
		mkdir -p reports htmlcov; \
		if echo "$(ARGS)" | grep -q "\-m"; then \
			MARK=$$(echo "$(ARGS)" | sed -n 's/.*-m \([a-zA-Z_]*\).*/\1/p'); \
			uv run pytest $(ARGS) --cov=src --cov-report=html:htmlcov/$$MARK --cov-report=term-missing; \
		else \
			uv run pytest $(ARGS) --cov=src --cov-report=html:htmlcov/full --cov-report=term-missing --cov-fail-under=80; \
		fi; \
	elif echo "$(ARGS)" | grep -q "\--pdb"; then \
		TEST_LOG_LEVEL=debug uv run pytest $(ARGS); \
	elif echo "$(ARGS)" | grep -q "\-q"; then \
		TEST_LOG_LEVEL=quiet uv run pytest $(ARGS); \
	elif [ -n "$(ARGS)" ]; then \
		uv run pytest $(ARGS); \
	else \
		uv run pytest -v; \
	fi

# –£–¥–æ–±–Ω—ã–µ –∞–ª–∏–∞—Å—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö –∫–æ–º–∞–Ω–¥
test-unit: ## üß™ Unit —Ç–µ—Å—Ç—ã
	@$(MAKE) test ARGS="-m unit"

test-integration: ## üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@$(MAKE) test ARGS="-m integration"

test-e2e: ## üß™ E2E —Ç–µ—Å—Ç—ã
	@$(MAKE) test ARGS="-m e2e"

test-auth: ## üß™ –¢–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	@$(MAKE) test ARGS="-m auth"

test-users: ## üß™ –¢–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	@$(MAKE) test ARGS="-m users"

test-repo: ## üß™ –¢–µ—Å—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ coverage)
	@echo "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –±–µ–∑ coverage..."
	pytest tests/core/base/test_repo/ -v --no-cov --tb=short

test-repo-single: ## üß™ –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	@echo "üéØ –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
	pytest tests/core/base/test_repo/test_repository_aggregation.py::test_aggregations -v --no-cov

test-fast: ## üß™ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–±–µ–∑ coverage, –±–µ–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤)
	@echo "‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	pytest -m "not slow" --no-cov -v --tb=short

test-full: ## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å coverage (–¥–ª—è CI/CD)
	@echo "üìä –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å coverage..."
	pytest -v --tb=short

test-cov: ## üß™ –í—Å–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
	@$(MAKE) test ARGS="--cov"

test-debug: ## üß™ –¢–µ—Å—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
	@$(MAKE) test ARGS="--pdb -s"

test-parallel: ## üß™ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@$(MAKE) test ARGS="-n auto"

test-no-cleanup: ## üß™ –¢–µ—Å—Ç—ã –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ (SKIP_CLEANUP_ARTIFACTS=1)
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	@SKIP_CLEANUP_ARTIFACTS=1 $(MAKE) test ARGS="$(ARGS)"

test-unit-no-cleanup: ## üß™ Unit —Ç–µ—Å—Ç—ã –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏
	@SKIP_CLEANUP_ARTIFACTS=1 $(MAKE) test-unit

test-fast-no-cleanup: ## üß™ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ (–¥–ª—è —á–∞—Å—Ç–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
	@echo "‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤..."
	@SKIP_CLEANUP_ARTIFACTS=1 pytest -m "not slow" --no-cov -v --tb=short

test-rich: ## üß™ –¢–µ—Å—Ç—ã —Å –∫—Ä–∞—Å–∏–≤—ã–º Rich —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	@echo "$(GREEN)‚ú® –¢–µ—Å—Ç—ã —Å Rich —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º...$(NC)"
	@uv run pytest --rich $(ARGS)

test-rich-fast: ## üß™ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã —Å Rich —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	@echo "$(GREEN)‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã —Å Rich —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º...$(NC)"
	@uv run pytest --rich -m "not slow" --no-cov -v $(ARGS)

test-benchmark: ## üß™ –ë–µ–Ω—á–º–∞—Ä–∫ —Ç–µ—Å—Ç—ã —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	@echo "$(PURPLE)‚è±Ô∏è  –ë–µ–Ω—á–º–∞—Ä–∫ —Ç–µ—Å—Ç—ã...$(NC)"
	@$(MAKE) test ARGS="--benchmark-only --benchmark-sort=mean"

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤  
test-load: ## üß™ –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å Locust
	@echo "$(RED)üí™ –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã...$(NC)"
	@mkdir -p reports
	@uv run locust -f tests/performance/load_tests.py --users 50 --spawn-rate 5 --run-time 2m --host http://localhost:8000 --headless --html reports/load_test_report.html

test-mutations: ## üß™ Mutation —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	@echo "$(RED)üß¨ Mutation —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...$(NC)"
	@uv run mutmut run --paths-to-mutate=src/

install-playwright: ## üß™ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Playwright –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤
	@echo "$(BLUE)üé≠ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Playwright...$(NC)"
	@uv run playwright install chromium

# ============================================================================
# –ë–ê–ó–ê –î–ê–ù–ù–´–• –ò –ú–ò–ì–†–ê–¶–ò–ò
# ============================================================================

migrate: ## üóÑÔ∏è –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ (MSG="–æ–ø–∏—Å–∞–Ω–∏–µ" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π)
	@if [ -n "$(MSG)" ]; then \
		echo "$(BLUE)üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: $(MSG)$(NC)"; \
		uv run alembic revision --autogenerate -m "$(MSG)"; \
	else \
		echo "$(BLUE)‚¨ÜÔ∏è  –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...$(NC)"; \
		uv run alembic upgrade head; \
	fi

migrate-down: ## üóÑÔ∏è –û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–≥—Ä–∞—Ü–∏—é
	@echo "$(YELLOW)‚¨áÔ∏è  –û—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏...$(NC)"
	@uv run alembic downgrade -1

migrate-status: ## üóÑÔ∏è –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:$(NC)"
	@uv run alembic current
	@echo ""
	@uv run alembic history --verbose

migrate-reset: ## üóÑÔ∏è –°–ë–†–û–° –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π (–û–°–¢–û–†–û–ñ–ù–û!)
	@echo "$(RED)üö® –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î!$(NC)"
	@read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " confirm && [ "$$confirm" = "YES" ]
	@uv run alembic downgrade base
	@echo "$(GREEN)‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã$(NC)"

db-info: ## üóÑÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	uv run scripts/migration_cli.py db-info

db-create: ## üóÑÔ∏è –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	uv run scripts/migration_cli.py db-create

db-backup: ## üóÑÔ∏è –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BLUE)üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@uv run python -c "import asyncio; from core.migrations import MigrationBackup; print(asyncio.run(MigrationBackup().create_backup('manual_backup')))"

# ============================================================================
# –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê
# ============================================================================

lint: ## üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏ (ruff + mypy)
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏...$(NC)"
	@uv run ruff check src/ tests/ scripts/
	@uv run ruff format src/ tests/ scripts/ --check
	@cd src && uv run mypy . --ignore-missing-imports

format: ## üîç –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	@echo "$(GREEN)‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	@uv run ruff format src/ tests/ scripts/
	@uv run ruff check src/ tests/ scripts/ --fix

typecheck: ## üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Å –æ—Ç—á–µ—Ç–æ–º
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Å mypy...$(NC)"
	@mkdir -p reports
	@cd src && uv run mypy . --html-report ../reports/mypy-html --txt-report ../reports/mypy-txt --ignore-missing-imports

quality: ## üîç –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
	@echo "$(GREEN)‚ú® –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...$(NC)"
	@$(MAKE) lint
	@$(MAKE) test-cov
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!$(NC)"

pre-commit-install: ## üîç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pre-commit —Ö—É–∫–∏
	@echo "$(GREEN)üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pre-commit —Ö—É–∫–æ–≤...$(NC)"
	@uv run pre-commit install

pre-commit-run: ## üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å pre-commit –Ω–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö
	@echo "$(YELLOW)üîç –ó–∞–ø—É—Å–∫ pre-commit...$(NC)"
	@uv run pre-commit run --all-files

pre-commit-cleanup-dry: ## üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ dry-run –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ pre-commit
	@echo "$(BLUE)üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—á–∏—Å—Ç–∫–∏ —á–µ—Ä–µ–∑ pre-commit...$(NC)"
	@uv run pre-commit run cleanup-project-dry

pre-commit-cleanup-full: ## üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ pre-commit
	@echo "$(GREEN)üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ pre-commit...$(NC)"
	@PRECOMMIT_CLEANUP=full uv run pre-commit run cleanup-project-full --hook-stage manual

pre-commit-cleanup-verbose: ## üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ pre-commit
	@echo "$(CYAN)üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ pre-commit...$(NC)"
	@PRECOMMIT_CLEANUP=verbose uv run pre-commit run cleanup-project-verbose --hook-stage manual

# –õ–∏–Ω—Ç–µ—Ä –∏–º–ø–æ—Ä—Ç–æ–≤ –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
check-imports: ## üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏...$(NC)"
	@uv run python scripts/inter_app_imports_linter.py src/apps

check-imports-verbose: ## üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
	@echo "$(CYAN)üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...$(NC)"
	@uv run python scripts/inter_app_imports_linter.py src/apps --verbose

check-imports-all: ## üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–µ
	@echo "$(PURPLE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–µ...$(NC)"
	@uv run python scripts/inter_app_imports_linter.py src/

# ============================================================================
# DOCKER
# ============================================================================

docker-build: ## üê≥ –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
	@echo "$(BLUE)üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...$(NC)"
	@docker build -t taskiq-app .

docker-up: ## üê≥ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ Docker Compose
	@echo "$(GREEN)üê≥ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ Docker Compose...$(NC)"
	@docker-compose up -d

docker-down: ## üê≥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(RED)‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@docker-compose down

docker-logs: ## üê≥ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üìã –õ–æ–≥–∏ Docker —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	@docker-compose logs -f

docker-warm: ## üê≥ –ü—Ä–æ–≥—Ä–µ—Ç—å Docker –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤
	@echo "$(PURPLE)üî• –ü—Ä–æ–≥—Ä–µ–≤ Docker –∫—ç—à–∞...$(NC)"
	uv run scripts/warm_docker_cache.py

docker-clean: ## üê≥ –û—á–∏—Å—Ç–∏—Ç—å Docker –∫—ç—à –∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞...$(NC)"
	@docker system prune -af
	@docker volume prune -f

# ============================================================================
# –£–¢–ò–õ–ò–¢–´
# ============================================================================

clean: ## üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...$(NC)"
	uv run scripts/cleanup_project.py

clean-dry: ## üßπ –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
	@echo "$(BLUE)üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—á–∏—Å—Ç–∫–∏...$(NC)"
	uv run scripts/cleanup_project.py --dry-run

clean-verbose: ## üßπ –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –≤—ã–≤–æ–¥–æ–º —É–¥–∞–ª—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
	@echo "$(BLUE)üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	uv run scripts/cleanup_project.py --verbose

redis-start: ## üßπ –ó–∞–ø—É—Å—Ç–∏—Ç—å Redis —á–µ—Ä–µ–∑ Docker
	@echo "$(GREEN)üî¥ –ó–∞–ø—É—Å–∫ Redis...$(NC)"
	@docker run -d --name taskiq-redis -p 6379:6379 redis:alpine || docker start taskiq-redis

redis-stop: ## üßπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Redis
	@echo "$(RED)‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis...$(NC)"
	@docker stop taskiq-redis || true

health: ## üßπ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@curl -s http://localhost:8000/health | jq . || echo "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@curl -s http://localhost:8000/tasks/health | jq . || echo "‚ùå TaskIQ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

update-deps: ## üßπ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(GREEN)‚¨ÜÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	@uv sync --upgrade

logs: ## üßπ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@echo "$(BLUE)üìã –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:$(NC)"
	@tail -f app.log 2>/dev/null || echo "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"

jupyter: ## üßπ –ó–∞–ø—É—Å—Ç–∏—Ç—å Jupyter Lab —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
	@echo "$(GREEN)üìö –ó–∞–ø—É—Å–∫ Jupyter Lab...$(NC)"
	@echo "$(YELLOW)üí° –û—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π$(NC)"
	@echo "$(BLUE)üìç Notebooks —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –ø–∞–ø–∫–µ notebooks/$(NC)"
	@uv run jupyter lab notebooks/ --port=8888

jupyter-install: ## üßπ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Jupyter –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è notebooks
	@echo "$(BLUE)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Jupyter –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	@uv add --dev notebook jupyterlab ipywidgets matplotlib seaborn plotly pandas
	@echo "$(GREEN)‚úÖ Jupyter —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make jupyter$(NC)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
check-docstrings: ## üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–∑—ã–∫ –∏ —Ñ–æ—Ä–º–∞—Ç docstring
	@echo "$(BLUE)üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞ docstrings...$(NC)"
	@uv run python scripts/check_docstring_language.py $$(find src/ -name "*.py" -not -path "*/tests/*" -not -path "*/__pycache__/*" -not -name "__init__.py" -not -name "main.py" -not -name "cli.py")

check-docs-enhanced: ## üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –æ—Ç—á–µ—Ç–æ–º
	@echo "$(PURPLE)üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...$(NC)"
	@uv run python scripts/enhanced_docs_linter.py src/

# ============================================================================
# üî• –°–ò–°–¢–ï–ú–ê –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô
# ============================================================================

.PHONY: check-exceptions check-exceptions-errors check-warnings fix-exceptions exceptions-report migration-summary

check-exceptions: ## üîç –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π
	@echo "üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π..."
	python scripts/exceptions_isolation_linter.py --check-only

check-exceptions-errors: ## üî• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö ERROR –Ω–∞—Ä—É—à–µ–Ω–∏–π
	@echo "üî• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö ERROR –Ω–∞—Ä—É—à–µ–Ω–∏–π..."
	python scripts/exceptions_isolation_linter.py --check-only --severity ERROR

check-warnings:
	@echo "‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ WARNING –Ω–∞—Ä—É—à–µ–Ω–∏–π..."
	@python scripts/exceptions_isolation_linter.py --check-only --severity WARNING | grep "WARNING" | wc -l | sed 's/^/üìä WARNING –Ω–∞—Ä—É—à–µ–Ω–∏–π: /'
	@echo "üéØ –¶–µ–ª—å: 0 WARNING (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!)"

fix-exceptions: ## üîß –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WARNING –Ω–∞—Ä—É—à–µ–Ω–∏–π
	@echo "üîß –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WARNING –Ω–∞—Ä—É—à–µ–Ω–∏–π..."
	python scripts/exceptions_isolation_linter.py --fix

exceptions-report: ## üìä –û—Ç—á–µ—Ç –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —Å–∏—Å—Ç–µ–º—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π
	@echo "üìä –û—Ç—á–µ—Ç –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —Å–∏—Å—Ç–µ–º—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π..."
	python scripts/exceptions_isolation_linter.py --check-only | head -50

migration-summary:
	@echo "üéâ =========================================="
	@echo "üèÜ –ê–ë–°–û–õ–Æ–¢–ù–ê–Ø –ü–û–ë–ï–î–ê! –ù–ê–†–£–®–ï–ù–ò–ô: 0"
	@echo "üéâ =========================================="
	@echo ""
	@echo "üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:"
	@python scripts/exceptions_isolation_linter.py --check-only | grep "Total violations found" | sed 's/Total violations found: /üìç –ù–∞—Ä—É—à–µ–Ω–∏–π: /'
	@python scripts/exceptions_isolation_linter.py --check-only --severity ERROR | grep "ERROR" | wc -l | sed 's/^/üî• ERROR –Ω–∞—Ä—É—à–µ–Ω–∏–π: /'
	@python scripts/exceptions_isolation_linter.py --check-only --severity WARNING | grep "WARNING" | wc -l | sed 's/^/‚ö†Ô∏è  WARNING –Ω–∞—Ä—É—à–µ–Ω–∏–π: /'
	@echo ""
	@echo "üöÄ –†–ï–ó–£–õ–¨–¢–ê–¢: 281 –ù–ê–†–£–®–ï–ù–ò–ô –ò–°–ü–†–ê–í–õ–ï–ù–û (281‚Üí0, -100%)"
	@echo "üéØ –ê–ë–°–û–õ–Æ–¢–ù–û–ï –°–û–í–ï–†–®–ï–ù–°–¢–í–û –î–û–°–¢–ò–ì–ù–£–¢–û!"
	@echo "‚ú® 0 ERROR, 0 WARNING - –ò–î–ï–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê!"
	@echo ""
	@echo "üèÜ ENTERPRISE-GRADE –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:"
	@echo "   üì¶ Business –∏—Å–∫–ª—é—á–µ–Ω–∏—è: Auth (23), Users (21)"
	@echo "   üîß Core Infrastructure: 8 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, 34 –∏—Å–∫–ª—é—á–µ–Ω–∏—è"
	@echo "   üåê API –∏—Å–∫–ª—é—á–µ–Ω–∏—è: Streaming, Realtime, Messaging, Tools"
	@echo "   üìä –û–±—â–∏–π –∫–æ–¥: ~4,200+ —Å—Ç—Ä–æ–∫" 
	@echo ""
	@echo "üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!"
	@echo "‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã: make check-exceptions, make check-warnings"
	@echo "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README_EXCEPTIONS_SYSTEM.md"
